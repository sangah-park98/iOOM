/*[list] Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ get*/
var notPdfDate ="";
/*[list] Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ get*/
$( document ).ready(function() {
	//setTimeout(exportPdf, 500);
});

$(document).ready(function() {
	var dashboardYy = new Date().getFullYear();
	
	
	$('.band-calendar').each(function(){ regCaldash(this) ;})
	  //Ï∫òÎ¶∞Îçî Ìè¨Îß∑
	$('.datepicker').datepicker("option","dateFormat",dashFormat);

	  var date = new Date();
	  var month = date.getMonth();
	  var dayday = date.getDate();
	  
	  var today = new Date().toISOString().substring(0,7);
	  
	  $("#dashbordDate").val(today);

	// ÎåÄÏãúÎ≥¥Îìú Ï†ïÎ≥¥Í≤ÄÏÉâ
	//fn_selectDashboadInfo();
	//fn_moreNotice($("#moreNoticeList"));
	$("#chartTarget a").click(function() {
		$('.subOutter ol li #' + $(this).attr('id')).click();
		$('.subOutter, .bg').hide();

	})

	let nowYear = new Date().getFullYear();
	let nowMonth = new Date().getMonth() + 1;
	const objYMList = [];
	const yearMonthList = [];
	
	for (let i = nowYear; i >= 2020; i--) {
		for (let j = 12; j >= 1; j--) {
			if (i == nowYear && j > nowMonth) continue;
			
			let obj = i + "-" + (j <= 9 ? "0" + j : j);
			objYMList.push({ i: obj });
			yearMonthList.push(obj);
		}
	}
	
	const currentDate = `${nowYear}-${nowMonth <= 9 ? "0" + nowMonth : nowMonth}`;
	const yearMonthOptions = fn_makeSelect(objYMList, currentDate);
	document.getElementById("dashbordDate").innerHTML = yearMonthOptions;


	
	//fn_dashInfo1("02");
	//fn_dashManagerInfo();
});




function fn_makeSelect(objList, curVal) {
    let result = "";
    const optionHtml = "<option value='{key}' {selected}>{val}</option>";
    for (let i = 0; i < objList.length; i++) {
        const obj = objList[i];
        for (let x in obj) {
            let key = obj[x]; // 'i'
            let selected = key === curVal ? "selected" : "";
            const curObj = { key: key, val: key, selected: selected };
            result += fn_makeObj(curObj, optionHtml);
        }
    }
    return result;
}

function fn_makeObj(obj, template) {
    return template
        .replace("{key}", obj.key)
        .replace("{val}", obj.val)
        .replace("{selected}", obj.selected);
}


function fn_dashSrch(){
	
	const activeElement = document.querySelector("#chartType li.active");
	
	// Í∞í ÏÑ†Ïñ∏
	let activeValue = null;

    if (activeElement.classList.contains("status-tab-imp")) {
        activeValue = "02"; // ÏàòÏûÖ
    } else if (activeElement.classList.contains("status-tab-exp")) {
        activeValue = "01"; // ÏàòÏ∂ú
    }
	
    var dashDate = $("#dashbordDate").val();
	
    fn_dashInfo1(activeValue);
	
}


function fn_rptType(type){
	if (type=="01"){
		const tabType1 = document.querySelector('.status-tab-exp');
		const tabType2 = document.querySelector('.status-tab-imp');
		tabType1.classList.add("active");
	    tabType2.classList.remove("active");
	} else {
		const tabType1 = document.querySelector('.status-tab-exp');
		const tabType2 = document.querySelector('.status-tab-imp');
	    tabType1.classList.remove("active");
	    tabType2.classList.add("active");
	}
	fn_dashInfo1(type);
}

function fn_dashInfo1(type){
	
	
	fn_loading(true);
	var sData = {};
	sData["srch1"] = type;
	sData["srch2"] = $("#dashbordDate").val();
	
	$.ajax({
		type : "POST",
		url : "/dash/selectDashboardInfo1.do",
		data : sData,
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		dataType : "json",
		success : function(data) {
			$("#dashInfo1").html('');
			document.querySelector('#myChart').remove();
		    document.querySelector('.myChartClass').innerHTML = '<canvas id="myChart" height="225"></canvas>'
			var newRow = "";
			var labelDate = [];  		// xÏ∂ï Í∞í
			var expCnt = [];  		// Í±¥Ïàò Í∞í
			var expKrw = []; 
			// Í∏àÏï° Í∞í
			var impCnt = [];  		// Í±¥Ïàò Í∞í
			var impKrw = []; 		// Í∏àÏï° Í∞í
			var impTax = []; 		// Í∏àÏï° Í∞í
				
				for (var i = 0; i < data.resultList.length; i++) {
					newRow = "<tr>" +
								 "<td id='sumDate' style='text-align: center;'>"+data.resultList[i].sumDate + "</td>" +
								 "<td>"+data.resultList2[i].cnt + "</td>" +
								 "<td>"+data.resultList2[i].sumTax + "</td>" +
								 "<td>"+data.resultList2[i].sumKrw + "</td>" +
								 "<td>"+data.resultList[i].cnt + "</td>" +
								 "<td>"+data.resultList[i].sumKrw + "</td>" +
								 "</tr>"
					$("#dashInfo1").append(newRow);
				}
				
				for (var i = data.resultList.length - 1; i >= 0; i--) {
					labelDate.push(data.resultList[i].sumDate);
					expCnt.push(data.resultList[i].cnt);
					
					impCnt.push(data.resultList2[i].cnt);
					
					var strNumber = data.resultList[i].sumKrw;
					var number = parseInt(strNumber.replace(/,/g, ""), 10);
					
					var strNumber2 = data.resultList2[i].sumKrw;
					var number2 = parseInt(strNumber2.replace(/,/g, ""), 10);
					
					var strNumber3 = data.resultList2[i].sumTax;
					var number3 = parseInt(strNumber3.replace(/,/g, ""), 10);
					expKrw.push(number);
					impKrw.push(number2);
					impTax.push(number3);
				}
			// Ï∞®Ìä∏ ÏÉùÏÑ±
		if (type == "01"){
		  	var ctx = document.getElementById('myChart').getContext('2d');
		  	var myChart = new Chart(ctx, {
		    	type: 'bar',
		    	data: {
		      		labels: labelDate,
		      		datasets: [
		        		{
		          			type: 'bar',
		          			label: expVal /*'ÏàòÏ∂úÍ∞ÄÍ≤©(KRW)'*/,
		          			data: expKrw,
		          			backgroundColor: 'rgba(255, 99, 132, 0.2)',
		          			borderColor: 'rgba(255, 99, 132, 1)',
		          			borderWidth: 1,
		          			yAxisID: 'bar-y-axis'
		        		},
		        		{
		          			type: 'line',
		          			label: cnt /*'Í±¥Ïàò'*/,
		          			data: expCnt,
		          			backgroundColor: 'rgba(54, 162, 235, 0.2)',
		          			borderColor: 'rgba(54, 162, 235, 1)',
		          			borderWidth: 1,
		          			fill: false,
		          			yAxisID: 'line-y-axis'
		        		}
		      		]
		    	},
		    options: {
			    	responsive: true,
			        maintainAspectRatio: false,
			        plugins: {
			            datalabels: {
			                display: false // üî• Ïà´Ïûê ÎùºÎ≤® Ïà®Í∏∞Í∏∞
			            }
			        },
			        scales: {
		      			'bar-y-axis': {
		  					id: 'bar-y-axis',
		  					type: 'linear',
		  					position: 'left',
		  					beginAtZero: true
						},
		        		'line-y-axis': {
		  					id: 'line-y-axis',
		  					type: 'linear',
		  					position: 'right',
		 	 				beginAtZero: true
		        		}
		    		}
		    	}
			});
				} else {
					var ctx = document.getElementById('myChart').getContext('2d');
				  	var myChart = new Chart(ctx, {
				    	type: 'bar',
				    	data: {
				      		labels: labelDate,
				      		datasets: [
				        		{
				          			type: 'bar',
				          			label: impVal /*'ÏàòÏûÖÍ∞ÄÍ≤©(KRW)'*/,
				          			data: impKrw,
				          			backgroundColor: 'rgba(255, 99, 132, 0.2)',
				          			borderColor: 'rgba(255, 99, 132, 1)',
				          			borderWidth: 1,
				          			yAxisID: 'bar-y-axis'
				        		},
				        		{
				          			type: 'bar',
				          			label: taxPaid /*'ÎÇ©Î∂ÄÏÑ∏Ïï°(KRW)'*/,
				          			data: impTax,
				          			backgroundColor: 'rgba(155, 200, 50, 0.2)',
				          			borderColor: 'rgba(155, 200, 50, 1)',
				          			borderWidth: 1,
				          			yAxisID: 'bar-y-axis'
				        		},
				        		{
				          			type: 'line',
				          			label: cnt /*'Í±¥Ïàò'*/,
				          			data: impCnt,
				          			backgroundColor: 'rgba(54, 162, 235, 0.2)',
				          			borderColor: 'rgba(54, 162, 235, 1)',
				          			borderWidth: 1,
				          			fill: false,
				          			yAxisID: 'line-y-axis'
				        		}
				      		]
				    	},
				    options: {
					    	responsive: true,
					        maintainAspectRatio: false,
					        plugins: {
					            datalabels: {
					                display: false // üî• Ïà´Ïûê ÎùºÎ≤® Ïà®Í∏∞Í∏∞
					            }
					        },
					        scales: {
				      			'bar-y-axis': {
				  					id: 'bar-y-axis',
				  					type: 'linear',
				  					position: 'left',
				  					beginAtZero: true
								},
								
				        		'line-y-axis': {
				  					id: 'line-y-axis',
				  					type: 'linear',
				  					position: 'right',
				 	 				beginAtZero: true
				        		}
				    		}
				    	}
					});
				}
			fn_loading(false);
		},
		error : function(e, textStatus, errorThrown) {
			if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
				console.log(errorThrown);
				alert(msgSearchError);
        	}
		}
	});
}


function fn_dashManagerInfo(){
    var sData = {};
    $.ajax({
        type : "POST",
        url : "/dash/selectDashManagerInfo.do",
        data : sData,
        beforeSend : function(xmlHttpRequest){
            xmlHttpRequest.setRequestHeader("AJAX", "true");
        },
        dataType : "json",
        success : function(data) {
            $("#dashManagerInfo").html('');
            var newRow = "";
            
            if (data.resultList.length == 0) {
                newRow = "<tr>" +
                         "<td style='text-align: center;'></td>" +
                         "<td style='text-align: center;'>" + '-' + "</td>" +
                         "<td style='text-align: center;'>" + '-' + "</td>" +
                         "<td style='text-align: center;'>" + '-' + "</td>" +
                         "</tr>";
                $("#dashManagerInfo").append(newRow);
            } else if(lang == 'en') {
            	for (var i = 0; i < data.resultList.length; i++) {
                    newRow = "<tr>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrType + "</td>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrEmail + "</td>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrTel + "</td>" +
                             "</tr>";
                    $("#dashManagerInfo").append(newRow);
            	}
            } else {
                for (var i = 0; i < data.resultList.length; i++) {
                    newRow = "<tr>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrType + "</td>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrNm + "</td>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrEmail + "</td>" +
	                             "<td style='text-align: center;'>" + data.resultList[i].usrTel + "</td>" +
                             "</tr>";
                    $("#dashManagerInfo").append(newRow);
                }
            }
        },
        error : function(e, textStatus, errorThrown) {
            if(e.status == 400){
                alert("Your request is up. Please log back in if you wish to continue");
                location.href = document.referrer;
            } else {
                console.log(errorThrown);
                alert("There was an error processing your request.");
            }
        }
    });
}


// Í≥µÏßÄÏÇ¨Ìï≠ ÌÅ¥Î¶≠
function fn_callNoticePop(noticeSeq) {
	$("#dashNoticePop").find("input").val(null);
	$("#dashNoticePop").find("textarea").val(null);
	$("#dashNoticePop").modal("show");
	$("#notiIcon" + noticeSeq + " #newicon").hide();

	var uData = {};
	uData["srch1"] = noticeSeq;
	$.ajax({
		type : "POST",
		url : "/base/updateReadNotice.do",
		data : JSON.stringify(uData),
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		contentType : "application/json; charset=utf-8",
		success : function(data) {
			if (data == "success") {
				fn_searchDashNotice(noticeSeq);
			}
		},
		error : function(e, textStatus, errorThrown) {
			if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
				console.log(errorThrown);
				alert(msgSaveError);
        	}
		}
	});

};

// Í≥µÏßÄÏÇ¨Ìï≠ ÌåùÏóÖÍ≤ÄÏÉâ
function fn_searchDashNotice(noticeSeq) {
	var sData = {};
	sData["srch1"] = noticeSeq;

	$.ajax({
		type : "POST",
		url : "/dash/selectDashNoticeInfo.do",
		data : sData,
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		dataType : "json",
		success : function(data) {
			if (data.result.dashFileNm == undefined
					|| data.result.dashFileNm == "") {
				$("#dashNoticeAttach").hide();
			} else {
				$("#dashNoticeAttach").show();
			}

			$.each(data.result, function(key, value) {
				$("#dashNoticePop").find("input[name='" + key + "']")
						.val(value);
				$("#dashNoticePop").find("textarea[name='" + key + "']").val(
						value);
			});
		},
		error : function(e, textStatus, errorThrown) {
			if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
				console.log(errorThrown);
				alert(msgSearchError);
        	}
		}
	});

};

// ÏùΩÏùåÏ≤¥ÌÅ¨
function fn_noticeReadCheck() {
	for (i = 0; i < colReadList.length; i++) {
		$("#notiIcon" + colReadList[i] + " #newicon").hide();
	}
}

// Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå
function fn_moreNotice(elemVal) {
	elemVal.val(Number(elemVal.val()) + 10);
	var nData = {};
	nData["startPoint"] = Number(elemVal.val());
	$.ajax({
		type : "POST",
		url : "/base/selectMoreNoticeList.do",
		data : nData,
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		dataType : "json",
		success : function(data) {
			colNoticecnt = data.totCnt;
			setTimeout(function() {
				fn_noticeList(data)
			}, 0.0001);
		},
		error : function(e, textStatus, errorThrown) {
			if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
				console.log(errorThrown);
				// alert(msgSearchError);
        	}
		}
	});

}

// Î¶¨Ïä§Ìä∏ Í∑∏Î†§Ï£ºÎäî Î∂ÄÎ∂Ñ
function fn_noticeList(data) {
	if (data.totCnt > Number($("#moreNoticeList").val()) - 10
			|| $("#moreNoticeList").val() == "0") {
		$("#noticeTbl tbody").children().remove();
		var rowData;
		for (var i = 0; i < data.noticeList.length; i++) {
			rowData = data.noticeList[i];
			var rowText = "<tr>";
			rowText = rowText + "<tr onclick='fn_callNoticePop("
					+ rowData.noticeSeq + ")' style='cursor:pointer;'>";
			rowText = rowText + "<td>" + rowData.noticeSn + "</td>";
			rowText = rowText + "<td align='left' id='notiTit"
					+ rowData.noticeSeq + "'>" + rowData.title + "</td>";
			rowText = rowText
					+ "<td id='notiIcon"
					+ rowData.noticeSeq
					+ "'><span class='badge badge-info' style='margin-right:5px' id='newicon'>NEW</span></td>"
			rowText = rowText + "<td >" + rowData.regDt + "</td> ";
			rowText = rowText + "</tr>";
			$("#noticeTbl tbody").append(rowText);
			$("#noticeTbl").css("border-collapse", "collapse")
			$("#noticeTbl tbody").css("overflow-y", "hidden ")
			// $("#noticeTbl tbody").css("height","300px")
		}
		fn_noticeReadCheck();
	} else {
		alert(msgNotice);
	}
};

// notice modal popup
$('ul.bg-white li').on('click', function(){
	var dashNoticeSeq = $(this).find('p.text-sm:hidden').text();
    $('#dashNoticePop').show();
    fn_dashNoticeModalContentPopUp(dashNoticeSeq);
});


function fn_dashNoticeModalContentPopUp(dashNoticeSeq){
	var sData = {};
	sData["srch3"] = dashNoticeSeq;
	$.ajax({
		type : "POST",
		url : "/base/selectDashNoticeViewList.do",
		data : sData,
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		dataType: "json",
        success : function(data) {
        	fillDashNoticeModalContent(data.resultList);
        },
        error : function(e, textStatus, errorThrown) {
        	if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
	        	console.log(errorThrown);
	        	alert(msgSearchError);
        	}
        }
	});
};

function fillDashNoticeModalContent(resultList) {
    var notice = resultList[0];
    var noticeDt = notice.noticeDt;
    var year = noticeDt.substring(0, 4);
    var month = noticeDt.substring(4, 6);
    var day = noticeDt.substring(6, 8);
    var formattedNoticeDt = year + "." + month + "." + day;
    
    var edtDt = notice.edtDt;

    document.querySelector('.dashNotice-modal h3').textContent = notice.titleKr;
    document.querySelector('.dashNotice-modal span').textContent = notice.date;
    // document.querySelector('.dashNotice-modal span').textContent = notice.edtDt;
    document.querySelector('.dashNotice-modal textarea').textContent = notice.cnKr;
    
    var strHtml = "";
    if (notice.fileOrgNm) {
        strHtml = '<a href="#" id="dashDownload" style="color:#030303"><i class="fa-regular fa-floppy-disk"></i> Ï≤®Î∂ÄÌååÏùº : ' + notice.fileOrgNm + '</a>';
    }
    
    var dateInfo = document.querySelector('.dashNotice-modal .text-sm');
    if(edtDt == '' || edtDt == null) {
    	dateInfo.textContent = 'Îì±Î°ùÏùº: ' + formattedNoticeDt;
    } else {
    	/*var edtyear = edtDt.substring(0, 4);
        var edtmonth = edtDt.substring(4, 6);
        var edtday = edtDt.substring(6, 8);
        var formattedEdtDt = edtyear + "." + edtmonth + "." + edtday;
    	dateInfo.textContent = 'Îì±Î°ùÏùº: ' + formattedNoticeDt + ' , ÏàòÏ†ïÏùº: ' + formattedEdtDt;*/
    }
    dateInfo.style.fontSize = '13px';
    
    document.querySelector('.dashNotice-modal .text-base').innerHTML = strHtml;
    
    var dashDownloadLink = document.getElementById('dashDownload');
    if (notice.fileOrgNm) {
	    dashDownloadLink.addEventListener('mouseenter', function() {
	    dashDownloadLink.style.color = 'rgb(45 126 98)';
	    dashDownloadLink.style.fontWeight = 'bold';
	    });
	
		dashDownloadLink.addEventListener('mouseleave', function() {
			 dashDownloadLink.style.color = '#030303';
			 dashDownloadLink.style.fontWeight = '';
		});
    }
}


$(document).on('click', '#dashDownload', function(){
	const htmlContent = event.target.innerHTML.trim();
	const fileOrgNm = htmlContent.split(' Ï≤®Î∂ÄÌååÏùº : ')[1];
    $("#dashFileDown").val(fileOrgNm);
    document.dashFileDownForm.action = "/cmmn/dashFileDown.do";
    document.dashFileDownForm.submit();
})

// news modal popUp 
function dashNoticeClose(){
	$("#dashNoticePop").hide();
}

$('div.bg-blue li').on('click', function(){
	var dashNewsSeq = $(this).find('p.text-sm:hidden').text();
    $('#dashNewsPop').show();
    fn_dashNewsModalContentPopUp(dashNewsSeq);
});


function fn_dashNewsModalContentPopUp(dashNewsSeq){
	var sData = {};
	sData["srch3"] = dashNewsSeq;
	$.ajax({
		type : "POST",
		url : "/cmmn/selectNewsModalViewList.do",
		data : sData,
		beforeSend : function(xmlHttpRequest){
			xmlHttpRequest.setRequestHeader("AJAX", "true");
		},
		dataType: "json",
        success : function(data) {
        	filldashNewsModalContent(data.resultList);
        },
        error : function(e, textStatus, errorThrown) {
        	if(e.status == 400){
        		alert("Your request is up. Please log back in if you wish continue");
        		location.href = document.referrer;
        	} else {
	        	console.log(errorThrown);
	        	alert(msgSearchError);
        	}
        }
	});
};


function filldashNewsModalContent(resultList) {
    var news = resultList[0];
    var regDt = news.regDt;
    var year = regDt.substring(0, 4);
    var month = regDt.substring(4, 6);
    var day = regDt.substring(6, 8);
    var formattedNewsDt = year + "." + month + "." + day;

    var edtDt = news.edtDt;

    document.querySelector('.dashNews-modal h3').textContent = news.titleKr || '';
    document.querySelector('.dashNews-modal span').textContent = news.regDt || '';
    
    var strHtml = '';
    if (news.fileName && news.fileName.trim() !== '') {
        var fileNames = news.fileName.split('/');
        strHtml = fileNames.map(function(name) {
            return '<a href="#" class="news-file-name" style="color:#030303;">' + '&nbsp;&nbsp;&nbsp;&nbsp;' + name + '</a>';
        }).join('<br>');
        strHtml = '<i class="fa-regular fa-floppy-disk"></i> Ï≤®Î∂ÄÌååÏùº :<br>' + strHtml;
    }

    document.getElementById('mainNewsFileName').innerHTML = strHtml;

    setTimeout(function() {
        var fileNameElements = document.querySelectorAll('.news-file-name');
        fileNameElements.forEach(function(element) {
            element.addEventListener('mouseenter', function() {
                element.style.color = 'rgb(45, 126, 98)';
                element.style.fontWeight = 'bold';
            });

            element.addEventListener('mouseleave', function() {
                element.style.color = '#030303';
                element.style.fontWeight = '';
            });
        });
    }, 0);

    $("#dashNewsContent").html(news.cnKr || '');
    $('#dashNewsContent a').attr('target', '_blank');

    var dateInfo = document.querySelector('.dashNews-modal .text-sm');
    if (!edtDt) {
        dateInfo.textContent = 'Îì±Î°ùÏùº: ' + formattedNewsDt;
    } else {
        var edtyear = edtDt.substring(0, 4);
        var edtmonth = edtDt.substring(4, 6);
        var edtday = edtDt.substring(6, 8);
        var formattedEdtDt = edtyear + "." + edtmonth + "." + edtday;

        dateInfo.textContent = 'Îì±Î°ùÏùº: ' + formattedNewsDt + ' , ÏàòÏ†ïÏùº: ' + formattedEdtDt;
    }
    dateInfo.style.fontSize = '13px';
}



//Ï≤®Î∂ÄÌååÏùº
$(document).on('click', '.dash-file-name', function(event) {
    const htmlContent = event.target.innerHTML.trim();
    const fileName = htmlContent.replace(/&nbsp;/g, '').trim();
    $("#noticeFileDown").val(fileName);
    document.dashNewsFileDownForm.action = "/cmmn/noticesFileDown.do";
    document.dashNewsFileDownForm.submit();
});

// ÎåÄÏãúÎ≥¥Îìú ÎÇ¥ Í¥ÄÏÑ∏Îâ¥Ïä§ 
$(document).on('click', '.news-file-name', function (event) {
    event.preventDefault();
    const htmlContent = event.target.innerHTML.trim();
    const fileName = htmlContent.replace(/&nbsp;/g, '').trim();
    $("#mainNewsFileDown").val(fileName);
    const form = document.mainNewsFileDown;
    form.action = "/cmmn/mainNewsFileDown.do";
    form.submit();
});

function dashNewsClose(){
	$("#dashNewsPop").hide();
}



function dashExcelDownload(){
	
	fn_loading(true);
	var exCol = "";
	var exTit = "";
	var exTitDiv = "";
			//ÏàòÏ∂úÏûÖÌòÑÌô©
	exCol = "markCont|htLeft|180||cnt1|htRight|70||sum1|htRight|130||cnt2|htRight|70||sum2|htRight|130||cnt3|htRight|70||" +
			"sum3|htRight|130||cnt4|htRight|70||sum4|htRight|130||cnt5|htRight|70||sum5|htRight|130||cnt6|htRight|70||sum6|htRight|150|||" +
			"markCont|htLeft|180||cnt1|htRight|70||sum1|htRight|130||cnt2|htRight|70||sum2|htRight|130||cnt3|htRight|70||sum3|htRight|130||" +
			"cnt4|htRight|70||sum4|htRight|130||cnt5|htRight|70||sum5|htRight|130||cnt6|htRight|70||sum6|htRight|150|||supFirm|htLeft|200||" +
			"cnt1|htRight|80||sum1|htRight|150||cnt2|htRight|80||sum2|htRight|150||cnt3|htRight|80||sum3|htRight|150|||buyFirm|htLeft|200||" +
			"cnt1|htRight|80||sum1|htRight|150||cnt2|htRight|80||sum2|htRight|150||cnt3|htRight|80||sum3|htRight|150|||fodMark|htCenter|80||" +
			"title|htLeft|200||traMetCont|htLeft|160||conCod|htCenter|80||cnt|htRight|80||freKrw|htRight|120||totWt|htRight|100||" +
			"totTaxKrw|htRight|150||cal1|htRight|100||cal2|htRight|100|||fodMark|htCenter|80||title|htLeft|200||traMetCont|htLeft|160||" +
			"conCod|htCenter|80||cnt|htRight|80||insuKrw|htRight|120||totWt|htRight|100||totTaxKrw|htRight|150||cal1|htRight|100||cal2|" +
			"htRight|100|||" +
			//ÏàòÏ∂úÏûÖÌòÑÌô©
			//Îã®Í∞ÄÎ∂ÑÏÑù
			"plant|htLeft|150||invoice|htLeft|100||rptNo|htCenter|130||expLisDay|htCenter|150||totRptKrw|htRight|80||" +
			"excDivi|htCenter|80||excDiviCont|htLeft|80|||plant|htLeft|150||po|htLeft|100||blNo|htLeft|130||rptNo|htCenter|140||ranNo|htCenter|65||" +
			"sil|htCenter|65||lisDay|htCenter|95||rgCode|htCenter|130||upi|htRight|90||ut|htCenter|80||conKi|htCenter|80||supFirm|htLeft|140||" +
			"conCur|htCenter|75||upiWon|htRight|110||max|htRight|110||min|htRight|110||avg|htRight|110||maxDiff|htRight|110||minDiff|htRight|110||" +
			"avgDiff|htRight|110||maxPer|htRight|140||minPer|htRight|140||avgPer|htRight|140|||plant|htLeft|150||po|htLeft|100||blNo|htLeft|150||" +
			"rptNo|htCenter|150||ranNo|htCenter|80||sil|htCenter|80||lisDay|htCenter|100||rgCode|htCenter|130||upi|htRight|150||ut|htCenter|80||" +
			"conKi|htCenter|80||supFirm|htLeft|200||conCur|htCenter|100||upiWon|htRight|130||avg|htRight|130|||plant|htLeft|200||rgCode|htLeft|150||" +
			"supFirm|htLeft|200||conCur|htCenter|100||rptCnt|htRight|80||rptSum|htRight|200|||" +
			//Îã®Í∞ÄÎ∂ÑÏÑù
			//ÏàòÏ∂úÏûÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
			"rgCode|htCenter|120||hs|htCenter|120||stdGName1|htLeft|200||" +
			"rptNo|htCenter|150||ranNo|htCenter|80||sil|htCenter|80||gsDivi|htCenter|80||gsRate|htRight|100||oriStMark1|htCenter|80||fodMark|htCenter|80||" +
			"qty|htRight|100||conAmt|htRight|100||conCur|htCenter|100||upiWon|htRight|200||gs|htRight|200|||rgCode|htCenter|120||hs|htCenter|120||" +
			"stdGName1|htLeft|200||rptNo|htCenter|150||ranNo|htCenter|80||sil|htCenter|80||gsDivi|htCenter|80||gsRate|htRight|100||oriStMark1|htCenter|80||" +
			"fodMark|htCenter|80||qty|htRight|100||conAmt|htRight|100||conCur|htCenter|100||upiWon|htRight|200||gs|htRight|200|||supFirm|htLeft|200||" +
			"rptNo|htCenter|150||ranNo|htCenter|80||stdName|htLeft|200||rmvRptNo|htCenter|150||rmvRanNo|htCenter|80||rmvStdName|htLeft|200||" +
			"gsDivi|htCenter|80||gsRate|htCenter|80||gs|htRight|150||vatDivi|htCenter|80||vatRate|htRight|80||vat|htRight|200||gsRmvMark|htCenter|100||" +
			"gsRmvRate|htRight|100||rmv|htRight|200||vatRmvMark|htCenter|100||vatRmvRate|htRight|100||vatRmv|htRight|200|||rgCode|htLeft|200||rptNo|htCenter|200||" +
			"ranNo|htCenter|200||sil|htCenter|200||hs|htCenter|200||taxKiDivi|htCenter|200||gxRate|htRight|200||oriStMark1|htCenter|200||fodMark|htCenter|200||lisDay|htCenter|200";
			//ÏàòÏ∂úÏûÖÎç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
	
			//ÏàòÏ∂úÏûÖ ÌòÑÌô©
	exTit = "null|null||2020|2||2021|2||2022|2||2023|2||2024-05-29|2||Ìï©Í≥Ñ|2|||Í±∞ÎûòÍµ¨Î∂Ñ|null||ÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||ÏàòÏûÖ(Í±¥)|null||" +
			"ÏàòÏûÖ(KRW)|null||ÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||ÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||ÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||ÏàòÏûÖ(Í±¥)|null||" +
			"ÏàòÏûÖ(KRW)|null||||null|null||2020|2||2021|2||2022|2||2023|2||2024-05-29|2||Ìï©Í≥Ñ|2|||Í±∞ÎûòÍµ¨Î∂Ñ|null||ÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||" +
			"ÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||ÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||ÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||ÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||ÏàòÏ∂ú(Í±¥)|null||" +
			"ÏàòÏ∂ú(KRW)|null||||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||ÏùºÎ∞òÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||Í∏∞ÌÉÄÏàòÏûÖ(Í±¥)|null||ÏàòÏûÖ(KRW)|null||ÏàòÏûÖÌï©Í≥Ñ(Í±¥)|null||ÏàòÏûÖÌï©Í≥Ñ(KRW)|null||||" +
			"Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||ÏùºÎ∞òÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||Í∏∞ÌÉÄÏàòÏ∂ú(Í±¥)|null||ÏàòÏ∂ú(KRW)|null||ÏàòÏ∂úÌï©Í≥Ñ(Í±¥)|null||ÏàòÏ∂úÌï©Í≥Ñ(KRW)|null||||Ï†ÅÏ∂úÍµ≠|null||" +
			"Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||Ïö¥ÏÜ°ÌòïÌÉú|null||Ïù∏ÎèÑÏ°∞Í±¥|null||Ïã†Í≥†Í±¥Ïàò|null||Ïö¥ÏûÑ|null||Ï¥ùÏ§ëÎüâ(KG)|null||Í≥ºÏÑ∏Í∞ÄÍ≤©(KRW)|null||Ïö¥ÏûÑ/Ï§ëÎüâ(KRW)|null||Ïö¥ÏûÑ/Í≥ºÏÑ∏Í∞ÄÍ≤©(%)|null||||" +
			"Ï†ÅÏ∂úÍµ≠|null||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||Ïö¥ÏÜ°ÌòïÌÉú|null||Ïù∏ÎèÑÏ°∞Í±¥|null||Ïã†Í≥†Í±¥Ïàò|null||Î≥¥ÌóòÎ£å|null||Ï¥ùÏ§ëÎüâ(KG)|null||Í≥ºÏÑ∏Í∞ÄÍ≤©(KRW)|null||Î≥¥ÌóòÎ£å/Ï§ëÎüâ(KRW)|null||" +
			"Î≥¥ÌóòÎ£å/Í≥ºÏÑ∏Í∞ÄÍ≤©(%)|null||||PO|null||Ïù∏Î≥¥Ïù¥Ïä§Î≤àÌò∏|null||Ïã†Í≥†Î≤àÌò∏|null||ÏàòÎ¶¨ÏùºÏûê|null||Ïã†Í≥†Í∞ÄÍ≤©|null||ÏàòÏ∂úÏΩîÎìú|null||Ïô∏ÌôòÏã†Í≥†ÎåÄÏÉÅÏó¨Î∂Ä|null||||" +
			//ÏàòÏ∂úÏûÖ ÌòÑÌô©
			//Îã®Í∞ÄÎ∂ÑÏÑù
			"Í≥µÏû•ÏΩîÎìú|null||PO|null||B/L|null||Ïã†Í≥†Î≤àÌò∏|null||ÎûÄ|null||Í∑úÍ≤©|null||ÏàòÎ¶¨ÏùºÏûê|null||ÏûêÏû¨ÏΩîÎìú|null||Ïã†Í≥†Îã®Í∞Ä|null||Ïã†Í≥†Îã®ÏúÑ|null||Í≤∞Ï†úÎ∞©Î≤ï|null||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||" +
			"Í≤∞Ï†úÌÜµÌôî|null||ÏõêÌôîÎã®Í∞Ä|null||ÏµúÍ≥†Îã®Í∞Ä|null||ÏµúÏ†ÄÎã®Í∞Ä|null||ÌèâÍ∑†Îã®Í∞Ä|null||Îã®Í∞ÄÏ∞®Ïù¥(ÏµúÍ≥†)|null||Îã®Í∞ÄÏ∞®Ïù¥(ÏµúÏ†Ä)|null||Îã®Í∞ÄÏ∞®Ïù¥(ÌèâÍ∑†)|null||Îã®Í∞ÄÏ∞®Ïù¥ ÎπÑÏú®(ÏµúÍ≥†)|null||" +
			"Îã®Í∞ÄÏ∞®Ïù¥ ÎπÑÏú®(ÏµúÏ†Ä)|null||Îã®Í∞ÄÏ∞®Ïù¥ ÎπÑÏú®(ÌèâÍ∑†)|null||||Í≥µÏû•ÏΩîÎìú|null||PO|null||B/L|null||Ïã†Í≥†Î≤àÌò∏|null||ÎûÄ|null||Í∑úÍ≤©|null||ÏàòÎ¶¨ÏùºÏûê|null||ÏûêÏû¨ÏΩîÎìú|null||" +
			"Ïã†Í≥†Îã®Í∞Ä|null||Ïã†Í≥†Îã®ÏúÑ|null||Í≤∞Ï†úÎ∞©Î≤ï|null||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||Í≤∞Ï†úÌÜµÌôî|null||ÏõêÌôîÎã®Í∞Ä|null||ÌèâÍ∑†Îã®Í∞Ä|null||||Í≥µÏû•ÏΩîÎìú|null||ÏûêÏû¨ÏΩîÎìú|null||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||" +
			"Í≤∞Ï†úÌÜµÌôî|null||Ïã†Í≥†Í±¥Ïàò|null||Ïã†Í≥†Í∏àÏï°(ÏõêÌôî)|null||||ÏûêÏû¨ÏΩîÎìú|null||ÏÑ∏Î≤àÎ∂ÄÌò∏|null||Í±∞ÎûòÌíàÎ™Ö|null||ÏàòÏûÖÏã†Í≥†Î≤àÌò∏|null||ÎûÄÎ≤àÌò∏|null||Í∑úÍ≤©|null||Í¥ÄÏÑ∏Íµ¨Î∂Ñ|null||Í¥ÄÏÑ∏Ïú®|null||" +
			"ÏõêÏÇ∞ÏßÄ|null||Ï†ÅÏ∂úÍµ≠|null||ÏàòÎüâ|null||Í≤∞Ï†úÍ∏àÏï°|null||Í≤∞Ï†úÌÜµÌôî|null||ÏõêÌôîÍ∏àÏï°|null||ÎÇ©Î∂ÄÍ¥ÄÏÑ∏Ïï°|null||||" +
			//Îã®Í∞ÄÎ∂ÑÏÑù
			//ÏàòÏ∂úÏûÖ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
			"ÏûêÏû¨ÏΩîÎìú|null||ÏÑ∏Î≤àÎ∂ÄÌò∏|null||Í±∞ÎûòÌíàÎ™Ö|null||ÏàòÏûÖÏã†Í≥†Î≤àÌò∏|null||" +
			"ÎûÄÎ≤àÌò∏|null||Í∑úÍ≤©|null||Í¥ÄÏÑ∏Íµ¨Î∂Ñ|null||Í¥ÄÏÑ∏Ïú®|null||ÏõêÏÇ∞ÏßÄ|null||Ï†ÅÏ∂úÍµ≠|null||ÏàòÎüâ|null||Í≤∞Ï†úÍ∏àÏï°|null||Í≤∞Ï†úÌÜµÌôî|null||ÏõêÌôîÍ∏àÏï°|null||ÎÇ©Î∂ÄÍ¥ÄÏÑ∏Ïï°|null||||null|null||" +
			"Í¥ÄÏÑ∏Í∞êÎ©¥Ï†ÅÏö© Í±¥ Ïàò|3||Í¥ÄÏÑ∏Í∞êÎ©¥ÎØ∏Ï†ÅÏö© Í±¥ Ïàò|3||Ï¥ùÍ¥ÄÏÑ∏Ïï°|3||Ï¥ùÎ∂ÄÍ∞ÄÏÑ∏Ïï°|3||Í¥ÄÏÑ∏Í∞êÎ©¥ÏÑ∏Ïï°|3||Î∂ÄÍ∞ÄÏÑ∏Í∞êÎ©¥ÏÑ∏Ïï°|3|||Ìï¥Ïô∏Í±∞ÎûòÏ≤ò|null||ÏàòÏûÖÏã†Í≥†Î≤àÌò∏|null||ÎûÄ|null||Í±∞ÎûòÌíàÎ™Ö|null||" +
			"ÏàòÏûÖÏã†Í≥†Î≤àÌò∏|null||ÎûÄ|null||Í±∞ÎûòÌíàÎ™Ö|null||Í¥ÄÏÑ∏Íµ¨Î∂Ñ|null||Í¥ÄÏÑ∏Ïú®|null||Í¥ÄÏÑ∏Ïï°|null||Î∂ÄÍ∞ÄÏÑ∏Íµ¨Î∂Ñ|null||Î∂ÄÍ∞ÄÏÑ∏Ïú®|null||Î∂ÄÍ∞ÄÏÑ∏Ïï°|null||Í¥ÄÏÑ∏Í∞êÎ©¥Î∂ÄÌò∏|null||Í¥ÄÏÑ∏Í∞êÎ©¥Ïú®|null||" +
			"Í¥ÄÏÑ∏Í∞êÎ©¥ÏÑ∏Ïï°|null||Î∂ÄÍ∞ÄÏÑ∏Í∞êÎ©¥Î∂ÄÌò∏|null||Î∂ÄÍ∞ÄÏÑ∏Í∞êÎ©¥Ïú®|null||Î∂ÄÍ∞ÄÏÑ∏Í∞êÎ©¥ÏÑ∏Ïï°|null||||ÏûêÏû¨ÏΩîÎìú|null||ÏàòÏûÖÏã†Í≥†Î≤àÌò∏|null||ÎûÄ|null||Í∑úÍ≤©|null||HS CODE|null||ÏÑ∏Ï¢Ö|null||ÏÑ∏Ïú®|null||ÏõêÏÇ∞ÏßÄ|null||Ï†ÅÏ∂úÍµ≠|null||ÏàòÏûÖÏã†Í≥† ÏàòÎ¶¨Ïùº|null";
			//ÏàòÏ∂úÏûÖ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
	
	exTitDiv = "1|5ÎÖÑÏπò_ÏàòÏûÖÏã§Ï†Å||2|5ÎÖÑÏπò_ÏàòÏ∂úÏã§Ï†Å||3|Ìï¥Ïô∏Í±∞ÎûòÏ≤òÎ≥Ñ_ÏàòÏûÖÏã§Ï†Å||4|Ìï¥Ïô∏Í±∞ÎûòÏ≤òÎ≥Ñ_ÏàòÏ∂úÏã§Ï†Å||5|Ïö¥ÏûÑ_ÎπÑÍµê||6|Î≥¥ÌóòÎ£å_ÎπÑÍµê||7|Ïô∏ÌôòÏã†Í≥†ÎåÄÏÉÅ_ÏàòÏ∂ú||" + //ÏàòÏ∂úÏûÖ ÌòÑÌô©
			   "8|ÏàòÏûÖÎ¨ºÌíà_Îã®Í∞ÄÎπÑÍµê||9|Ïú†Î¨¥ÏÉÅ_ÏàòÏûÖÍ±¥_Í≥ºÏÑ∏Í∞ÄÍ≤©_ÎπÑÍµê||10|ÎèôÏùºÍ±∞Îûò,_Í≤∞Ï†úÌÜµÌôî_Î≥ÄÍ≤ΩÏ†êÍ≤Ä||" +  //Îã®Í∞ÄÎ∂ÑÏÑù
			   "11|ÎèôÏùºÏûêÏû¨ÏΩîÎìú_ÌíàÎ™©Î∂ÑÎ•ò_ÏÉÅÏù¥Ï†êÍ≤Ä||12|ÎèôÏùºÏûêÏû¨ÏΩîÎìú_Í¥ÄÏÑ∏Íµ¨Î∂Ñ_ÏÉÅÏù¥Ï†êÍ≤Ä||13|Í∞êÎ©¥_Ï†ÅÏö©_ÏùºÍ¥ÄÏÑ±_Í≤ÄÌÜ†||14|FTA_ÏßÅÏ†ëÏö¥ÏÜ°ÏõêÏπô"; //ÏàòÏ∂úÏûÖ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
	
	var date = new Date();
	var month = date.getMonth();
	var dayday = date.getDate();
	var day = date.getDay();
	
	var startDt = new Date();
	startDt.setMonth(startDt.getMonth() - 1);
	startDt.setDate(1);
	
	var endDt = new Date();
	endDt.setMonth(endDt.getMonth(), 1);
	endDt.setDate(endDt.getDate() - 1);
	
	var today = startDt.toISOString().substring(0,10);
	var mtoday = endDt.toISOString().substring(0,10);
	
	$("#importUp_srch2").val(today);
	$("#importUp_srch3").val(mtoday);
	
	var parameters = {exCol : "", exTit: "", exTitDiv: "", exType: "", srch2: "", srch3: "", srch40: ""};
	
	
	parameters.exCol = exCol.replace(/ /g,"_");
	parameters.exTit = exTit.replace(/ /g,"_");
	parameters.exTitDiv = exTitDiv.replace(/ /g,"_");
	parameters.exType = "01";
	parameters.srch2 = today;
	parameters.srch3 = mtoday;
	parameters.srch40 = "TEST";
	
	
	$.ajax({
		 url: "/dashboard/dashDownloadExcel.do",
		 data: parameters,
		 type: 'POST',
		 cache: false,
		 timeout: 200000,
		 xhrFields: {
			 responseType: "blob",
		 },
	    success: function(blob, status, xhr) {
	    	try {
				// check for a filename
				 var fileName = "";
				 var disposition = xhr.getResponseHeader("Content-Disposition");

			       if (disposition && disposition.indexOf("attachment") !== -1) {
			      	 var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
			           var matches = filenameRegex.exec(disposition);

			           if (matches != null && matches[1]) {
			               fileName = decodeURI(matches[1].replace(/['"]/g, ""));
			           }
			       }

			       // for IE
			       if (window.navigator && window.navigator.msSaveOrOpenBlob) {
			           window.navigator.msSaveOrOpenBlob(blob, fileName);
			       } else {
			           var URL = window.URL || window.webkitURL;
			           var downloadUrl = URL.createObjectURL(blob);

			           if (fileName) {
			               var a = document.createElement("a");

			               // for safari
			               if (a.download === undefined) {
			                   window.location.href = downloadUrl;
			               } else {
			                   a.href = downloadUrl;
			                   a.download = fileName;
			                   document.body.appendChild(a);
			                   a.click();
			               }
			           } else {
			               window.location.href = downloadUrl;
			           }
			       }
		       fn_loading(false);
			} catch (e) {
				console.log(e);
				fn_loading(false);
			};
	    },
	    error: function(e, textStatus, errorThrown) {
	    	if(e.status == 400){
	    		alert("Your request is up. Please log back in if you wish continue");
	    		location.href = document.referrer;
	    	} else {
	        	console.log(errorThrown);
	    	}
	    }
	});
	
}

//
document.getElementById("reportAnalysis").addEventListener("click", function(event) {
    event.preventDefault(); // Í∏∞Î≥∏ ÎèôÏûë Î∞©ÏßÄ
    fn_loading(true);
    // FTAÍ∏∞Ï§ÄÏùº
    var url = "/rpt/reportAnalysisPdf.do"; // ÏÑúÎ≤Ñ Ï∏° Îß§ÌïëÍ≥º ÏùºÏπòÌïòÎäî URLÎ°ú ÏÑ§Ï†ï
    // Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
    var sData = {};
    sData["srch8"] = $("#dashbordDate").val();
    console.log("ÎÇ†Ïßú"+$("#dashbordDate").val());
   
    $.ajax({
		 url: url,
		 data: sData,
		 type: 'GET',
		 dataType : 'json',
		 success: function(response) {
			    console.log("response", response);  
			    exportRptPdf(response); 
			    
			    
			},
	    error: function(e, textStatus, errorThrown) {
	    	if(e.status == 400){
	    		alert("Your request is up. Please log back in if you wish continue");
	    		location.href = document.referrer;
	    	} else {
	        	console.log(errorThrown);
	    	}
	    }
	});
});



function exportRptPdf(data){

	let canvas = "";
	let rightCanvas = "";
	
	let lastYPage1 = 0;
	let lastYPage2 = 0;
	let lastYPage3 = 0;
	let lastYPage4 = 0;
	let lastYPage5 = 0;
	let lastYPage6 = 0;
	let lastYPage7 = 0;
	let lastYPage8 = 0;
	let lastYPage9 = 0;
	let lastYPage10 = 0;
	let lastYPage11 = 0;
	
	
	if (!window.jsPDF) window.jsPDF = window.jspdf.jsPDF;
        var doc = new jsPDF({
            orientation: "portrait",
            unit: "mm",
            format: "a4"
        });
        
        // ‚úÖ ÌïúÍ∏Ä Ìè∞Ìä∏ Ï∂îÍ∞Ä (malgun.ttf ÌïÑÏöî)
        doc.addFont('/pf/fonts/NanumSquare.ttf', 'NanumSquare', 'normal');
        doc.setFont('NanumSquare'); // ÏÇ¨Ïö©ÌïòÎ†§Îäî Ìè∞Ìä∏ ÏßÄÏ†ï
        

        var img = new Image();
        //img.src = '/pf/images/report_2.jpg'; //ÌååÎûÄ
        img.src = '/pf/images/green_report2.jpg'; 
        var logoImg = new Image();
        logoImg.src = '/pf/images/report_4.png';

        img.onload = function () {
        	doc.addFont('/pf/fonts/NanumSquareEB.ttf', 'NanumSquareEB', 'normal');
            console.log("Background image loaded successfully");
            doc.addImage(img, 'JPEG', 0, 0, 210, 297);
            doc.addImage(logoImg, 'PNG', 160, 10, 40, 15);

            doc.setFontSize(22);
            //doc.setTextColor(56, 60, 98); ÌååÎûÄ
            doc.setTextColor(35, 69, 56);
            //doc.text(105, 110, String(data.rptDate1) + 'ÎÖÑ ' + String(data.rptDate2) + 'Ïõî', { align: "center" }); ÌååÎûÄ
            doc.text(105, 130, String(data.rptDate1) + 'ÎÖÑ ' + String(data.rptDate2) + 'Ïõî', { align: "center" });
            doc.setFontSize(22);
            //doc.text(105, 120, 'ÌÜµÍ¥ÄÎ¶¨Ìè¨Ìä∏', { align: "center" }); ÌååÎûÄ
            doc.text(105, 140, 'ÌÜµÍ¥ÄÎ¶¨Ìè¨Ìä∏', { align: "center" }); 
            doc.setFontSize(30);
            //doc.text(105, 135, String(data.cmpnyInfo), { align: "center" }); ÌååÎûÄ
            doc.text(105, 155, String(data.cmpnyInfo), { align: "center" }); 
            doc.setFontSize(13);
            if (data.cmpnyList && data.cmpnyList.length > 1) {
            	  const companyText = data.cmpnyList.join(', ');
            	  doc.text(105, 250, 'Î∂ÑÏÑù ÎåÄÏÉÅ ÌöåÏÇ¨ : ' + companyText, { align: "center" });
            }
            doc.text(105, 260, 'Î∂ÑÏÑù ÎåÄÏÉÅ Í∏∞Í∞Ñ : '+String(data.fomateStartDate)+" ~ "+String(data.fomateEndDate), { align: "center" }); 
            doc.text(105, 270, 'Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏùºÏûê : '+String(data.today), { align: "center" }); 
            doc.text(105, 280, 'Ïã†ÌïúÍ¥ÄÏÑ∏Î≤ïÏù∏', { align: "center" }); //ÌååÎûÄ
           
            // Î™©Ï∞®
            doc.addPage();
            
            const pageHeight13 = doc.internal.pageSize.getHeight();
            const boxMargin13 = 5; // ÏúÑÏïÑÎûò Ïó¨Î∞±

            const boxY13 = boxMargin13;
            const boxHeight13 = pageHeight13 - boxMargin13 * 2;

            
            doc.setLineWidth(1);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
            doc.setDrawColor(35, 69,56); 
            doc.rect(5, boxY13, 200, boxHeight13);  // (x, y, width, height)


           
            const pageWidth = doc.internal.pageSize.getWidth();
            let currentY = 60;

            // === Ï†úÎ™© "Contents" Ï§ëÏïô Ï†ïÎ†¨ Î∞è ÏúÑÏïÑÎûò Ïã§ÏÑ† ===
            const title = "Contents";
            doc.addFont('/pf/fonts/NanumSquareEB.ttf', 'NanumSquareEB', 'normal');
            doc.setFont('NanumSquareEB', 'normal');
            doc.setFontSize(22);
            const titleWidth = doc.getTextWidth(title);
            const centerX = pageWidth / 2;

            // ÏúÑ ÏÑ†
            doc.setLineWidth(0.7);
            doc.line(centerX - titleWidth / 2 - 15, currentY - 9, centerX + titleWidth / 2 + 15, currentY - 9);

            // ÏïÑÎûò ÏÑ†
            doc.line(centerX - titleWidth / 2 - 15, currentY + 4, centerX + titleWidth / 2 + 15, currentY + 4);

            // Ï†úÎ™© Ï∂úÎ†•
            doc.text(title, centerX, currentY, { align: 'center' });
            currentY += 25; // Îã§Ïùå Ï§ÑÎ°ú Ïù¥Îèô

            // === Î™©Ï∞® Ìï≠Î™© ÏÑ§Ï†ï ===
            doc.setFontSize(12);

            const contents = [
              { number: '1', title: 'ÏàòÏûÖÌÜµÍ¥ÄÌòÑÌô©' },
              { number: '2', title: 'ÏàòÏûÖÌÜµÍ¥Ä ÏÑ∏Ïï°ÌòÑÌô©' },
              { number: '3', title: 'ÏàòÏûÖÎ¨ºÌíà Í≥ºÏÑ∏ÌòÑÌô©' },
              { number: '4', title: 'ÏàòÏûÖÎ¨ºÌíà Ï†ÅÏö©ÏÑ∏Ïú®' },
              { number: '5', title: 'FTA ÏÇ¨ÌõÑÏ†ÅÏö©Í∏àÏï°' },
              { number: '6', title: 'Ï£ºÏöî Ìï¥Ïô∏ Í±∞ÎûòÏ≤ò(ÏàòÏûÖ)' },
              { number: '7', title: 'ÏàòÏ∂úÌÜµÍ¥ÄÌòÑÌô©' },
              { number: '8', title: 'Ï£ºÏöî Ìï¥Ïô∏ Í±∞ÎûòÏ≤ò(ÏàòÏ∂ú)' },
              { number: '9', title: 'ÏàòÏ∂úÏûÖ Ï†ïÏ†ï Í∑ÄÏ±ÖÏûêÎ≥Ñ ÎπÑÏú®' },
              { number: '10', title: 'ÏàòÏ∂úÏûÖ Ï†ïÌòïÏ°∞Í±¥' },
              { number: '11', title: 'ÏÑ∏Í¥ÄÎ≥Ñ Ïã†Í≥†Í±¥Ïàò Î∞è Í∏àÏï°' },
            ];

            // Í∞Å Ìï≠Î™© Ï∂úÎ†•
            contents.forEach(item => {
              doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
              doc.setFont('NanumSquareB', 'normal');
              doc.text(item.number, 75, currentY);

              doc.setFont('NanumSquareB', 'normal');
              doc.text(item.title, 120, currentY, { align: 'center' });

              currentY += 15;
            });
            
            
            // üü¢ ÏÉàÎ°úÏö¥ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
            doc.addPage();

            // üü¢ "ÏàòÏûÖÌÜµÍ¥ÄÌòÑÌô©" Ï†úÎ™© Ï∂îÍ∞Ä
            doc.setFontSize(16);
            doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
            doc.setFont('NanumSquareB', 'normal');
            doc.setTextColor(71, 140, 114); 
            doc.text(8, 15, "1.ÏàòÏûÖÌÜµÍ¥ÄÌòÑÌô©");
            
            // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
            const boxMargin = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
            const boxWidth = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
            const boxHeight = 23;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
            
            doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
            doc.setDrawColor(35, 69,56); 
            doc.rect(5, 8, boxWidth, boxHeight, 'D'); 
            
            
            const reportData1 = data.reportData1;  // data.reportData1Ïù¥ Ï†úÍ≥µÎêúÎã§Í≥† Í∞ÄÏ†ï

	            // Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò: Í≥ºÏÑ∏Í∞ÄÍ≤©ÏùÑ Ìè¨Îß§ÌåÖÎêú Í∞íÍ≥º ÏõêÎ≥∏ Í∞íÏúºÎ°ú Íµ¨Î∂ÑÌïòÏó¨ Ï†ÄÏû•
	            const datas = reportData1.map(item => {
	              const amountKrw = parseFloat(item.amountKrw) || 0;  // ÏõêÎ≥∏ Í∞í
	              const formattedAmountKrw = Intl.NumberFormat("ko-KR").format(amountKrw);  // Ìè¨Îß§ÌåÖÎêú Í∞í
	              
	              return [
	                item.lisDay,        // ÏàòÎ¶¨ÏùºÏûê
	                item.cnt,           // Í±¥Ïàò
	                formattedAmountKrw, // Í≥ºÏÑ∏Í∞ÄÍ≤© (Ìè¨Îß§ÌåÖÎêú Í∞í)
	                item.txType1,       // ÏùºÎ∞òÏàòÏûÖ
	                item.txType2,       // ÏàòÎ¶¨Î¨ºÌíà
	                item.txType3,       // Í≤¨Ìíà Î∞è Í¥ëÍ≥†Ïö©Ìíà
	                item.txType4,       // Í∏∞ÌÉÄ ÏàòÏûÖ ÏäπÏù∏Î©¥ÏÑ∏
	                item.txType5,       // Ïû¨ÏàòÏ∂úÏ°∞Í±¥
	                item.txPrc1,        // P/L
	                item.txPrc2,        // Ï†úÏ∂úÏÑúÎ•ò
	                item.txPrc3,        // Í≤ÄÏÇ¨
	              ];
	            });
		        // üü¢ Ïó¥Î≥Ñ Ìï©Í≥Ñ Í≥ÑÏÇ∞
	            const defaultColumnCount = 10;
	            const defaultRow = Array(defaultColumnCount).fill("");

	            // datasÍ∞Ä Ïú†Ìö®Ìïú Î∞∞Ïó¥Ïù¥Í≥†, ÏµúÏÜåÌïú ÌïòÎÇò Ïù¥ÏÉÅÏùò ÌñâÏù¥ ÏûàÎã§Î©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
	            // ÏïÑÎãàÎ©¥ defaultRowÎ•º ÎÑ£Ïñ¥ÏÑú ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
	            const safeDatas = (Array.isArray(datas) && datas.length > 0)
	              ? datas
	              : [defaultRow];

	            // Ïã§Ï†úÎ°ú ÏÇ¨Ïö©Ìï† columnCountÎäî safeDatasÏóêÏÑú Í∞ÄÏ†∏Ïò§Î©¥ Îê®
	            const columnCount = safeDatas[0].length;
		         const totals = Array(columnCount).fill(0);  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥

		         // Ìï©Í≥Ñ Í≥ÑÏÇ∞ (Ï≤´ Î≤àÏß∏ Ïó¥ÏùÄ "Ìï©Í≥Ñ" Î¨∏ÏûêÏó¥ÏùÑ ÎÑ£Í≥†, ÎÇòÎ®∏ÏßÄÎäî Ïà´Ïûê Ìï©ÏÇ∞)
		         totals[0] = "Ìï©Í≥Ñ"; 
		         for (let i = 1; i < columnCount; i++) {
		        	  // Í≥ºÏÑ∏Í∞ÄÍ≤©(3Î≤àÏß∏ Ïó¥)ÏùÑ Ï†úÏô∏Ìïú Í∞íÎì§Îßå Ìï©ÏÇ∞
		        	  if (i === 2) {
		        	    totals[i] = datas.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0); // ÏõêÎ≥∏ Í∞íÏúºÎ°ú Ìï©Í≥Ñ Í≥ÑÏÇ∞
		        	  } else {
		        	    totals[i] = datas.reduce((sum, row) => sum + (parseFloat(row[i]) || 0), 0);
		        	  }
		        	}

		         // üü¢ ÎπÑÏú® Í≥ÑÏÇ∞ (Í∞Å Í∑∏Î£πÏùÑ 100%Î°ú ÏÑ§Ï†ï)
		         const percentages = Array(columnCount).fill("-");
		         percentages[0] = "ÎπÑÏú®(%)"; // Ï≤´ Î≤àÏß∏ Ïó¥ÏùÄ "ÎπÑÏú®(%)"

		         // üü¢ ÏàòÏûÖ Í±∞ÎûòÌòïÌÉú ÎπÑÏú® Í≥ÑÏÇ∞
		         const tradeTotal = totals.slice(3, 8).reduce((sum, value) => sum + value, 0); // 3~7Î≤àÏß∏ Ïó¥ Ìï©Í≥Ñ
		         for (let i = 3; i < 8; i++) {
		             percentages[i] = tradeTotal > 0 ? ((totals[i] / tradeTotal) * 100).toFixed(1) + "%" : "-";
		         }

		         // üü¢ ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô© ÎπÑÏú® Í≥ÑÏÇ∞
		         const processTotal = totals.slice(8, 11).reduce((sum, value) => sum + value, 0); // 8~10Î≤àÏß∏ Ïó¥ Ìï©Í≥Ñ
		         for (let i = 8; i < 11; i++) {
		             percentages[i] = processTotal > 0 ? ((totals[i] / processTotal) * 100).toFixed(1) + "%" : "-";
		         }

		         
		     	 // üü¢ Ïà´Ïûê Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ (Ï≤ú Îã®ÏúÑ ÏΩ§Îßà Ï∂îÍ∞Ä)
		         const formattedTotals = totals.map((value, index) =>
		         typeof value === "number" ? Intl.NumberFormat("ko-KR").format(value) : value
		      	);
		         
		     	// üü¢ Í±¥Ïàò, P/L, Ï†úÏ∂úÏÑúÎ•ò, Í≤ÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞
		         const countTotal = formattedTotals[1]; // ÌÜµÍ¥ÄÍ±¥Ïàò
		         const plTotal = formattedTotals[8]; // P/L Ìï©Í≥Ñ
		         const plPercentage = percentages[8]; // P/L ÎπÑÏú®
		         const submissionTotal = formattedTotals[9]; // Ï†úÏ∂úÏÑúÎ•ò Ìï©Í≥Ñ
		         const submissionPercentage = percentages[9]; // Ï†úÏ∂úÏÑúÎ•ò ÎπÑÏú®
		         const inspectionTotal = formattedTotals[10]; // Í≤ÄÏÇ¨ Ìï©Í≥Ñ
		         const inspectionPercentage = percentages[10]; // Í≤ÄÏÇ¨ ÎπÑÏú®
		            
		            
		            // üü¢ ÏÑ§Î™Ö Ï∂îÍ∞Ä (ÏôºÏ™Ω Ï†ïÎ†¨ + Ï§Ñ ÎÇòÎàÑÍ∏∞)
		            doc.setFontSize(9);
		            doc.addFont('/pf/fonts/NanumSquareR.ttf', 'NanumSquareR', 'normal');
		            doc.setFont('NanumSquareR', 'normal');
		            doc.setTextColor(0, 0, 0);
		            const description = [
		            	`Îã§Ïùå ÏûêÎ£åÎäî ${data.rptDate2}Ïõî ÌïúÎã¨ ÏàòÏûÖÌÜµÍ¥Ä ÏûêÎ£åÏù¥Î©∞ Ï¥ù ${countTotal}Í±¥ ÏàòÏûÖÏã†Í≥†Î•º ÏßÑÌñâÌïòÏòÄÏäµÎãàÎã§.`,
		                `ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô©ÏùÄ P/L ${plTotal}Í±¥ (${plPercentage}), Ï†úÏ∂ú ${submissionTotal}Í±¥ (${submissionPercentage}), Í≤ÄÏÇ¨ ${inspectionTotal}Í±¥ (${inspectionPercentage}) ÏûÖÎãàÎã§.`
		            ];
		          
		            let startY = 23; // description ÎÜíÏù¥ ÏúÑÏπò
		            description.forEach((line, index) => {
		            	  doc.text(8, startY, line); // ÏôºÏ™Ω Ï†ïÎ†¨ (x: 8, y: startY)
		            	  startY += 5; // Í∞Å Ï§Ñ Í∞ÑÍ≤©ÏùÑ 5Î°ú ÏÑ§Ï†ïÌïòÏó¨ Îã§Ïùå Ï§ÑÎ°ú ÎÇ¥Î†§Í∞ê
		        	});
		         
		      // üü¢ datasÏóê Ìï©Í≥ÑÏôÄ ÎπÑÏú® Ìñâ Ï∂îÍ∞Ä
		         datas.push(formattedTotals);
		         datas.push(percentages);
		         
            	// ÌÖåÏù¥Î∏î Ìó§Îçî
		       const header = [
		    	   	[ 
		    		    { content: 'ÏàòÎ¶¨ÏùºÏûê', rowSpan: 2, border: [true, true, true, true] },  // ÏàòÎ¶¨ÏùºÏûê ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
		    		    { content: 'Í±¥Ïàò', rowSpan: 2, border: [true, true, true, true] },
		    		    { content: 'Í≥ºÏÑ∏Í∞ÄÍ≤©(KRW)', rowSpan: 2, border: [true, true, true, true] },
		    		    { content: 'ÏàòÏûÖ Í±∞ÎûòÌòïÌÉú ÌòÑÌô©', colSpan: 5, border: [true, true, true, true] },  // ÏàòÏûÖ Í±∞ÎûòÌòïÌÉú ÌòÑÌô© ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
		    		    { content: 'ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô©', colSpan: 3, border: [true, true, true, true] },  // ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô© ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
		    		  ],  // Ï≤´ Î≤àÏß∏ Ìñâ
		    		  [
		    		    { content: 'ÏùºÎ∞òÏàòÏûÖ', border: [true, true, true, true] },
		    		    { content: 'ÏàòÎ¶¨Î¨ºÌíà', border: [true, true, true, true] },
		    		    { content: 'Í≤¨Ìíà Î∞è Í¥ëÍ≥†Ïö©Ìíà', border: [true, true, true, true] },
		    		    { content: 'Í∏∞ÌÉÄ ÏàòÏûÖ ÏäπÏù∏Î©¥ÏÑ∏', border: [true, true, true, true] },
		    		    { content: 'Ïû¨ÏàòÏ∂úÏ°∞Í±¥', border: [true, true, true, true] },
		    		    { content: 'P/L', border: [true, true, true, true] },
		    		    { content: 'Ï†úÏ∂úÏÑúÎ•ò', border: [true, true, true, true] },
		    		    { content: 'Í≤ÄÏÇ¨', border: [true, true, true, true] },
		    		  ]
		    	 ];
		       
		       
            	// üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header,
            	  body:datas,
            	  startY: startY + 2, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    halign: 'center',
            	    overflow: 'linebreak', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøà Ï†ÅÏö©
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center' , cellWidth: 23 }, // ÏàòÎ¶¨ÏùºÏûê
            	        1: { halign: 'right' , cellWidth: 18}, // Í±¥Ïàò
            	        2: { halign: 'right' , cellWidth: 23}, // Í≥ºÏÑ∏Í∞ÄÍ≤©
            	        3: { halign: 'center' , cellWidth: 17}, // ÏùºÎ∞òÏàòÏûÖ
            	        4: { halign: 'center' , cellWidth: 17}, // ÏàòÎ¶¨Î¨ºÌíà
            	        5: { halign: 'center' , cellWidth: 17}, // Í≤¨Ìíà Î∞è Í¥ëÍ≥†Ïö©Ìíà
            	        6: { halign: 'center' , cellWidth: 17}, // Í∏∞ÌÉÄ ÏàòÏûÖ ÏäπÏù∏Î©¥ÏÑ∏
            	        7: { halign: 'center' , cellWidth: 17}, // Ïû¨ÏàòÏ∂úÏ°∞Í±¥
            	        8: { halign: 'center' , cellWidth: 17 }, // P/L
            	        9: { halign: 'center' , cellWidth: 17}, // Ï†úÏ∂úÏÑúÎ•ò
            	        10: { halign: 'center' , cellWidth: 17}, // Í≤ÄÏÇ¨
            	  },
            	  didParseCell: function(data) {
            		    // üü¢ Ìï©Í≥Ñ Ìñâ Ïä§ÌÉÄÏùº Ï†ÅÏö© (ÎßàÏßÄÎßâÏóêÏÑú Îëê Î≤àÏß∏ Ìñâ)
            		    if (data.row.index === datas.length - 2) {
            		      data.cell.styles.fillColor = [246, 243, 202]; // Î∞∞Í≤Ω
          	              data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
          	              data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
            		    }
            		    // üü¢ ÎπÑÏú® Ìñâ Ïä§ÌÉÄÏùº Ï†ÅÏö© (ÎßàÏßÄÎßâ Ìñâ)
            		    if (data.row.index === datas.length - 1) {
            		    	data.cell.styles.fillColor = [246, 243, 202]; // Î∞∞Í≤Ω
            	            data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
            	            data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
            		    }
            		  }
        		});
            	
            	// 1Î≤àÏß∏ ÌÖåÏù¥Î∏î yÏ¢åÌëú Ï†ÄÏû• 
            	let lastY1 = doc.lastAutoTable.finalY;
            	let page1 = doc.internal.getCurrentPageInfo().pageNumber;
            	let spaceLeft1 = doc.internal.pageSize.height - lastY1 - 10;
            	let chartPage1, chartY1;
            	
            	if (spaceLeft1 < 70) {
            		  doc.addPage(); // Í∑∏ÎÉ• Îí§Ïóê Ï∂îÍ∞Ä
            		  chartPage1 = page1 + 1;
            		  chartY1 = 15;
            		} else {
            		  chartPage1 = page1;
            		  chartY1 = lastY1 + 10;
            		}
            	
            	//ÌîåÎü¨Í∑∏Ïù∏ Îì±Î°ù
            	Chart.register(ChartDataLabels);
            	
            	
            	// Í±∞ÎûòÌòïÌÉú 
            	// Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò (NaN Î∞©ÏßÄ)
            	const safeParse = (value) => {
            	    let num = parseFloat(value ? value.replace('%', '') : 0);
            	    return isNaN(num) ? 0 : num;
            	};

            	// ÏôºÏ™Ω Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
            	const leftChartData = percentages.slice(3, 8).map(safeParse);
            	
            	// ÏôºÏ™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§ ÏÉùÏÑ±
            	canvas = document.createElement('canvas');
            	const ctx = canvas.getContext('2d');
            	canvas.width = 500;
            	canvas.height = 500;

            	
            	var chartDataLabels2 = {
            		    id: 'chartDataLabels',
            		    afterDraw(chart, args, options) {
            		        const ctx2 = chart.ctx; // Ïò¨Î∞îÎ•∏ Ïª®ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©
            		        ctx2.textAlign = "center";
            		        ctx2.textBaseline = "middle";
            		        ctx2.fillStyle = '#000';
            		        ctx2.font = "21px NanumSquareB";
            		        ctx2.lineWidth = 2; // ÏÑ† ÍµµÍ∏∞

            		        let prevTextPositions2 = [];  // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ï∂îÏ†ÅÌï† Î∞∞Ïó¥

            		        chart.data.datasets.forEach((dataset, i) => {
            		        	  chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
            		                  const value = dataset.data[index]; // Îç∞Ïù¥ÌÑ∞ Í∞í
            		                  const label = chart.data.labels[index]; // Ìï¥Îãπ Îç∞Ïù¥ÌÑ∞Ïùò ÎùºÎ≤®
            		                  const formattedText = `${label} : ${value}%`; // ÏõêÌïòÎäî ÌòïÏãùÏúºÎ°ú ÎùºÎ≤® ÎßåÎì§Í∏∞

            		                  if (value <= 1) return; // 1% Ïù¥Ìïò Í∞íÏùÄ ÌëúÏãú Ïïà Ìï®

            		                const { x, y } = datapoint.tooltipPosition(); // Îç∞Ïù¥ÌÑ∞ Ï¢åÌëú Í∞ÄÏ†∏Ïò§Í∏∞
            		                const radius2 = chart.outerRadius || (chart.chartArea.width / 2); // ÏõêÏùò Î∞òÏßÄÎ¶Ñ
            		                const angle2 = datapoint.startAngle !== undefined && datapoint.endAngle !== undefined
            		                    ? (datapoint.startAngle + datapoint.endAngle) / 2
            		                    : (index / dataset.data.length) * Math.PI * 2; // Í∞ÅÎèÑ Í≥ÑÏÇ∞

            		                // Ïõê Î∞îÍπ•ÏúºÎ°ú ÏãúÏûëÌïòÎäî Ï¢åÌëú (Ï°∞Ï†ï)
            		                const xOuter2 = x + (radius2 * 0) * Math.cos(angle2);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú
            		                const yOuter2 = y + (radius2 * 0) * Math.sin(angle2);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú

            		                // Í∫æÏù∏ ÏßÄÏ†ê Ïù¥ÌõÑ, ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å ÏÑ§Ï†ï
            		                const xMiddle2 = xOuter2 + (Math.cos(angle2) * 10);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å
            		                const yMiddle2 = yOuter2 + (Math.sin(angle2) * 10);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å

            		                // ÏµúÏ¢Ö ÎùºÎ≤® ÏúÑÏπò (Í∏∏Ïù¥Î•º Îçî Î©ÄÎ¶¨ ÏÑ§Ï†ï)
            		                let xLine2 = xMiddle2 + (Math.cos(angle2) > 0 ? 10 : -10); // ÌÖçÏä§Ìä∏ ÏµúÏ¢Ö ÏúÑÏπòÎèÑ Îçî Î©ÄÎ¶¨
            		                let yLine2 = yMiddle2;

            		                // ÌÖçÏä§Ìä∏ Í∞ÑÏùò ÏµúÏÜå Í±∞Î¶¨ (ÏõêÌïòÎäî Í∞íÏúºÎ°ú Ï°∞Ï†ï)
            		                const minDistance2 = 30;  // ÏµúÏÜå Í∞ÑÍ≤© ÏÑ§Ï†ï

            		                // ÌÖçÏä§Ìä∏Í∞Ä Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù Í∞ÑÍ≤© Ï°∞Ï†ï
            		                prevTextPositions2.forEach((prevPos) => {
            		                    let attempts = 0;
            		                    while (Math.abs(yLine2 - prevPos.y) < minDistance2 && attempts < 5) { 
            		                        yLine2 += (Math.sin(angle2) > 0 ? 10 : -10); // ÏúÑÏïÑÎûòÎ°ú Ï°∞Ï†ï
            		                        attempts++;
            		                    }
            		                });
            		                // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ïù¥Ï†Ñ ÏúÑÏπò Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
            		                prevTextPositions2.push({ x: xLine2, y: yLine2 });

            		                // Ï∫îÎ≤ÑÏä§Ïóê Í∫æÏùÄÏÑ† Í∑∏Î¶¨Í∏∞
            		                ctx2.beginPath();
            		                ctx2.moveTo(xOuter2, yOuter2); // Ïõê ÌÖåÎëêÎ¶¨ÏóêÏÑú ÏãúÏûë
            		                ctx2.lineTo(xMiddle2, yMiddle2); // Í∫æÏù∏ ÏßÄÏ†ê
            		                ctx2.lineTo(xLine2, yLine2); // ÏµúÏ¢Ö ÏúÑÏπò
            		                ctx2.strokeStyle = 'rgba(129,212,250,0.9)';
            		                ctx2.stroke();

            		                // ÌÖçÏä§Ìä∏ Ï†ïÎ†¨
            		                ctx2.textAlign = Math.cos(angle2) > 0 ? "left" : "right";

            		                // ÌÖçÏä§Ìä∏ ÌëúÏãú
            		                ctx2.fillText(formattedText, xLine2, yLine2);
            		            });
            		        });
            		    }
            		};
            	
            	
            	// ÏôºÏ™Ω Ï∞®Ìä∏ ÏÉùÏÑ±
            	const chart = new Chart(ctx, {
            		plugins : [chartDataLabels2],
            		type: 'pie',
            	    data: {
            	        labels: ['ÏùºÎ∞òÏàòÏûÖ', 'ÏàòÎ¶¨Î¨ºÌíà', 'Í≤¨Ìíà,Í¥ëÍ≥†Ïö©Ìíà', 'Í∏∞ÌÉÄÏàòÏûÖ', 'Ïû¨ÏàòÏ∂ú'],
            	        datasets: [{
            	            data: leftChartData,
            	            backgroundColor: [  'rgb(113,162, 218)',
				            	            	'rgb(48,123,202)', 
				            	            	'rgb(166,196,232)',
				            	            	'rgb(216,225,234)',
				            	            	'rgb(40,101,168)']
	            	        }]
			            	/* backgroundColor: [  
			            		'rgb(71,140,114)',
			            		'rgb(49,97,79)', 
			 	            	'rgb(84,166, 135)', 
			 	            	'rgb(186,221,139)',
			 	            	'rgb(231,244,218)']
            	    		}]*///Í∑∏Î¶∞
		            	
            	    },
            	    options: {
            	        responsive: false,
            	        maintainAspectRatio: false,  // ÎπÑÏú® Ïú†ÏßÄ Ìï¥Ï†ú
            	        layout: {
            	            padding: {
            	                bottom: 20, // Ï∞®Ìä∏ ÌïòÎã® Ïó¨Î∞± (ÎùºÎ≤® Í≥µÍ∞Ñ ÌôïÎ≥¥)
            	                right : 70,
            	                left : 70
            	            }
            	        },
            	        plugins: {
            	        	datalabels: { 
            	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
            	            },
            	            legend: {
            	                position: 'bottom',
            	                fullWidth: true,
            	                labels: {
            	                    font: {
            	                        size: 18  // ÎùºÎ≤® ÌÅ¨Í∏∞ ÎèôÏùº
            	                        ,weight: 'bold'
            	                    },
            	                    boxWidth: 15,  // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ ÎèôÏùº
            	                    padding: 15
            	                }
            	            },
            	            title: {
            	                display: true,
            	                text: 'Í±∞ÎûòÌòïÌÉú',
            	                font: {
            	                    size: 28,  // Ï†úÎ™© ÌÅ¨Í∏∞ ÎèôÏùº
            	                    weight: 'bold'},
            	                padding: {
            	                    bottom: 20
            	                }
            	            }
            	        }
            	    }
            	});
            	
            	
            	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ (ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô© ÎπÑÏú®)
            	const rightChartData = [
            	    parseFloat(percentages[8].replace('%', '')) || 0, 
            	    parseFloat(percentages[9].replace('%', '')) || 0, 
            	    parseFloat(percentages[10].replace('%', '')) || 0 
            	];
            	
            	
            	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§ ÏÉùÏÑ±
            	rightCanvas = document.createElement('canvas');
            	const rightCtx = rightCanvas.getContext('2d');
            	rightCanvas.width = 500;
            	rightCanvas.height = 500;

            	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ ÏÉùÏÑ±
            	const rightChart = new Chart(rightCtx, {
            		plugins : [chartDataLabels2],
            		type: 'pie',
            	    data: {
            	        labels: ['P/L', 'Ï†úÏ∂úÏÑúÎ•ò', 'Í≤ÄÏÇ¨'],
            	        datasets: [{
            	            data: rightChartData,
            	            backgroundColor: [  'rgb(48,123,202)', 				            	             
				            	            	'rgb(113,162, 218)', 
				            	            	'rgb(166,196,232)']
            	        }]
            	            /*backgroundColor: [  
            	            	'rgb(49,97,79)', 
			 	            	'rgb(84,166, 135)', 
			 	            	'rgb(186,221,139)']
        	        		}]*/ //Í∑∏Î¶∞
            	    },
            	    options: {
            	        responsive: false,
            	        maintainAspectRatio: false,  
            	        layout: {
            	            padding: {
            	                bottom: 70, // ÏïÑÎûòÏ™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
            	                left: 90,  // ÏôºÏ™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
            	                right: 90  // Ïò§Î•∏Ï™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
            	            }
            	        },
            	        plugins: {
            	        	datalabels: {
             	                color: 'rgb(89,89,89)',
             	                formatter: function(value, context) {
             	                	let label = context.chart.data.labels[context.dataIndex];
             	                   if (value < 10) {  // Í∞íÏù¥ 10% ÎØ∏ÎßåÏù∏ Í≤ΩÏö∞ ÎùºÎ≤®ÏùÑ ÌëúÏãúÌïòÏßÄ ÏïäÏùå
             	                       return null;  
             	                   }
             	                    return label + " : " +value + "%"; // ÎùºÎ≤®Í≥º ÌçºÏÑºÌä∏ ÌëúÏãú
             	                },
             	                font: {
             	                    size: 20,
             	                    weight : 'bold'
             	                },
            	        	}, 
            	        	datalabels: { 
           	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
            	        	},
            	        	legend: {
            	                position: 'bottom',
            	                fullWidth: true,
            	                labels: {
            	                    font: {
            	                        size: 18  // ÎùºÎ≤® ÌÅ¨Í∏∞ ÎèôÏùº
            	                        ,weight: 'bold'
            	                    },
            	                    boxWidth: 15,  // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ ÎèôÏùº
            	                    padding: 15
            	                }
            	            },
            	            title: {
            	                display: true,
            	                text: 'Ïã†Í≥†Ï≤òÎ¶¨',
            	                font: {
            	                    size: 28,  // Ï†úÎ™© ÌÅ¨Í∏∞ ÎèôÏùº
            	                    weight: 'bold'
            	                },
            	                padding: {
            	                    bottom: 10
            	                }
            	            }
            	        }
            	    }
            	});
            	
            	// üü¢ ÏÉàÎ°úÏö¥ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                // üü¢ "ÏàòÏûÖÌÜµÍ¥Ä ÏÑ∏Ïï°ÌòÑÌô©" Ï†úÎ™© Ï∂îÍ∞Ä
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "2.ÏàòÏûÖÌÜµÍ¥Ä ÏÑ∏Ïï°ÌòÑÌô©");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin2 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth2 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight2 = 18;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth2, boxHeight2, 'D'); 
	            
                const reportData2 = data.reportData2;
                console.log("reportData2",reportData2);
                const datas2 = reportData2.map(item => {
  	              const formattedCntImp = Intl.NumberFormat("ko-KR").format(item.cntImp);
  	              const formattedTotGs = Intl.NumberFormat("ko-KR").format(item.totGs);
  	              const formattedTotVat= Intl.NumberFormat("ko-KR").format(item.totVat);
  	              const formattedTotTs = Intl.NumberFormat("ko-KR").format(item.totTs);  
  	              const formattedTotGt = Intl.NumberFormat("ko-KR").format(item.totGt); 
  	              const formattedTotHof = Intl.NumberFormat("ko-KR").format(item.totHof); 
  	              const formattedTotKy = Intl.NumberFormat("ko-KR").format(item.totKy); 
  	              const formattedTotNt = Intl.NumberFormat("ko-KR").format(item.totNt); 
  	              const formattedTotDlyTax = Intl.NumberFormat("ko-KR").format(item.totDlyTax); 
  	              const formattedTotAddTax = Intl.NumberFormat("ko-KR").format(item.totAddTax); 
  	              const formattedTotTaxSum = Intl.NumberFormat("ko-KR").format(item.totTaxSum); 
  	              
  	              return [
  	                item.lisDay,        		// ÏàòÎ¶¨ÏùºÏûê
  	                formattedCntImp,			// Í±¥Ïàò
  	                formattedTotGs, 			//Í¥ÄÏÑ∏
  	                formattedTotVat,      	 	// Î∂ÄÍ∞ÄÏÑ∏
  	                formattedTotTs,       		// Í∞úÏÜåÏÑ∏
  	               /* formattedTotGt,       		// ÍµêÌÜµÏÑ∏
  	                formattedTotHof,       	// Ï£ºÏÑ∏*/
  	                formattedTotKy,       		// Íµê„Ñ¥Ïú°ÏÑ∏
  	                formattedTotNt,        	// ÎÜçÌäπÏÑ∏
  	                formattedTotDlyTax,        	// Ïã†Í≥†ÏßÄÏó∞Í∞ÄÏÇ∞ÏÑ∏
  	                formattedTotAddTax,        // ÎØ∏Ïã†Í≥†Í∞ÄÏÇ∞ÏÑ∏
  	                formattedTotTaxSum,        // Ï¥ùÏÑ∏Ïï°
  	              ];
  	            });
                
                const defaultColumnCount2 = 9;
	            const defaultRow2 = Array(defaultColumnCount2).fill("");

	            // datasÍ∞Ä Ïú†Ìö®Ìïú Î∞∞Ïó¥Ïù¥Í≥†, ÏµúÏÜåÌïú ÌïòÎÇò Ïù¥ÏÉÅÏùò ÌñâÏù¥ ÏûàÎã§Î©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
	            // ÏïÑÎãàÎ©¥ defaultRowÎ•º ÎÑ£Ïñ¥ÏÑú ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
	            const safeDatas2 = (Array.isArray(datas2) && datas2.length > 0)
	              ? datas2
	              : [defaultRow2];

                // üü¢ Ïó¥Î≥Ñ Ìï©Í≥Ñ Í≥ÑÏÇ∞
                 const columnCount2 = safeDatas2[0].length;  // Ïó¥ Í∞úÏàò
		         const totals2 = Array(columnCount2).fill(0);  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥

		         // Ìï©Í≥Ñ Í≥ÑÏÇ∞ (Ï≤´ Î≤àÏß∏ Ïó¥ÏùÄ "Ìï©Í≥Ñ" Î¨∏ÏûêÏó¥ÏùÑ ÎÑ£Í≥†, ÎÇòÎ®∏ÏßÄÎäî Ïà´Ïûê Ìï©ÏÇ∞)
		         totals2[0] = "Ìï©Í≥Ñ"; 
		         for (let i = 1; i < columnCount2; i++) {
		        	    // ÏâºÌëú(,)Î•º Ï†úÍ±∞Ìïú ÌõÑ Ïà´ÏûêÎ°ú Î≥ÄÌôòÌïòÏó¨ Ìï©ÏÇ∞
		        	    totals2[i] = datas2.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0);

		        	    // Ìï©Í≥ÑÎ•º Îã§Ïãú ÌïúÍµ≠Ïñ¥ Ïà´Ïûê Ìè¨Îß∑(ko-KR)ÏúºÎ°ú Î≥ÄÌôò
		        	    totals2[i] = Intl.NumberFormat("ko-KR").format(totals2[i]);
		         }
		         
		         
		         // Í¥ÄÏÑ∏ Î∂ÄÍ∞ÄÏÑ∏ ÏÑ∏Ïï°Ìï©Í≥Ñ 
		         var gsTot = totals2[2]; //Í¥ÄÏÑ∏
		         var vatTot = totals2[3]; //Î∂ÄÍ≥ºÏÑ∏
		         var taxSumTot = totals2[9]; //Ï¥ùÏÑ∏Ïï°
		         
  		        
                // üü¢ ÏÑ§Î™Ö Ï∂îÍ∞Ä (ÏôºÏ™Ω Ï†ïÎ†¨ + Ï§Ñ ÎÇòÎàÑÍ∏∞)
	            doc.setFontSize(9);
	            doc.addFont('/pf/fonts/NanumSquareR.ttf', 'NanumSquareR', 'normal');
	            doc.setFont('NanumSquareR', 'normal');
	            doc.setTextColor(0, 0, 0);
	            const description2 = [
	            	` ${data.rptDate2}Ïõî ÌÜµÍ¥Ä Í¥ÄÏÑ∏Îäî${gsTot}Ïõê, Î∂ÄÍ∞ÄÏÑ∏Îäî ${vatTot}Ïõê Ïù¥Î©∞ Ï¥ùÏÑ∏Ïï°Ìï©Í≥ÑÎäî${taxSumTot}ÏõêÏûÖÎãàÎã§.`
	            ];
	          
	             startY = 23; // description ÎÜíÏù¥ ÏúÑÏπò
	            description2.forEach((line, index) => {
	            	  doc.text(8, startY, line); // ÏôºÏ™Ω Ï†ïÎ†¨ (x: 8, y: startY)
	            	  startY += 5; // Í∞Å Ï§Ñ Í∞ÑÍ≤©ÏùÑ 5Î°ú ÏÑ§Ï†ïÌïòÏó¨ Îã§Ïùå Ï§ÑÎ°ú ÎÇ¥Î†§Í∞ê
	        	});
	        	// ÌÖåÏù¥Î∏î Ìó§Îçî
			      var header2 = [[
			    	    'ÏàòÎ¶¨ÏùºÏûê', 'Í±¥Ïàò', 'Í¥ÄÏÑ∏','Î∂ÄÍ∞ÄÏÑ∏' ,'Í∞úÏÜåÏÑ∏', /*'ÍµêÌÜµÏÑ∏', 'Ï£ºÏÑ∏', */
			    	    'ÍµêÏú°ÏÑ∏', 'ÎÜçÌäπÏÑ∏', 'Ïã†Í≥†ÏßÄÏó∞Í∞ÄÏÇ∞ÏÑ∏', 'ÎØ∏Ïã†Í≥†Í∞ÄÏÇ∞ÏÑ∏', 'Ï¥ùÏÑ∏Ïï°'
			    	]];
			        
			   datas2.push(totals2);
			        
			     
			   doc.setPage(chartPage1 === page1 ? page1 + 1 : chartPage1 + 1);
			   // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
	            	doc.autoTable({
	            	  head: header2,
	            	  body:datas2,
	            	  startY: startY + 2, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
	            	  theme: 'grid',
	            	  styles: {
	            	    font: 'NanumSquareR',
	            	    fontSize: 7,
	            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
	            	    textColor: [0, 0, 0],
	            	    valign: 'middle',
	            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
	                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
	            	  },
	            	  headStyles: {
	            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
	            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
	            	    fontSize: 8,
	            	    textColor: [255, 255, 255],
	            	    font: 'NanumSquareEB',
	            	    fontStyle: 'bold',
	            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
	            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
	            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
	            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
	                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
	                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
	            	  },
	            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
	            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
	            	  columnStyles: {
	            		  	0: { halign: 'center'}, // ÏàòÎ¶¨ÏùºÏûê
	            	        1: { halign: 'center'}, // Í±¥Ïàò
	            	        2: { halign: 'right'}, // Í¥ÄÏÑ∏
	            	        3: { halign: 'right'}, // Î∂ÄÍ∞ÄÏÑ∏
	            	        4: { halign: 'right'}, // ÌäπÏÜåÏÑ∏
	            	        5: { halign: 'right'}, // ÍµêÌÜµÏÑ∏
	            	        6: { halign: 'right'}, // Ï£ºÏÑ∏
	            	        7: { halign: 'right'}, // ÍµêÏú°ÏÑ∏
	            	        8: { halign: 'right'}, // ÎÜçÌäπÏÑ∏
	            	        9: { halign: 'right'}, // Ïã†Í≥†ÏßÄÏó∞Í∞ÄÏÇ∞ÏÑ∏
	            	        10: { halign: 'right'}, // ÎØ∏Ïã†Í≥†Í∞ÄÏÇ∞ÏÑ∏
	            	        11: { halign: 'right'}, // Ï¥ùÏÑ∏Ïï°
	            	  },
	            	  didParseCell: function (data) {
	            	        // üü° ÎßàÏßÄÎßâ Ìñâ (Ìï©Í≥Ñ Ìñâ)Îßå Î∞∞Í≤ΩÏÉâ Î≥ÄÍ≤Ω
	            	        if (data.row.index === datas2.length - 1) {
	            	            data.cell.styles.fillColor = [246, 243, 202]; // Ïó∞Ìïú ÌöåÏÉâ Î∞∞Í≤Ω
	            	            data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
	            	            data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
	            	        }
	            	    }
	        		});
	            	
	            	let lastY2 = doc.lastAutoTable.finalY;
	            	let page2 = doc.internal.getCurrentPageInfo().pageNumber;
	            	let spaceLeft2 = doc.internal.pageSize.height - lastY2 - 10;
	            	let chartPage2, chartY2;

	            	if (spaceLeft2 < 85) {
	            	  doc.addPage();
	            	  chartPage2 = page2 + 1;
	            	  chartY2 = 15;
	            	} else {
	            	  chartPage2 = page2;
	            	  chartY2 = lastY2 + 10;
	            	}
	            	
	            	
	            	const reportData3 = data.reportData3;
	                console.log("reportData3",reportData3);
	                
	                // Ï≤´ Î≤àÏß∏ÏôÄ ÎßàÏßÄÎßâ `lisDay`ÏóêÏÑú ÎÖÑÎèÑÎßå Ï∂îÏ∂ú
	                const firstYear = reportData3[0].lisDay.substring(0, 4);  // Ï≤´ Î≤àÏß∏ ÏöîÏÜåÏóêÏÑú '202401' -> '2024'
	                const lastYear = reportData3[reportData3.length - 1].lisDay.substring(0, 4);  // ÎßàÏßÄÎßâ ÏöîÏÜåÏóêÏÑú '202503' -> '2025'
	                
	                const firstYearData = [];
	                const lastYearData = [];

	                reportData3.forEach(item => {
	                  const year = item.lisDay.substring(0, 4);  // '202401' -> '2024', '202502' -> '2025'
	                  if (year === firstYear) {
	                    // Ï†ÑÎÖÑÎèÑ
	                    firstYearData.push(item.cntImp);  // cntImp Í∞íÏùÑ ÎÑ£Ïùå
	                  } else if (year === lastYear) {
	                	// Ïò¨Ìï¥
	                    lastYearData.push(item.cntImp);  // cntImp Í∞íÏùÑ ÎÑ£Ïùå
	                  }
	                });
	                
	                // Ï≤´ Î≤àÏß∏ÏôÄ Îëê Î≤àÏß∏ Î∞∞Ïó¥ÏóêÏÑú Í∞ÄÏû• ÌÅ∞ Í∞í Ï∂îÏ∂ú
	                const maxFirstYearData = Math.max(...firstYearData);
	                const maxLastYearData = Math.max(...lastYearData);

	                // Îëê Î∞∞Ïó¥ÏóêÏÑú Í∞ÄÏû• ÌÅ∞ Í∞í Ï§ë Îçî ÌÅ∞ Í∞íÏùÑ ÏÑ†ÌÉù
	                const maxValue = Math.max(maxFirstYearData, maxLastYearData) + 30;  // Í∞ÄÏû• ÌÅ∞ Í∞íÏóê 30ÏùÑ ÎçîÌï®

	                
	                // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ (Ï†ÑÎÖÑÎèÑÏôÄ Ïò¨Ìï¥ Îç∞Ïù¥ÌÑ∞)
	            	const barChartData = {
	            	    labels: ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'],
	            	    datasets: [
	            	        {
	            	            label: `${firstYear}ÎÖÑ`, // Ï†ÑÎÖÑÎèÑ
	            	            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Ïó∞ÎèÑÎ≥Ñ ÏÉâÏÉÅ
	            	            borderColor: 'rgba(75, 192, 192, 1)',
	            	            borderWidth: 1,
	            	            data: firstYearData // Ï†ÑÎÖÑÎèÑ Îç∞Ïù¥ÌÑ∞
	            	        },
	            	        {
	            	            label: `${lastYear}ÎÖÑ`, // Ïò¨Ìï¥
	            	            backgroundColor: 'rgba(255, 99, 132, 0.2)', // Ïó∞ÎèÑÎ≥Ñ ÏÉâÏÉÅ
	            	            borderColor: 'rgba(255, 99, 132, 1)',
	            	            borderWidth: 1,
	            	            data: lastYearData // Ïò¨Ìï¥ Îç∞Ïù¥ÌÑ∞
	            	        }
	            	    ]
	            	};
            	
	                
	                
	                //Ï†ÑÎÖÑ ÎèôÏõî ÎåÄÎπÑ Í±¥Ïàò ÎπÑÍµê Ï∞®Ìä∏ 
	            	//  Ï∫îÎ≤ÑÏä§ ÏÉùÏÑ±
		            const pdf2canvas = document.createElement('canvas');
	            	const pdf2ctx = pdf2canvas.getContext('2d');
	            	pdf2canvas.width = 450;
	            	pdf2canvas.height = 210;
	            	// Ï∫îÎ≤ÑÏä§Î•º ÌôîÎ©¥Ïóê Î≥¥Ïù¥ÏßÄ ÏïäÎèÑÎ°ù Ïà®ÍπÄ Ï≤òÎ¶¨
	            	pdf2canvas.style.display = 'none'; // Ïõπ ÌôîÎ©¥ÏóêÏÑú Ïà®ÍπÄ Ï≤òÎ¶¨
	            	
	            	document.body.appendChild(pdf2canvas);  // Ï∫îÎ≤ÑÏä§Î•º DOMÏóê Ï∂îÍ∞Ä (Ï∞®Ìä∏Í∞Ä Î≥¥Ïù¥ÎèÑÎ°ù)
	                
	               
            	const pdf2chart = new Chart(pdf2ctx, {
            		  type: 'bar',
            		  data: barChartData,
            		  options: {
            		    responsive: true,
            		    scales: {
            		    	x: {
            	                ticks: {
            	                    font: {
            	                        size: 18, // xÏ∂ï Ìè∞Ìä∏ ÌÅ¨Í∏∞
            	                        //weight: 'bold' // xÏ∂ï Ìè∞Ìä∏ ÎëêÍªò
            	                    }
            	                }
            	            },
            	            y: {
            	                ticks: {
            	                    beginAtZero: true, // yÏ∂ïÏù¥ 0Î∂ÄÌÑ∞ ÏãúÏûë
            	                    max: maxValue, // yÏ∂ï ÏµúÎåÄÍ∞í ÏÑ§Ï†ï
            	                    font: {
            	                        size: 18, // yÏ∂ï Ìè∞Ìä∏ ÌÅ¨Í∏∞
            	                        //weight: 'bold' // yÏ∂ï Ìè∞Ìä∏ ÎëêÍªò
            	                    }
            	                }
            	            }
            	        },
            		    plugins: {
            		    	legend: {
            	                position: 'bottom',
            	                fullWidth: true,
            	                labels: {
            	                    font: {
            	                        size: 20  // ÎùºÎ≤® ÌÅ¨Í∏∞ ÎèôÏùº
            	                        ,weight: 'bold'
            	                    },
            	                    boxWidth: 20,  // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ ÎèôÏùº
            	                    padding: 20
            	                }
            	            },
            		      title: {
          	                display: true,
          	                text: 'Ï†ÑÎÖÑ ÎèôÏõî ÎåÄÎπÑ Í±¥Ïàò ÎπÑÍµê',
          	                font: {
          	                    size: 28,  // Ï†úÎ™© ÌÅ¨Í∏∞ ÎèôÏùº
          	                    weight: 'bold'},
          	                padding: {
          	                    bottom: 10
          	                }
          	              }
            		    },
            		  }
            		});
            	
            	// üü¢ 4Î≤àÏß∏ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "3.ÏàòÏûÖÎ¨ºÌíà Í≥ºÏÑ∏ÌòÑÌô©");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin3 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth3 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight3 = 28;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth3, boxHeight3, 'D'); 
                
                
                const reportData4 = data.reportData4;
                console.log("reportData4",reportData4);
                const datas3 = reportData4.map(item => {
  	              const formattedTaxKrw = Intl.NumberFormat("ko-KR").format(item.taxKrw); 
  	              const formattedGs = Intl.NumberFormat("ko-KR").format(item.gs); 
  	              
  	              return [
  	                item.rowNum,        // ÏàúÎ≤à
  	                item.hs,            // hscode
  	                item.gsDivi,        // Í¥ÄÏÑ∏Íµ¨Î∂Ñ
  	                item.excGname, 		// ÌíàÎ™Ö
  	                item.gsRate,       	// Í¥ÄÏÑ∏Ïú®
  	                formattedTaxKrw,	// Í≥ºÏÑ∏Í∞ÄÍ≤©
  	                formattedGs			// Í¥ÄÏÑ∏Ïï°
  	              ];
  	            });
                
                const defaultColumnCount3 = 7;
	            const defaultRow3 = Array(defaultColumnCount3).fill("");

	            // datasÍ∞Ä Ïú†Ìö®Ìïú Î∞∞Ïó¥Ïù¥Í≥†, ÏµúÏÜåÌïú ÌïòÎÇò Ïù¥ÏÉÅÏùò ÌñâÏù¥ ÏûàÎã§Î©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
	            // ÏïÑÎãàÎ©¥ defaultRowÎ•º ÎÑ£Ïñ¥ÏÑú ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
	            const safeDatas3 = (Array.isArray(datas3) && datas3.length > 0)
	              ? datas3
	              : [defaultRow3];

                //Ïó¥Î≥Ñ Ìï©Í≥Ñ
                 const columnCount3 = safeDatas3[0].length;  // Ïó¥ Í∞úÏàò
		         const totals3 = Array(columnCount3).fill("");  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥
		         
		         
		         totals3[0] = "Ìï©Í≥Ñ"; 
		         for (let i = 5; i < columnCount3; i++) {
		        	    // ÏâºÌëú(,)Î•º Ï†úÍ±∞Ìïú ÌõÑ Ïà´ÏûêÎ°ú Î≥ÄÌôòÌïòÏó¨ Ìï©ÏÇ∞
		        	 	totals3[i] = datas3.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0);

		        	    // Ìï©Í≥ÑÎ•º Îã§Ïãú ÌïúÍµ≠Ïñ¥ Ïà´Ïûê Ìè¨Îß∑(ko-KR)ÏúºÎ°ú Î≥ÄÌôò
		        	 	totals3[i] = Intl.NumberFormat("ko-KR").format(totals3[i]);
		         }
		         
		         	// 1. Ï†ÑÏ≤¥ Í≥ºÏÑ∏Í∞ÄÍ≤© Ï¥ùÌï© Í≥ÑÏÇ∞
	            	const totalTaxKrw = reportData4.reduce((sum, item) => sum + item.taxKrw, 0);

	            	// 2. ÌååÏù¥ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
	            	const pieLabels = reportData4.map(item => item.excGname);  
	            	const pieData = reportData4.map(item => 
	                	parseFloat(((item.taxKrw / totalTaxKrw) * 100).toFixed(2))
	                 );
	            	
	            	// 1. ÏµúÎåÄ ÎπÑÏú® Ï∞æÍ∏∞
	            	const maxPercentage = Math.max(...pieData);  

	            	
		         // üü¢ ÏÑ§Î™Ö Ï∂îÍ∞Ä (ÏôºÏ™Ω Ï†ïÎ†¨ + Ï§Ñ ÎÇòÎàÑÍ∏∞)
	            doc.setFontSize(9);
	            doc.addFont('/pf/fonts/NanumSquareR.ttf', 'NanumSquareR', 'normal');
	            doc.setFont('NanumSquareR', 'normal');
	            doc.setTextColor(0, 0, 0);
	            const description3 = [
	            	`Îã§Ïùå ÏûêÎ£åÎäî HS CODEÎ•º Í∏∞Ï§ÄÏúºÎ°ú Ï£ºÏöî ÏàòÏûÖ ÌíàÎ™© Í¥ÄÏÑ∏Ïú®ÏùÑ Î≥¥Ïó¨Ï£ºÍ≥† ÏûàÏäµÎãàÎã§.`,
	                `HSCODE ${(reportData4[0] && reportData4[0].hs) ? reportData4[0].hs : "-"}Ïùò ${(reportData4[0] && reportData4[0].gsDivi) ? reportData4[0].gsDivi : "-"}Ï†ÅÏö©  ${(reportData4[0] && reportData4[0].excGname) ? reportData4[0].excGname : "-"}Ïù¥ ÏÉÅÏúÑ 10Í∞ú ÌÜµÍ¥ÄÎ¨ºÌíà Í≥ºÏÑ∏Í∞ÄÍ≤© Í∏∞Ï§Ä ${maxPercentage}%Î°ú Í∞ÄÏû• ÎßéÏù¥ ÏàòÏûÖÎêòÏóàÏäµÎãàÎã§.`,
	            	`ÌïúÎã¨Í∞Ñ Ï†ÑÏ≤¥ ÌíàÎ™©Ïùò ÌèâÍ∑† Í¥ÄÏÑ∏Ïú®ÏùÄ ${data.avgRate}% Ïù¥Î©∞ ÏÉÅÏúÑ 10Í∞ú ÌÜµÍ¥Ä Î¨ºÌíà ÌèâÍ∑† Í¥ÄÏÑ∏Ïú®ÏùÄ ${data.topAvgRate}% ÏûÖÎãàÎã§.`
	            ];
	          
	             startY = 23; // description ÎÜíÏù¥ ÏúÑÏπò
	             description3.forEach((line, index) => {
	            	  doc.text(8, startY, line); // ÏôºÏ™Ω Ï†ïÎ†¨ (x: 8, y: startY)
	            	  startY += 5; // Í∞Å Ï§Ñ Í∞ÑÍ≤©ÏùÑ 5Î°ú ÏÑ§Ï†ïÌïòÏó¨ Îã§Ïùå Ï§ÑÎ°ú ÎÇ¥Î†§Í∞ê
	        	});
		        
	            datas3.push(totals3);
	            
	            // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header3 = [['Rank', 'ÏÑ∏Î≤àÎ∂ÄÌò∏', 'Í¥ÄÏÑ∏Íµ¨Î∂Ñ','ÌíàÎ™Ö' ,'Í¥ÄÏÑ∏Ïú®', 'Í≥ºÏÑ∏Í∞ÄÍ≤©(KRW)', 'Í¥ÄÏÑ∏Ïï°']];
	            
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header3,
            	  body:datas3,
            	  startY: startY + 2, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Îû≠ÌÅ¨
            	        1: { halign: 'center'}, // ÏÑ∏Î≤àÎ∂ÄÌò∏
            	        2: { halign: 'center'}, // Í¥ÄÏÑ∏Íµ¨Î∂Ñ
            	        3: { halign: 'center'}, // ÌíàÎ™Ö
            	        4: { halign: 'center'}, // Í¥ÄÏÑ∏Ïú®
            	        5: { halign: 'right'}, // Í≥ºÏÑ∏Í∞ÄÍ≤©
            	        6: { halign: 'right'}, // Í¥ÄÏÑ∏Ïï°
            	  },
            	  didParseCell: function (data) {
            	        // üü° ÎßàÏßÄÎßâ Ìñâ (Ìï©Í≥Ñ Ìñâ)Îßå Î∞∞Í≤ΩÏÉâ Î≥ÄÍ≤Ω
            	        if (data.row.index === datas3.length - 1) {
            	            data.cell.styles.fillColor = [246, 243, 202]; // Ïó∞Ìïú ÌöåÏÉâ Î∞∞Í≤Ω
            	            data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
            	            data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
            	        }
            	    }
        		});
            	
            	
            	// 3Î≤àÏß∏ ÌÖåÏù¥Î∏î yÏ¢åÌëú Ï†ÄÏû• 
            	lastYPage3 = doc.lastAutoTable.finalY;  
            	const pageAfterTable3 = doc.internal.getCurrentPageInfo().pageNumber;
            	
            	// üü¢ ÎÇ®ÏùÄ Í≥µÍ∞Ñ Í≥ÑÏÇ∞
            	const spaceLeft3 = doc.internal.pageSize.height - lastYPage3 - 10;
            	
            	let chartPage3, chartY3;
            	
            	if(spaceLeft3< 130){
            		doc.addPage();
            		chartPage3 = pageAfterTable3 + 1;
            		chartY3 = 15;
            	}else{
            		 chartPage3 = pageAfterTable3;       // Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Í∑∏Î¶¥ Ïàò ÏûàÏùå
            		  chartY3 = lastYPage3;
            	}
            	

            	
            	const pdf3canvas = document.createElement("canvas");
            	const pdf3ctx = pdf3canvas.getContext("2d");
            	pdf3canvas.width = 1000;
            	pdf3canvas.height = 1000;
            	pdf3canvas.style.display = 'none'; // Ïõπ ÌôîÎ©¥ÏóêÏÑú Ïà®ÍπÄ Ï≤òÎ¶¨
            	document.body.appendChild(pdf3canvas);
            	
            	var chartDataLabels1 = {
            		    id: 'chartDataLabels',
            		    afterDraw(chart, args, options) {
            		        const ctx1 = chart.ctx; // Ïò¨Î∞îÎ•∏ Ïª®ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©
            		        ctx1.textAlign = "center";
            		        ctx1.textBaseline = "middle";
            		        ctx1.fillStyle = '#000';
            		        ctx1.font = "22px NanumSquareB";
            		        ctx1.lineWidth = 3; // ÏÑ† ÍµµÍ∏∞

            		        let prevTextPositions1 = [];  // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ï∂îÏ†ÅÌï† Î∞∞Ïó¥

            		        chart.data.datasets.forEach((dataset, i) => {
            		            chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
            		                const value = dataset.data[index]; // Îç∞Ïù¥ÌÑ∞ Í∞í
            		                const excGname = reportData4[index].excGname;
            		                if (value <= 3) return; // 0 Ïù¥Ìïò Í∞íÏùÄ ÌëúÏãú Ïïà Ìï®

            		                const { x, y } = datapoint.tooltipPosition(); // Îç∞Ïù¥ÌÑ∞ Ï¢åÌëú Í∞ÄÏ†∏Ïò§Í∏∞
            		                const radius1 = chart.outerRadius || (chart.chartArea.width / 2); // ÏõêÏùò Î∞òÏßÄÎ¶Ñ
            		                const angle1 = datapoint.startAngle !== undefined && datapoint.endAngle !== undefined
            		                    ? (datapoint.startAngle + datapoint.endAngle) / 2
            		                    : (index / dataset.data.length) * Math.PI * 2; // Í∞ÅÎèÑ Í≥ÑÏÇ∞

            		                // Ïõê Î∞îÍπ•ÏúºÎ°ú ÏãúÏûëÌïòÎäî Ï¢åÌëú (Ï°∞Ï†ï)
            		                const xOuter1 = x + (radius1 * 0.40) * Math.cos(angle1);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú
            		                const yOuter1 = y + (radius1 * 0.40) * Math.sin(angle1);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú

            		                // Í∫æÏù∏ ÏßÄÏ†ê Ïù¥ÌõÑ, ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å ÏÑ§Ï†ï
            		                const xMiddle1 = xOuter1 + (Math.cos(angle1) * 20);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å
            		                const yMiddle1 = yOuter1 + (Math.sin(angle1) * 20);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å

            		                // ÏµúÏ¢Ö ÎùºÎ≤® ÏúÑÏπò (Í∏∏Ïù¥Î•º Îçî Î©ÄÎ¶¨ ÏÑ§Ï†ï)
            		                let xLine1 = xMiddle1 + (Math.cos(angle1) > 0 ? 20 : -20); // ÌÖçÏä§Ìä∏ ÏµúÏ¢Ö ÏúÑÏπòÎèÑ Îçî Î©ÄÎ¶¨
            		                let yLine1 = yMiddle1;

            		                // ÌÖçÏä§Ìä∏ Í∞ÑÏùò ÏµúÏÜå Í±∞Î¶¨ (ÏõêÌïòÎäî Í∞íÏúºÎ°ú Ï°∞Ï†ï)
            		                const minDistance1 =90;  // ÏµúÏÜå Í∞ÑÍ≤© ÏÑ§Ï†ï

            		                // ÌÖçÏä§Ìä∏Í∞Ä Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù Í∞ÑÍ≤© Ï°∞Ï†ï
            		                prevTextPositions1.forEach((prevPos) => {
            		                    const dist1 = Math.sqrt(Math.pow(xLine1 - prevPos.x, 2) + Math.pow(yLine1 - prevPos.y, 2));
            		                    if (dist1 < minDistance1) {
            		                        // Í≤πÏπ† Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï1
            		                        const angleOffset1 = Math.PI / 18;  // ÏïΩÍ∞ÑÏùò Í∞ÅÎèÑ Ïò§ÌîÑÏÖãÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ Ïù¥Îèô
            		                        xLine1 = xMiddle1 + (Math.cos(angle1 + angleOffset1) * 10);
            		                        yLine1 = yMiddle1 + (Math.sin(angle1 + angleOffset1) * 10);
            		                    }
            		                });

            		                // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ïù¥Ï†Ñ ÏúÑÏπò Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
            		                prevTextPositions1.push({ x: xLine1, y: yLine1 });

            		                // Ï∫îÎ≤ÑÏä§Ïóê Í∫æÏùÄÏÑ† Í∑∏Î¶¨Í∏∞
            		                ctx1.beginPath();
            		                ctx1.moveTo(xOuter1, yOuter1); // Ïõê ÌÖåÎëêÎ¶¨ÏóêÏÑú ÏãúÏûë
            		                ctx1.lineTo(xMiddle1, yMiddle1); // Í∫æÏù∏ ÏßÄÏ†ê
            		                ctx1.lineTo(xLine1, yLine1); // ÏµúÏ¢Ö ÏúÑÏπò
            		                ctx1.strokeStyle = 'rgba(129,212,250,0.9)';
            		                ctx1.stroke();

            		                // ÌÖçÏä§Ìä∏ Ï†ïÎ†¨
            		                ctx1.textAlign = Math.cos(angle1) > 0 ? "left" : "right";

            		                // ÌÖçÏä§Ìä∏ ÌëúÏãú
            		                ctx1.fillText(`${value}%`, xLine1, yLine1);
            		            });
            		        });
            		    }
            		};
            	
            	const pdf3chart = new Chart(pdf3ctx, {
            		plugins : [chartDataLabels1],
            			type: "pie",
	            	    data: {
	            	        labels: pieLabels,
	            	        datasets: [{
	            	            data: pieData,
	            	            backgroundColor: [
	            	            	'rgba(1,87,155,0.7)',
	            	            	'rgba(2,119,189,0.7)',
	            	            	'rgba(2,136,209,0.7)',
	            	            	'rgba(3,155,229,0.7)',
	            	            	'rgba(3,169,244,0.7)',
	            	            	'rgba(41,182,246,0.7)',
	            	            	'rgba(79,195,247, 0.7)',
	            	            	'rgba(129,212,250,0.7)',
	            	            	'rgba(179,229,252,0.7)',
	            	            	'rgba(166,208,228,0.7)',
	            	            	]
	            	        }]
	            	    },
	            	    options: {
	            	    	 responsive: false, // ‚úÖ Ï∞®Ìä∏ ÌÅ¨Í∏∞ ÏûêÎèô Ï°∞Ï†à ÎπÑÌôúÏÑ±Ìôî
	            	         maintainAspectRatio: false, // ‚úÖ ÏõêÌòï ÎπÑÏú® Ïú†ÏßÄ ÎπÑÌôúÏÑ±Ìôî
	            	        //aspectRatio: 1, // Í∞ÄÎ°úÏÑ∏Î°ú ÎπÑÏú®ÏùÑ 1:1Î°ú Í≥†Ï†ïÌïòÏó¨ ÏõêÌòï Ïú†ÏßÄ
	            	        layout: {
	            	            padding: {
	            	            	top: 80, 
	            	            	//bottom :5,
	            	            	left : 240,  
	            	            	right : 240
	            	            }
	            	        },
	            	        
	            	        plugins: {
	            	        	datalabels: { 
	            	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
	            	            },
	            	            legend: { 
	            	            	position: "bottom",
	            	            	 fullWidth: true,
	            	            	labels : {
	            	            		font: { size: 16,weight : 'bold' },
	            	            		boxWidth: 16,
	            	            		padding : 25
	            	            	}
	            	            },
	            	            title : {
	            	            	display: true,
	            	            	text: 'ÏàòÏûÖÎ¨ºÌíà Í≥ºÏÑ∏ ÌòÑÌô©',
	            	            	font : {size :35,weight : 'bold'},
	            	            	padding: {bottom : 30}
	            	            },
	            	            tooltip: {
	             	               enabled : false // Ìà¥ÌåÅ ÎπÑÌôúÏÑ±Ìôî
	             	            },
	             	            datalabels: { 
	             	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
	             	            }
	            	        }
	            	    },
	            	});
            	
            	// üü¢5Î≤àÏß∏ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "");
                doc.text(8, 15, "4.ÏàòÏûÖÎ¨ºÌíà Ï†ÅÏö©ÏÑ∏Ïú®");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin4 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth4 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight4 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth4, boxHeight4, 'D');
                
                
                
                const reportData5 = data.reportData5;
                console.log("reportData5",reportData5);
                const datas4 = reportData5.map(item => {
  	              const formattedCntRan = Intl.NumberFormat("ko-KR").format(item.cntRan); 
  	              
  	              return [
  	            	  item.gsRate,            // Ï†ÅÏö© ÏÑ∏Ïú®
  	            	  item.gsDivi,        	// Í¥ÄÏÑ∏Íµ¨Î∂Ñ
  	                formattedCntRan 		// ÌÜµÍ¥ÄÎûÄÏàò
  	                
  	              ];
  	            });
                
                const defaultColumnCount4 = 3;
	            const defaultRow4 = Array(defaultColumnCount4).fill("");

	            // datasÍ∞Ä Ïú†Ìö®Ìïú Î∞∞Ïó¥Ïù¥Í≥†, ÏµúÏÜåÌïú ÌïòÎÇò Ïù¥ÏÉÅÏùò ÌñâÏù¥ ÏûàÎã§Î©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
	            // ÏïÑÎãàÎ©¥ defaultRowÎ•º ÎÑ£Ïñ¥ÏÑú ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
	            const safeDatas4 = (Array.isArray(datas4) && datas4.length > 0)
	              ? datas4
	              : [defaultRow4];

                //Ïó¥Î≥Ñ Ìï©Í≥Ñ
                 const columnCount4 = safeDatas4[0].length;  // Ïó¥ Í∞úÏàò
		         const totals4 = Array(columnCount4).fill("");  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥
		         
		         
		         totals4[0] = "Ìï©Í≥Ñ"; 
		         for (let i = 2; i < columnCount4; i++) {
		        	    // ÏâºÌëú(,)Î•º Ï†úÍ±∞Ìïú ÌõÑ Ïà´ÏûêÎ°ú Î≥ÄÌôòÌïòÏó¨ Ìï©ÏÇ∞
		        	 	totals4[i] = datas4.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0);

		        	    // Ìï©Í≥ÑÎ•º Îã§Ïãú ÌïúÍµ≠Ïñ¥ Ïà´Ïûê Ìè¨Îß∑(ko-KR)ÏúºÎ°ú Î≥ÄÌôò
		        	 	totals4[i] = Intl.NumberFormat("ko-KR").format(totals4[i]);
		         }
		         
		        
	            datas4.push(totals4);
	            
	            // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header4 = [['Ï†ÅÏö©ÏÑ∏Ïú®','Í¥ÄÏÑ∏Íµ¨Î∂Ñ','ÌÜµÍ¥ÄÎûÄÏàò']];
	            
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header4,
            	  body:datas4,
            	  startY: 26, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Ï†ÅÏö©ÏÑ∏Ïú®
            	        1: { halign: 'center'}, // Í¥ÄÏÑ∏Íµ¨Î∂Ñ
            	        2: { halign: 'right'}, // ÌÜµÍ¥ÄÎûÄÏàò
            	  },
            	  didParseCell: function (data) {
            	        // üü° ÎßàÏßÄÎßâ Ìñâ (Ìï©Í≥Ñ Ìñâ)Îßå Î∞∞Í≤ΩÏÉâ Î≥ÄÍ≤Ω
            	        if (data.row.index === datas4.length - 1) {
            	            data.cell.styles.fillColor = [246, 243, 202]; // Ïó∞Ìïú ÌöåÏÉâ Î∞∞Í≤Ω
            	            data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
            	            data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
            	        }
            	    }
        		});
            	
            	// 4Î≤àÏß∏ ÌÖåÏù¥Î∏î yÏ¢åÌëú Ï†ÄÏû• 
            	lastYPage4 = doc.lastAutoTable.finalY;
            	const pageAfterTable4 = doc.internal.getCurrentPageInfo().pageNumber;
            	
            	const spaceLeft4 = doc.internal.pageSize.height - lastYPage4 - 10;
            	
            	let chartPage4, chartY4;
            	
            	if(spaceLeft4< 110){
            		doc.addPage();
            		chartPage4 = pageAfterTable4 + 1;
            		chartY4 = 15;
            	}else{
            		 chartPage4 = pageAfterTable4;       // Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Í∑∏Î¶¥ Ïàò ÏûàÏùå
            		  chartY4 = lastYPage4;
            	}
            	// 1. Ï†ÑÏ≤¥ Í≥ºÏÑ∏Í∞ÄÍ≤© Ï¥ùÌï© Í≥ÑÏÇ∞
            	const totalCntRan = reportData5.reduce((sum, item) => sum + item.cntRan, 0);

            	// 2. ÌååÏù¥ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
            	const pieLabels2 = reportData5.map(item => item.gsDivi);  
            	const pieData2 = reportData5.map(item => 
                	parseFloat(((item.cntRan / totalCntRan) * 100).toFixed(2))
                 );
            	
            	const pdf4canvas = document.createElement("canvas");
            	const pdf4ctx = pdf4canvas.getContext("2d");
            	
            	pdf4canvas.width = 1200;
            	pdf4canvas.height = 1200;
            	
            	pdf4canvas.style.display = 'none'; // Ïõπ ÌôîÎ©¥ÏóêÏÑú Ïà®ÍπÄ Ï≤òÎ¶¨
            	document.body.appendChild(pdf4canvas);
            	
            	
            	var chartDataLabels = {
            		    id: 'chartDataLabels',
            		    afterDraw(chart, args, options) {
            		        const ctx = chart.ctx; // Ïò¨Î∞îÎ•∏ Ïª®ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©
            		        ctx.textAlign = "center";
            		        ctx.textBaseline = "middle";
            		        ctx.fillStyle = '#000';
            		        ctx.font = "35px NanumSquareB";
            		        ctx.lineWidth = 5; // ÏÑ† ÍµµÍ∏∞

            		        let prevTextPositions = [];  // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ï∂îÏ†ÅÌï† Î∞∞Ïó¥

            		        chart.data.datasets.forEach((dataset, i) => {
            		            chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
            		                const value = dataset.data[index]; // Îç∞Ïù¥ÌÑ∞ Í∞í
            		                const gs = reportData5[index].gsDivi;
            		                if (value <= 1) return; // 0 Ïù¥Ìïò Í∞íÏùÄ ÌëúÏãú Ïïà Ìï®

            		                const { x, y } = datapoint.tooltipPosition(); // Îç∞Ïù¥ÌÑ∞ Ï¢åÌëú Í∞ÄÏ†∏Ïò§Í∏∞
            		                const radius = chart.outerRadius || (chart.chartArea.width / 2); // ÏõêÏùò Î∞òÏßÄÎ¶Ñ
            		                const angle = datapoint.startAngle !== undefined && datapoint.endAngle !== undefined
            		                    ? (datapoint.startAngle + datapoint.endAngle) / 2
            		                    : (index / dataset.data.length) * Math.PI * 2; // Í∞ÅÎèÑ Í≥ÑÏÇ∞

            		                // Ïõê Î∞îÍπ•ÏúºÎ°ú ÏãúÏûëÌïòÎäî Ï¢åÌëú (Ï°∞Ï†ï)
            		                const xOuter = x + (radius * 0.3) * Math.cos(angle);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú
            		                const yOuter = y + (radius * 0.3) * Math.sin(angle);  // 0.6ÏúºÎ°ú Í∞í Î≥ÄÍ≤ΩÌïòÏó¨ ÏõêÏùò Î∞îÍπ•Ï™ΩÏúºÎ°ú

            		                // Í∫æÏù∏ ÏßÄÏ†ê Ïù¥ÌõÑ, ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å ÏÑ§Ï†ï
            		                const xMiddle = xOuter + (Math.cos(angle) * 20);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å
            		                const yMiddle = yOuter + (Math.sin(angle) * 20);  // 30ÏúºÎ°ú Í∞í ÎäòÎ†§ ÏÑ† Í∏∏Ïù¥Î•º Îçî Í∏∏Í≤å

            		                // ÏµúÏ¢Ö ÎùºÎ≤® ÏúÑÏπò (Í∏∏Ïù¥Î•º Îçî Î©ÄÎ¶¨ ÏÑ§Ï†ï)
            		                let xLine = xMiddle + (Math.cos(angle) > 0 ? 40 : -40); // ÌÖçÏä§Ìä∏ ÏµúÏ¢Ö ÏúÑÏπòÎèÑ Îçî Î©ÄÎ¶¨
            		                let yLine = yMiddle;

            		                // ÌÖçÏä§Ìä∏ Í∞ÑÏùò ÏµúÏÜå Í±∞Î¶¨ (ÏõêÌïòÎäî Í∞íÏúºÎ°ú Ï°∞Ï†ï)
            		                const minDistance = 40;  // ÏµúÏÜå Í∞ÑÍ≤© ÏÑ§Ï†ï

            		                // ÌÖçÏä§Ìä∏Í∞Ä Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù Í∞ÑÍ≤© Ï°∞Ï†ï
            		                prevTextPositions.forEach((prevPos) => {
            		                    const dist = Math.sqrt(Math.pow(xLine - prevPos.x, 2) + Math.pow(yLine - prevPos.y, 2));
            		                    if (dist < minDistance) {
            		                        // Í≤πÏπ† Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï
            		                        const angleOffset = Math.PI / 18;  // ÏïΩÍ∞ÑÏùò Í∞ÅÎèÑ Ïò§ÌîÑÏÖãÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ Ïù¥Îèô
            		                        xLine = xMiddle + (Math.cos(angle + angleOffset) * 40);
            		                        yLine = yMiddle + (Math.sin(angle + angleOffset) * 40);
            		                    }
            		                });

            		                // ÌÖçÏä§Ìä∏ ÏúÑÏπòÎ•º Ïù¥Ï†Ñ ÏúÑÏπò Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
            		                prevTextPositions.push({ x: xLine, y: yLine });

            		                // Ï∫îÎ≤ÑÏä§Ïóê Í∫æÏùÄÏÑ† Í∑∏Î¶¨Í∏∞
            		                ctx.beginPath();
            		                ctx.moveTo(xOuter, yOuter); // Ïõê ÌÖåÎëêÎ¶¨ÏóêÏÑú ÏãúÏûë
            		                ctx.lineTo(xMiddle, yMiddle); // Í∫æÏù∏ ÏßÄÏ†ê
            		                ctx.lineTo(xLine, yLine); // ÏµúÏ¢Ö ÏúÑÏπò
            		                ctx.strokeStyle = 'rgba(129,212,250,0.9)';
            		                ctx.stroke();

            		                // ÌÖçÏä§Ìä∏ Ï†ïÎ†¨
            		                ctx.textAlign = Math.cos(angle) > 0 ? "left" : "right";

            		                // ÌÖçÏä§Ìä∏ ÌëúÏãú
            		                ctx.fillText(`${gs} : ${value}%`, xLine, yLine);
            		            });
            		        });
            		    }
            		};

            	
            	const pdf4chart = new Chart(pdf4ctx, {
            	    plugins : [chartDataLabels],
            		type: "pie",
            	    data: {
            	        labels: pieLabels2,
            	        datasets: [{
            	            data: pieData2,
            	            backgroundColor: [
            	            	'rgba(1,87,155,0.7)',
            	            	'rgba(2,119,189,0.7)',
            	            	'rgba(2,136,209,0.7)',
            	            	'rgba(3,155,229,0.7)',
            	            	'rgba(3,169,244,0.7)',
            	            	'rgba(41,182,246,0.7)',
            	            	'rgba(79,195,247, 0.7)',
            	            	'rgba(129,212,250,0.7)',
            	            	'rgba(179,229,252,0.7)',
            	            	'rgba(166,208,228,0.7)',
            	            	]
            	        	}]
            	    	},
            	    options: {
            	    	responsive: false,
            	        maintainAspectRatio: false, //ÎπÑÏú® Î¨¥Ïãú
            	        layout: {
            	            padding: 180  // üîπ Ï∞®Ìä∏ Ï£ºÎ≥Ä Ïó¨Î∞± ÌôïÎ≥¥ (Í∞íÏùÑ ÎäòÎ¶¨Î©¥ Ï∞®Ìä∏Í∞Ä ÏûëÏïÑÏßê)
            	        },
            	        plugins: {
            	            legend: { 
            	            	position: "bottom",
            	            	display : true,
            	            	align : 'center',
            	            	labels : {
            	            		boxWidth : 18,
            	            		padding : 20,
            	            		font : {
            	            			size : 30,
            	            			weight : 'bold'
            	            		}
            	            	}
            	            },
            	            title : {
            	            	display: true,
            	            	text: 'ÏàòÏûÖÎ¨ºÌíà Ï†ÅÏö©ÏÑ∏Ïú®',
            	            	font : {size :43, weight : 'bold'},
            	            	padding: {bottom : 60}
            	            },
            	            tooltip: {
            	               enabled : false // Ìà¥ÌåÅ ÎπÑÌôúÏÑ±Ìôî
            	            },
            	            datalabels: { 
            	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
            	            }
            	        }
            	    }
            	  
            	});
            	
            	/*// üü¢6Î≤àÏß∏ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "ÏàòÏûÖÏ†ïÏ†ïÌòÑÌô©");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin5 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth5 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight5 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth5, boxHeight5, 'D'); 
                
                const reportData6 = data.reportData6;
                console.log("reportData6",reportData6);
                const datas5 = reportData6.map(item => {
  	              const formattedCntRan = Intl.NumberFormat("ko-KR").format(item.cntRan); 
  	              
  	              return [
  	            	  item.rowNum,			// Î≤àÌò∏
  	            	  item.impRpt,          // Ïã†Í≥†Î≤àÌò∏
  	            	  item.rptDay,        	// Ï†ïÏ†ïÏã†Ï≤≠Ïùº
  	            	  item.petDay,        	// Ï†ïÏ†ïÏäπÏù∏Ïùº
  	            	  item.reasonDoc,  		// Ï†ïÏ†ïÏÇ¨Ïú†
  	            	  item.reason	  		// Í∑ÄÏ±ÖÏÇ¨Ïú†
  	              ];
  	            });
	            
	            // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header5 = [['Î≤àÌò∏','Ïã†Í≥†Î≤àÌò∏','Ï†ïÏ†ïÏã†Ï≤≠Ïùº','Ï†ïÏ†ïÏäπÏù∏Ïùº','Ï†ïÏ†ïÏÇ¨Ïú†','Í∑ÄÏ±ÖÏÇ¨Ïú†']];
	            
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header5,
            	  body:datas5,
            	  startY: 24, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Î≤àÌò∏
            	        1: { halign: 'center'}, // Ïã†Í≥†Î≤àÌò∏
            	        2: { halign: 'center'}, // Ï†ïÏ†ïÏã†Ï≤≠Ïùº
            	        3: { halign: 'center'}, // Ï†ïÏ†ïÏäπÏù∏Ïùº
            	        4: { halign: 'center'}, // Ï†ïÏ†ïÏÇ¨Ïú†
            	        5: { halign: 'center'}, // Í∑ÄÏ±ÖÏÇ¨Ïú†
            	  },
        		});*/
            	// üü¢7Î≤àÏß∏ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "5.FTA ÏÇ¨ÌõÑÏ†ÅÏö©Í∏àÏï°");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin6 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth6 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight6 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth6, boxHeight6, 'D'); 
                
                
                doc.setFontSize(12);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(4, 30, "ÏÇ¨ÌõÑÏ†ÅÏö© Í±¥Ïàò Î∞è Í∏àÏï°");
                
                const reportData7 = data.reportData7;
                console.log("reportData7",reportData7);
		         
                const datas6 = reportData7.map(item => {
  	              const formattedTransTaxSum = Intl.NumberFormat("ko-KR").format(item.transTaxSum); 
  	              const formattedTaxCot = Intl.NumberFormat("ko-KR").format(item.taxCot); 
  	              const formattedTaxCoVat = Intl.NumberFormat("ko-KR").format(item.taxCotVat); 
  	              
  	              return [
  	            	  item.rptNo,            	// Ïã†Í≥†Î≤àÌò∏
  	            	  item.impRptDay,        	// Ïã†Í≥†ÏùºÏûê
  	            	  item.rptDay,				//Ï†ïÏ†ïÏã†Ï≤≠Ïùº
  	            	  item.cus,					//ÏàòÏûÖÏÑ∏Í¥Ä
  	            	  item.reasonCode,			//Ï†ïÏ†ïÏÇ¨Ïú†ÏΩîÎìú	
  	            	  item.petDay,				//ÏäπÏù∏ÏùºÏûê
  	            	  formattedTransTaxSum,		//Ï¶ùÍ∞êÎÇ¥Ïó≠
  	            	  formattedTaxCot,			//Í¥ÄÏÑ∏ Ï¶ùÍ∞ê ÎÇ¥Ïó≠
  	            	  formattedTaxCoVat			//Î∂ÄÍ∞ÄÏÑ∏ Ï¶ùÍ∞ê ÎÇ¥Ïó≠
  	              ];
  	            });
	            
                // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header5 = [['ÏàòÏûÖÏã†Í≥† Î≤àÌò∏','ÏàòÏûÖÏã†Í≥†ÏùºÏûê','Ï†ïÏ†ïÏã†Ï≤≠ÏùºÏûê','ÏàòÏûÖ ÏÑ∏Í¥Ä','Ï†ïÏ†ïÏÇ¨Ïú†ÏΩîÎìú','ÏäπÏù∏ ÏùºÏûê','Ï¶ùÍ∞êÎÇ¥Ïó≠','Í¥ÄÏÑ∏ Ï¶ùÍ∞êÎÇ¥Ïó≠','Î∂ÄÍ∞ÄÏÑ∏ Ï¶ùÍ∞êÎÇ¥Ïó≠']];
	            
	            
	            //const columnCount5 = datas6[0].length;  // Ïó¥ Í∞úÏàò
	            const columnCount5 = (datas6.length > 0 && Array.isArray(datas6[0])) ? datas6[0].length : 0;
	            const rowCount5 = datas6.length; // Ìñâ Í∞úÏàò
	            
		         const totals5 = Array(columnCount5).fill("");  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥
		         
		         
		         for (let i = 6; i < columnCount5; i++) {
		        	    // ÏâºÌëú(,)Î•º Ï†úÍ±∞Ìïú ÌõÑ Ïà´ÏûêÎ°ú Î≥ÄÌôòÌïòÏó¨ Ìï©ÏÇ∞
		        	 totals5[i] = datas6.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0);

		        	    // Ìï©Í≥ÑÎ•º Îã§Ïãú ÌïúÍµ≠Ïñ¥ Ïà´Ïûê Ìè¨Îß∑(ko-KR)ÏúºÎ°ú Î≥ÄÌôò
		        	 totals5[i] = Intl.NumberFormat("ko-KR").format(totals5[i]);
		         }
		         
		         console.log("totals5",totals5);
                
                
                
                
                
                // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header6 = [['Í±¥Ïàò','ÌôòÍ∏âÏï°','Í¥ÄÏÑ∏','Î∂ÄÍ∞ÄÏÑ∏']];
	            
	            var ftaTotalData = [[rowCount5, totals5[6], totals5[7], totals5[8]]];
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header6,
            	  body: ftaTotalData,
            	  startY: 32, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Í±¥Ïàò
            	        1: { halign: 'right'}, // ÌôòÍ∏âÏï°
            	        2: { halign: 'right'}, // Í¥ÄÏÑ∏
            	        3: { halign: 'right'}, // Î∂ÄÍ∞ÄÏÑ∏
            	  },
        		});
            	
               
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header5,
            	  body:datas6,
            	  startY: 55, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Î≤àÌò∏
            	        1: { halign: 'center'}, // Ïã†Í≥†Ïùº
            	        2: { halign: 'center'}, // Ï†ïÏ†ïÏã†Ï≤≠Ïùº
            	        3: { halign: 'center'}, // ÏàòÏûÖÏÑ∏Í¥Ä
            	        4: { halign: 'center'}, // Ï†ïÏ†ïÏÇ¨Ïú†ÏΩîÎìú
            	        5: { halign: 'center'}, // ÏäπÏù∏ÏùºÏûê
            	        6: { halign: 'right'}, // Ï¶ùÍ∞êÎÇ¥Ïó≠
            	        7: { halign: 'right'}, // Í¥ÄÏÑ∏ Ï¶ùÍ∞êÎÇ¥Ïó≠
            	        8: { halign: 'right'}, // Î∂ÄÍ∞ÄÏÑ∏ Ï¶ùÍ∞êÎÇ¥Ïó≠
            	  },
        		});
            	
            	
            	// üü¢8Î≤àÏß∏ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "6.Ï£ºÏöî Ìï¥Ïô∏ Í±∞ÎûòÏ≤ò(ÏàòÏûÖ)");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin7 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth7 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight7 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth7, boxHeight7, 'D'); 
                
                const reportData8 = data.reportData8;
               
                // ÏàòÏûÖÍ∏àÏï°(ÏõêÌôî)Ïùò Ï¥ùÌï© Í≥ÑÏÇ∞
                const totalConTotAmt = reportData8.reduce((sum, item) => sum + item.conTotAmt, 0);
               
                const datas7 = reportData8.map(item => {
  	              const formattedTotImp = Intl.NumberFormat("ko-KR").format(item.totImp); 
  	              const formattedConTotAmt = Intl.NumberFormat("ko-KR").format(item.conTotAmt);
  	              
  	              // ÎπÑÏú® Í≥ÑÏÇ∞ (Ï¥ùÏï° ÎåÄÎπÑ Î∞±Î∂ÑÏú®)
  	            const percentage = totalConTotAmt > 0 ? ((item.conTotAmt / totalConTotAmt) * 100).toFixed(2) + "%" : "0%";

  	              
  	              return [
  	            	  item.supFirm,            // Ìï¥Ïô∏Í±∞ÎûòÏ≤ò
  	            	  item.supStSht,        	// Íµ≠Í∞Ä
  	            	  formattedTotImp,			//Í±¥Ïàò
  	            	  formattedConTotAmt,    	// ÏàòÏûÖÍ∏àÏï°(ÏõêÌôî)
  	            	  percentage
  	              ];
  	            });
	            
	            // ÌÖåÏù¥Î∏î Ìó§Îçî
	            var header5 = [['Ìï¥Ïô∏Í±∞ÎûòÏ≤ò','Íµ≠Í∞Ä','Í±¥Ïàò','ÏàòÏûÖÍ∏àÏï°(ÏõêÌôî)','ÎπÑÏú®']];
	            
	            
	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
            	doc.autoTable({
            	  head: header5,
            	  body:datas7,
            	  startY: 24, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
            	  theme: 'grid',
            	  styles: {
            	    font: 'NanumSquareR',
            	    fontSize: 7,
            	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
            	    textColor: [0, 0, 0],
            	    valign: 'middle',
            	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                    wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
            	  },
            	  headStyles: {
            		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
            		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
            	    fontSize: 8,
            	    textColor: [255, 255, 255],
            	    font: 'NanumSquareEB',
            	    fontStyle: 'bold',
            	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
            	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
            	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                    wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            	  },
            	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
            	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
            	  columnStyles: {
            		  	0: { halign: 'center'}, // Ìï¥Ïô∏Í±∞ÎûòÏ≤ò
            	        1: { halign: 'center'}, // Íµ≠Í∞Ä
            	        2: { halign: 'right'}, // Í±¥Ïàò
            	        3: { halign: 'right'}, // ÏàòÏûÖÍ∏àÏï°(ÏõêÌôî)
            	        4: { halign: 'right'}, // ÎπÑÏú®
            	  },
        		});
            	
            	
            	lastYPage6 = doc.lastAutoTable.finalY;  
            	const pageAfterTable6 = doc.internal.getCurrentPageInfo().pageNumber;
            	
            	const spaceLeft6 = doc.internal.pageSize.height - lastYPage6 - 10;
            	
            	let chartPage6, chartY6;
            	
            	if(spaceLeft6< 130){
            		doc.addPage();
            		chartPage6 = pageAfterTable6 + 1;
            		chartY6 = 15;
            	}else{
            		 chartPage6 = pageAfterTable6;       // Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Í∑∏Î¶¥ Ïàò ÏûàÏùå
            		  chartY6 = lastYPage6;
            	}
            	
            	
               	const pdf7canvas = document.createElement("canvas");
            	const pdf7ctx = pdf7canvas.getContext("2d");
            	pdf7canvas.width = 1000;
            	pdf7canvas.height = 1000;
            	pdf7canvas.style.visibility = 'hidden';
            	document.body.appendChild(pdf7canvas);
            	
            	// ÌîåÎü¨Í∑∏Ïù∏ Ï†ïÏùò
            	const chartDataLabels3 = {
            	  id: 'chartDataLabels',
            	  afterDraw(chart, args, options) {
            	    const ctx3 = chart.ctx;
            	    ctx3.textAlign = "center";
            	    ctx3.textBaseline = "middle";
            	    ctx3.fillStyle = '#000';
            	    ctx3.font = "16px NanumSquare";
            	    ctx3.lineWidth =3;

            	    const prevTextPositions3 = [];

            	    chart.data.datasets.forEach((dataset, i) => {
            	      chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
            	        const supFirm = chart.data.labels[index]; // supFirm Ïù¥Î¶Ñ
            	        const percentage = dataset.data[index];   // ÎπÑÏú® Ïà´Ïûê

            	        if (percentage < 1) return;

            	        const { x, y } = datapoint.tooltipPosition();
            	        const radius = chart.outerRadius || (chart.chartArea.width / 2);
            	        const angle = (datapoint.startAngle + datapoint.endAngle) / 2;

            	        const xOuter = x + (radius * 0.4) * Math.cos(angle);
            	        const yOuter = y + (radius * 0.4) * Math.sin(angle);

            	        const xMiddle = xOuter + Math.cos(angle) * 20;
            	        const yMiddle = yOuter + Math.sin(angle) * 20;

            	        let xLine = xMiddle + (Math.cos(angle) >= 0 ? 20 : -20);
            	        let yLine = yMiddle;

            	        const minDistance = 90;
            	        let attempts = 0;

            	        // ÌÖçÏä§Ìä∏ Í∞ÑÍ≤© Ï°∞Ï†ï Î∞òÎ≥µ
            	        prevTextPositions3.forEach((prevPos) => {
		                    const dist3 = Math.sqrt(Math.pow(xLine - prevPos.x, 2) + Math.pow(yLine - prevPos.y, 2));
		                    if (dist3 < minDistance) {
		                        // Í≤πÏπ† Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï1
		                        const angleOffset3 = Math.PI / 18;  // ÏïΩÍ∞ÑÏùò Í∞ÅÎèÑ Ïò§ÌîÑÏÖãÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ Ïù¥Îèô
		                        xLine = xMiddle + (Math.cos(angle + angleOffset3) * 10);
		                        yLine = yMiddle + (Math.sin(angle + angleOffset3) * 10);
		                    }
		                });

            	        prevTextPositions3.push({ x: xLine, y: yLine });

            	        ctx3.beginPath();
            	        ctx3.moveTo(xOuter, yOuter);
            	        ctx3.lineTo(xMiddle, yMiddle);
            	        ctx3.lineTo(xLine, yLine);
            	        ctx3.strokeStyle = 'rgba(129,212,250,0.9)';
            	        ctx3.stroke();

            	        ctx3.textAlign = Math.cos(angle) >= 0 ? "left" : "right";

            	       
            	        //let labelText = `${supFirm} : ${percentage.toFixed(2)}%`;
            	        let labelText = `${percentage.toFixed(2)}%`;

            	        ctx3.fillText(labelText, xLine, yLine);
            	      });
            	    });
            	  }
            	};

            	
            	// 1% Ïù¥ÏÉÅÏù∏ Îç∞Ïù¥ÌÑ∞Îßå ÌïÑÌÑ∞ÎßÅ
            	const chartDataFiltered = reportData8
            	  .map(item => {
            	    const percentage = totalConTotAmt > 0 ? (item.conTotAmt / totalConTotAmt) * 100 : 0;
            	    return {
            	      supFirm: item.supFirm,
            	      percentage: percentage
            	    };
            	  })
            	  .filter(item => item.percentage >= 5); // üî•5% Ïù¥ÏÉÅÎßå

            	// ÎùºÎ≤®: supFirm Ïù¥Î¶Ñ
            	const supFirmLabels = chartDataFiltered.map(item => item.supFirm);

            	// Îç∞Ïù¥ÌÑ∞: ÎπÑÏú® (ÏÜåÏàòÏ†ê 2ÏûêÎ¶¨)
            	const impPieData = chartDataFiltered.map(item => Number(item.percentage.toFixed(2)));
            	
            	const pdf7chart = new Chart(pdf7ctx, {
            		plugins : [chartDataLabels3],
            			type: "pie",
	            	    data: {
	            	        labels: supFirmLabels,
	            	        datasets: [{
	            	            data: impPieData,
	            	            backgroundColor: [
	            	            	'rgba(1,87,155,0.7)',
	            	            	'rgba(2,119,189,0.7)',
	            	            	'rgba(2,136,209,0.7)',
	            	            	'rgba(3,155,229,0.7)',
	            	            	'rgba(3,169,244,0.7)',
	            	            	'rgba(41,182,246,0.7)',
	            	            	'rgba(79,195,247, 0.7)',
	            	            	'rgba(129,212,250,0.7)',
	            	            	'rgba(179,229,252,0.7)',
	            	            	'rgba(166,208,228,0.7)',
	            	            	/*'rgb(49,97,79)',
	            	            	'rgb(71,140,114)',
	            	            	'rgb(84,166,135)',
	            	            	'rgb(123,211,171)',
	            	            	'rgb(153,184,169)',
	            	            	'rgb(102,178,103)',
	            	            	'rgb(154,204,153)',
	            	            	'rgb(186,221,139)',
	            	            	'rgb(238,231,148)',
	            	            	'rgb(231,244,218)',*/
	            	            	]
	            	        }]
	            	    },
	            	    options: {
	            	    	 responsive: false, // ‚úÖ Ï∞®Ìä∏ ÌÅ¨Í∏∞ ÏûêÎèô Ï°∞Ï†à ÎπÑÌôúÏÑ±Ìôî
	            	         maintainAspectRatio: false, // ‚úÖ ÏõêÌòï ÎπÑÏú® Ïú†ÏßÄ ÎπÑÌôúÏÑ±Ìôî
	            	         //radius: '50%',
	            	        //aspectRatio: 1, // Í∞ÄÎ°úÏÑ∏Î°ú ÎπÑÏú®ÏùÑ 1:1Î°ú Í≥†Ï†ïÌïòÏó¨ ÏõêÌòï Ïú†ÏßÄ
	            	        layout: {
	            	        	padding: {
	            	                top: 300,
	            	                right: 320,
	            	                bottom: 30,
	            	                left: 320
	            	            }
	            	        	//padding:250
	            	        },
	            	        plugins: {
	            	            legend: { 
	            	            	position: "bottom",
	            	            	 fullWidth: true,
	            	            	labels : {
	            	            		boxWidth : 8,
	            	            		padding : 10,
	            	            		font : {
	            	            			size : 13,
	            	            			weight : 'bold'
	            	            		}
	            	            	}

	            	            },
	            	            title : {
	            	            	display: true,
	            	            	text: 'Ï£ºÏöî Ìï¥Ïô∏Í±∞ÎûòÏ≤ò(ÏàòÏûÖ)',
	            	            	font : {size :24 ,weight : 'bold'},
	            	            	padding: {bottom :30}
	            	            },
	            	            tooltip: {
	             	               enabled : false // Ìà¥ÌåÅ ÎπÑÌôúÏÑ±Ìôî
	             	            },
	             	            datalabels: { 
	             	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
	             	            }
	            	        }
	            	    },
	            	});
            	
            	

            	// üü¢ 9Î≤à  ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                doc.addPage();
                
                doc.setFontSize(16);
                doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                doc.setFont('NanumSquareB', 'normal');
                //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                doc.setTextColor(71, 140, 114); 
                doc.text(8, 15, "7.ÏàòÏ∂úÌÜµÍ¥ÄÌòÑÌô©");
                
                // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                const boxMargin8 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                const boxWidth8 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                const boxHeight8 = 23;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                
                doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                doc.setDrawColor(35, 69,56); 
                doc.rect(5, 8, boxWidth8, boxHeight8, 'D'); 
                
                
                const reportData9 = data.reportData9;  
                	console.log("reportData9",reportData9);
    	            const datas8 = reportData9.map(item => {
    	              const amountKrw = parseFloat(item.amountKrw) || 0;  // ÏõêÎ≥∏ Í∞í
    	              const formattedAmountKrw = Intl.NumberFormat("ko-KR").format(amountKrw);  // Ìè¨Îß§ÌåÖÎêú Í∞í
    	              
    	              return [
    	                item.lisDay,        // ÏàòÎ¶¨ÏùºÏûê
    	                item.cnt,           // Í±¥Ïàò
    	                formattedAmountKrw, // Ïã†Í≥†Í∞ÄÍ≤©
    	                item.exType1,       // ÏùºÎ∞òÏàòÏ∂ú
    	                item.exType2,       // ÏõêÏÉÅÌÉú
    	                item.exType3,       // Î∞òÏÜ°ÏàòÏ∂ú
    	                item.exType4,       // ÏàòÎ¶¨Ïö©
    	                item.exType5,       // Í∏∞ÌÉÄÎ¨¥ÏÉÅÏàòÏ∂ú
    	                item.exPrc1,        // P/L
    	                item.exPrc3,        // Ï†úÏ∂úÏÑúÎ•ò
    	                item.exPrc2,        // Í≤ÄÏÇ¨
    	              ];
    	            });
    		        // üü¢ Ïó¥Î≥Ñ Ìï©Í≥Ñ Í≥ÑÏÇ∞
    		         
    	            
    	             const columnCount6 = (datas8.length > 0 && Array.isArray(datas8[0])) ? datas8[0].length : 0; // Ïó¥ Í∞úÏàò
    		         const totals6 = Array(columnCount6).fill(0);  // 0ÏúºÎ°ú Ï±ÑÏö¥ Ìï©Í≥Ñ Î∞∞Ïó¥

    		         // Ìï©Í≥Ñ Í≥ÑÏÇ∞ (Ï≤´ Î≤àÏß∏ Ïó¥ÏùÄ "Ìï©Í≥Ñ" Î¨∏ÏûêÏó¥ÏùÑ ÎÑ£Í≥†, ÎÇòÎ®∏ÏßÄÎäî Ïà´Ïûê Ìï©ÏÇ∞)
    		         totals6[0] = "Ìï©Í≥Ñ"; 
    		         for (let i = 1; i < columnCount6; i++) {
    		        	  // Í≥ºÏÑ∏Í∞ÄÍ≤©(3Î≤àÏß∏ Ïó¥)ÏùÑ Ï†úÏô∏Ìïú Í∞íÎì§Îßå Ìï©ÏÇ∞
    		        	  if (i === 2) {
    		        	    totals6[i] = datas8.reduce((sum, row) => sum + (parseFloat(row[i].replace(/,/g, "")) || 0), 0); // ÏõêÎ≥∏ Í∞íÏúºÎ°ú Ìï©Í≥Ñ Í≥ÑÏÇ∞
    		        	  } else {
    		        	    totals6[i] = datas8.reduce((sum, row) => sum + (parseFloat(row[i]) || 0), 0);
    		        	  }
    		        	}

    		         // üü¢ ÎπÑÏú® Í≥ÑÏÇ∞ (Í∞Å Í∑∏Î£πÏùÑ 100%Î°ú ÏÑ§Ï†ï)
    		         const percentages1 = Array(columnCount6).fill("-");
    		         percentages1[0] = "ÎπÑÏú®(%)"; // Ï≤´ Î≤àÏß∏ Ïó¥ÏùÄ "ÎπÑÏú®(%)"

    		         // üü¢ ÏàòÏ∏® Í±∞ÎûòÌòïÌÉú ÎπÑÏú® Í≥ÑÏÇ∞
    		         const tradeTotal1 = totals6.slice(3, 8).reduce((sum, value) => sum + value, 0); // 3~7Î≤àÏß∏ Ïó¥ Ìï©Í≥Ñ
    		         for (let i = 3; i < 8; i++) {
    		             percentages1[i] = tradeTotal1 > 0 ? ((totals6[i] / tradeTotal1) * 100).toFixed(1) + "%" : "-";
    		         }

    		         // üü¢ ÏàòÏ∂úÏ≤òÎ¶¨ÌòÑÌô© ÎπÑÏú® Í≥ÑÏÇ∞
    		         const processTotal1 = totals6.slice(8, 11).reduce((sum, value) => sum + value, 0); // 8~10Î≤àÏß∏ Ïó¥ Ìï©Í≥Ñ
    		         for (let i = 8; i < 11; i++) {
    		             percentages1[i] = processTotal1 > 0 ? ((totals6[i] / processTotal1) * 100).toFixed(1) + "%" : "-";
    		         }

    		         
    		     	 // üü¢ Ïà´Ïûê Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ (Ï≤ú Îã®ÏúÑ ÏΩ§Îßà Ï∂îÍ∞Ä)
    		         const formattedTotals1 = totals6.map((value, index) =>
    		         typeof value === "number" ? Intl.NumberFormat("ko-KR").format(value) : value
    		      	);
    		         
    		     	// üü¢ Í±¥Ïàò, P/L, Ï†úÏ∂úÏÑúÎ•ò, Í≤ÄÏÇ¨ Í∞ÄÏ†∏Ïò§Í∏∞
    		         const countTotal1 = formattedTotals1[1] || 0;              // ÌÜµÍ¥ÄÍ±¥Ïàò
    		         const plTotal1 = formattedTotals1[8] || 0;                 // P/L Ìï©Í≥Ñ
    		         const plPercentage1 = percentages1[8] || 0;                // P/L ÎπÑÏú®
    		         const submissionTotal1 = formattedTotals1[9] || 0;         // Ï†úÏ∂úÏÑúÎ•ò Ìï©Í≥Ñ
    		         const submissionPercentage1 = percentages1[9] || 0;        // Ï†úÏ∂úÏÑúÎ•ò ÎπÑÏú®
    		         const inspectionTotal1 = formattedTotals1[10] || 0;        // Í≤ÄÏÇ¨ Ìï©Í≥Ñ
    		         const inspectionPercentage1 = percentages1[10] || 0;       // Í≤ÄÏÇ¨ ÎπÑÏú®
    	       
    		            // üü¢ ÏÑ§Î™Ö Ï∂îÍ∞Ä (ÏôºÏ™Ω Ï†ïÎ†¨ + Ï§Ñ ÎÇòÎàÑÍ∏∞)
    		            doc.setFontSize(9);
    		            doc.addFont('/pf/fonts/NanumSquareR.ttf', 'NanumSquareR', 'normal');
    		            doc.setFont('NanumSquareR', 'normal');
    		            doc.setTextColor(0, 0, 0);
    		            const description4 = [
    		            	`Îã§Ïùå ÏûêÎ£åÎäî ${data.rptDate2}Ïõî ÌïúÎã¨ ÏàòÏûÖÌÜµÍ¥Ä ÏûêÎ£åÏù¥Î©∞ Ï¥ù ${countTotal1}Í±¥ ÏàòÏûÖÏã†Í≥†Î•º ÏßÑÌñâÌïòÏòÄÏäµÎãàÎã§.`,
    		                `ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô©ÏùÄ P/L ${plTotal1}Í±¥ (${plPercentage1}), Ï†úÏ∂ú ${submissionTotal1}Í±¥ (${submissionPercentage1}), Í≤ÄÏÇ¨ ${inspectionTotal1}Í±¥ (${inspectionPercentage1}) ÏûÖÎãàÎã§.`
    		            ];
    		          
    		             startY = 23; // description ÎÜíÏù¥ ÏúÑÏπò
    		            description4.forEach((line, index) => {
    		            	  doc.text(8, startY, line); // ÏôºÏ™Ω Ï†ïÎ†¨ (x: 8, y: startY)
    		            	  startY += 5; // Í∞Å Ï§Ñ Í∞ÑÍ≤©ÏùÑ 5Î°ú ÏÑ§Ï†ïÌïòÏó¨ Îã§Ïùå Ï§ÑÎ°ú ÎÇ¥Î†§Í∞ê
    		        	});
    		         
    		      // üü¢ datasÏóê Ìï©Í≥ÑÏôÄ ÎπÑÏú® Ìñâ Ï∂îÍ∞Ä
    		         datas8.push(formattedTotals1);
    		         datas8.push(percentages1);
    		         
                	// ÌÖåÏù¥Î∏î Ìó§Îçî
    		       const header7 = [
    		    	   	[ 
    		    		    { content: 'ÏàòÎ¶¨ÏùºÏûê', rowSpan: 2, border: [true, true, true, true] },  // ÏàòÎ¶¨ÏùºÏûê ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
    		    		    { content: 'Í±¥Ïàò', rowSpan: 2, border: [true, true, true, true] },
    		    		    { content: 'Ïã†Í≥†Í∞ÄÍ≤©(KRW)', rowSpan: 2, border: [true, true, true, true] },
    		    		    { content: 'ÏàòÏ∂úÏã†Í≥† Í±∞ÎûòÌòïÌÉú ÌòÑÌô©', colSpan: 5, border: [true, true, true, true] },  // ÏàòÏûÖ Í±∞ÎûòÌòïÌÉú ÌòÑÌô© ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
    		    		    { content: 'ÏàòÏ∂úÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô©', colSpan: 3, border: [true, true, true, true] },  // ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô© ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
    		    		  ],  // Ï≤´ Î≤àÏß∏ Ìñâ
    		    		  [
    		    		    { content: 'ÏùºÎ∞òÏàòÏûÖ', border: [true, true, true, true] },
    		    		    { content: 'ÏõêÏÉÅÌÉú', border: [true, true, true, true] },
    		    		    { content: 'Î∞òÏÜ°ÏàòÏ∂ú', border: [true, true, true, true] },
    		    		    { content: 'ÏàòÎ¶¨Ïö©', border: [true, true, true, true] },
    		    		    { content: 'Í∏∞ÌÉÄÎ¨¥ÏÉÅÏàòÏ∂ú', border: [true, true, true, true] },
    		    		    { content: 'P/L', border: [true, true, true, true] },
    		    		    { content: 'Ï†úÏ∂úÏÑúÎ•ò', border: [true, true, true, true] },
    		    		    { content: 'Í≤ÄÏÇ¨', border: [true, true, true, true] },
    		    		  ]
    		    	 ];
    		       
    		       
                	// üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header7,
                	  body:datas8,
                	  startY: startY + 2, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    halign: 'center',
                	    overflow: 'linebreak', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøà Ï†ÅÏö©
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  	0: { halign: 'center' , cellWidth: 23 }, // ÏàòÎ¶¨ÏùºÏûê
                	        1: { halign: 'right' , cellWidth: 18}, // Í±¥Ïàò
                	        2: { halign: 'right' , cellWidth: 23}, // Í≥ºÏÑ∏Í∞ÄÍ≤©
                	        3: { halign: 'center' , cellWidth: 17}, // ÏùºÎ∞òÏàòÏûÖ
                	        4: { halign: 'center' , cellWidth: 17}, // ÏàòÎ¶¨Î¨ºÌíà
                	        5: { halign: 'center' , cellWidth: 17}, // Í≤¨Ìíà Î∞è Í¥ëÍ≥†Ïö©Ìíà
                	        6: { halign: 'center' , cellWidth: 17}, // Í∏∞ÌÉÄ ÏàòÏûÖ ÏäπÏù∏Î©¥ÏÑ∏
                	        7: { halign: 'center' , cellWidth: 17}, // Ïû¨ÏàòÏ∂úÏ°∞Í±¥
                	        8: { halign: 'center' , cellWidth: 17 }, // P/L
                	        9: { halign: 'center' , cellWidth: 17}, // Ï†úÏ∂úÏÑúÎ•ò
                	        10: { halign: 'center' , cellWidth: 17}, // Í≤ÄÏÇ¨
                	  },
                	  didParseCell: function(data) {
                		    // üü¢ Ìï©Í≥Ñ Ìñâ Ïä§ÌÉÄÏùº Ï†ÅÏö© (ÎßàÏßÄÎßâÏóêÏÑú Îëê Î≤àÏß∏ Ìñâ)
                		    if (data.row.index === datas8.length - 2) {
                		      data.cell.styles.fillColor = [246, 243, 202]; // Î∞∞Í≤Ω
              	              data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
              	              data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
                		    }
                		    // üü¢ ÎπÑÏú® Ìñâ Ïä§ÌÉÄÏùº Ï†ÅÏö© (ÎßàÏßÄÎßâ Ìñâ)
                		    if (data.row.index === datas8.length - 1) {
                		    	data.cell.styles.fillColor = [246, 243, 202]; // Î∞∞Í≤Ω
                	            data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
                	            data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
                		    }
                		  }
            		});
                	
                	// 5Î≤àÏß∏ ÌÖåÏù¥Î∏î yÏ¢åÌëú Ï†ÄÏû• 
                	lastYPage5 = doc.lastAutoTable.finalY; 
                	const pageAfterTable5 = doc.internal.getCurrentPageInfo().pageNumber;
                	
                	const spaceLeft5 = doc.internal.pageSize.height - lastYPage5 - 10;
                	
                	let chartPage5, chartY5;
                	
                	if(spaceLeft5< 70){
                		doc.addPage();
                		chartPage5 = pageAfterTable5 + 1;
                		chartY5 = 15;
                	}else{
                		 chartPage5 = pageAfterTable5;       // Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Í∑∏Î¶¥ Ïàò ÏûàÏùå
                		  chartY5 = lastYPage5;
                	}
                	
                	// Í±∞ÎûòÌòïÌÉú 
                	// Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò (NaN Î∞©ÏßÄ)
                	const safeParse1 = (value) => {
                	    let num = parseFloat(value ? value.replace('%', '') : 0);
                	    return isNaN(num) ? 0 : num;
                	};

                	if (Chart.getChart("myChart")) {  
                	    Chart.getChart("myChart").destroy();  
                	}
                	
                	// ÏôºÏ™Ω Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
                	const pdf5ImgData = percentages1.slice(3, 7).map(safeParse1);
                	
                	// ÏôºÏ™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§ ÏÉùÏÑ±
                	pdf5canvas = document.createElement('canvas');
                	const pdf5ctx = pdf5canvas.getContext('2d');
                	pdf5canvas.width = 500;
                	pdf5canvas.height = 500;

                	
                	
                	
                	// ÏôºÏ™Ω Ï∞®Ìä∏ ÏÉùÏÑ±
                	const pdf5chart = new Chart(pdf5ctx, {
                		plugins : [chartDataLabels2],
                		type: 'pie',
                	    data: {
                	        labels: ['ÏùºÎ∞òÏàòÏ∂ú', 'ÏõêÏÉÅÌÉú', 'Î∞òÏÜ°ÏàòÏ∂ú', 'ÏàòÎ¶¨Ïö©', 'Í∏∞ÌÉÄÎ¨¥ÏÉÅÏàòÏ∂ú'],
                	        datasets: [{
                	            data: pdf5ImgData,
                	            backgroundColor: [  'rgb(113,162, 218)',
    				            	            	'rgb(48,123,202)', 
    				            	            	'rgb(166,196,232)',
    				            	            	'rgb(216,225,234)',
    				            	            	'rgb(40,101,168)']
    	            	        }]
    			            	
                	    },
                	    options: {
                	        responsive: false,
                	        maintainAspectRatio: false,  // ÎπÑÏú® Ïú†ÏßÄ Ìï¥Ï†ú
                	        layout: {
                	            padding: {
                	                bottom: 20, // Ï∞®Ìä∏ ÌïòÎã® Ïó¨Î∞± (ÎùºÎ≤® Í≥µÍ∞Ñ ÌôïÎ≥¥)
                	                right : 90,
                	                left : 90
                	            }
                	        },
                	        plugins: {
                	        	datalabels: { 
                	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
                	            },
                	            legend: {
                	                position: 'bottom',
                	                fullWidth: true,
                	                labels: {
                	                    font: {
                	                        size: 18  // ÎùºÎ≤® ÌÅ¨Í∏∞ ÎèôÏùº
                	                        ,weight: 'bold'
                	                    },
                	                    boxWidth: 15,  // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ ÎèôÏùº
                	                    padding: 15
                	                }
                	            },
                	            title: {
                	                display: true,
                	                text: 'Í±∞ÎûòÌòïÌÉú',
                	                font: {
                	                    size: 28,  // Ï†úÎ™© ÌÅ¨Í∏∞ ÎèôÏùº
                	                    weight: 'bold'},
                	                padding: {
                	                    bottom: 20
                	                }
                	            }
                	        }
                	    }
                	});
                	
                	
                	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ (ÏàòÏûÖÏã†Í≥† Ï≤òÎ¶¨ÌòÑÌô© ÎπÑÏú®)
                	const pdf6ImgData = [
                	    parseFloat(percentages1[8].replace('%', '')) || 0, 
                	    parseFloat(percentages1[9].replace('%', '')) || 0, 
                	    parseFloat(percentages1[10].replace('%', '')) || 0 
                	];
                	
                	
                	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§ ÏÉùÏÑ±
                	pdf6canvas = document.createElement('canvas');
                	const pdf6Ctx = pdf6canvas.getContext('2d');
                	pdf6canvas.width = 500;
                	pdf6canvas.height = 500;

                	// Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ ÏÉùÏÑ±
                	const pdf6chart = new Chart(pdf6Ctx, {
                		plugins : [chartDataLabels2],
                		type: 'pie',
                	    data: {
                	        labels: ['P/L', 'Ï†úÏ∂úÏÑúÎ•ò', 'Í≤ÄÏÇ¨'],
                	        datasets: [{
                	            data: pdf6ImgData,
                	            backgroundColor: [  'rgb(48,123,202)', 				            	             
    				            	            	'rgb(113,162, 218)', 
    				            	            	'rgb(166,196,232)']
                	        }]
                	    },
                	    options: {
                	        responsive: false,
                	        maintainAspectRatio: false,  
                	        layout: {
                	            padding: {
                	                bottom: 70, // ÏïÑÎûòÏ™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
                	                left: 90,  // ÏôºÏ™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
                	                right: 90  // Ïò§Î•∏Ï™Ω Ïó¨Î∞± Ï∂îÍ∞Ä
                	            }
                	        },
                	        plugins: {
                	        	datalabels: {
                 	                color: 'rgb(89,89,89)',
                 	                formatter: function(value, context) {
                 	                	let label = context.chart.data.labels[context.dataIndex];
                 	                   if (value < 10) {  // Í∞íÏù¥ 10% ÎØ∏ÎßåÏù∏ Í≤ΩÏö∞ ÎùºÎ≤®ÏùÑ ÌëúÏãúÌïòÏßÄ ÏïäÏùå
                 	                       return null;  
                 	                   }
                 	                    return label + " : " +value + "%"; // ÎùºÎ≤®Í≥º ÌçºÏÑºÌä∏ ÌëúÏãú
                 	                },
                 	                font: {
                 	                    size: 20,
                 	                    weight : 'bold'
                 	                },
                	        	}, 
                	        	datalabels: { 
               	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
                	        	},
                	        	legend: {
                	                position: 'bottom',
                	                fullWidth: true,
                	                labels: {
                	                    font: {
                	                        size: 18  // ÎùºÎ≤® ÌÅ¨Í∏∞ ÎèôÏùº
                	                        ,weight: 'bold'
                	                    },
                	                    boxWidth: 15,  // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ ÎèôÏùº
                	                    padding: 15
                	                }
                	            },
                	            title: {
                	                display: true,
                	                text: 'Ïã†Í≥†Ï≤òÎ¶¨',
                	                font: {
                	                    size: 28,  // Ï†úÎ™© ÌÅ¨Í∏∞ ÎèôÏùº
                	                    weight: 'bold'
                	                },
                	                padding: {
                	                    bottom: 10
                	                }
                	            }
                	        }
                	    }
                	});
                	
                	// üü¢ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                    doc.addPage();
                    
                    doc.setFontSize(16);
                    doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                    doc.setFont('NanumSquareB', 'normal');
                    //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                    doc.setTextColor(71, 140, 114); 
                    doc.text(8, 15, "8.Ï£ºÏöî Ìï¥Ïô∏ Í±∞ÎûòÏ≤ò(ÏàòÏ∂ú)");
                    
                    // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                    const boxMargin9 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                    const boxWidth9 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                    const boxHeight9 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                    
                    doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                    doc.setDrawColor(35, 69,56); 
                    doc.rect(5, 8, boxWidth9, boxHeight9, 'D'); 
                    
                    const reportData10 = data.reportData10;
                   console.log("reportData10",reportData10);
                    // ÏàòÏ∂úÍ∏àÏï° Ï¥ùÌï© Í≥ÑÏÇ∞
                    const totalTotRptKrw  = reportData10.reduce((sum, item) => sum + item.totRptKrw, 0);
                   console.log("totalTotRptKrw",totalTotRptKrw);
                    const datas9 = reportData10.map(item => {
      	              const formattedTotExp = Intl.NumberFormat("ko-KR").format(item.cmtExp); 
      	              const formattedConTotRptKrw = Intl.NumberFormat("ko-KR").format(item.totRptKrw);
      	              
      	              // ÎπÑÏú® Í≥ÑÏÇ∞ (Ï¥ùÏï° ÎåÄÎπÑ Î∞±Î∂ÑÏú®)
      	              const rpt = Number(item.totRptKrw || 0); // ÏïàÏ†ÑÌïòÍ≤å Ïà´Ïûê Î≥ÄÌôò

	      	          // ÎπÑÏú® Í≥ÑÏÇ∞
	      	          const expPercentage = totalTotRptKrw > 0
	      	            ? ((rpt / totalTotRptKrw) * 100).toFixed(2) + "%"
	      	            : "0%";
      	              
      	              return [
      	            	  item.buyFirm,            // Ìï¥Ïô∏Í±∞ÎûòÏ≤ò
      	            	  item.taStIsonm,        	// Íµ≠Í∞Ä
      	            	  formattedTotExp,			// Í±¥Ïàò
      	            	  formattedConTotRptKrw,    // ÏàòÏ∂úÍ∏àÏï°
      	            	  expPercentage				// ÎπÑÏú®
      	              ];
      	            });
    	            
    	            // ÌÖåÏù¥Î∏î Ìó§Îçî
    	            var header8 = [['Ìï¥Ïô∏Í±∞ÎûòÏ≤ò','Íµ≠Í∞Ä','Í±¥Ïàò','ÏàòÏ∂úÍ∏àÏï°','ÎπÑÏú®']];
    	            
    	            
    	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header8,
                	  body:datas9,
                	  startY: 24, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                        wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                        wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                        halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  	0: { halign: 'center'}, // Ìï¥Ïô∏Í±∞ÎûòÏ≤ò
                	        1: { halign: 'center'}, // Íµ≠Í∞Ä
                	        2: { halign: 'right'}, // Í±¥Ïàò
                	        3: { halign: 'right'}, // ÏàòÏ∂úÍ∏àÏï°
                	        4: { halign: 'right'}, // ÎπÑÏú®
                	  },
            		});
                	
                	lastYPage7 = doc.lastAutoTable.finalY;  
                	const pageAfterTable7 = doc.internal.getCurrentPageInfo().pageNumber;
                	
                	const spaceLeft7 = doc.internal.pageSize.height - lastYPage7 - 10;
                	
                	let chartPage7, chartY7;
                	
                	if(spaceLeft7< 120){
                		doc.addPage();
                		chartPage7 = pageAfterTable7 + 1;
                		chartY7 = 15;
                	}else{
                		 chartPage7 = pageAfterTable7;       // Í∞ôÏùÄ ÌéòÏù¥ÏßÄÏóê Í∑∏Î¶¥ Ïàò ÏûàÏùå
                		  chartY7 = lastYPage7;
                	}
                	
                	
                	
                	const pdf8canvas = document.createElement("canvas");
                	const pdf8ctx = pdf8canvas.getContext("2d");
                	pdf8canvas.width = 1000;
                	pdf8canvas.height = 1000;
                	pdf8canvas.style.visibility = 'hidden';
                	document.body.appendChild(pdf8canvas);
                	
                	// ÌîåÎü¨Í∑∏Ïù∏ Ï†ïÏùò
                	const chartDataLabels4 = {
                	  id: 'chartDataLabels',
                	  afterDraw(chart, args, options) {
                	    const ctx4 = chart.ctx;
                	    ctx4.textAlign = "center";
                	    ctx4.textBaseline = "middle";
                	    ctx4.fillStyle = '#000';
                	    ctx4.font = "16px NanumSquare";
                	    ctx4.lineWidth =3;

                	    const prevTextPositions4 = [];

                	    chart.data.datasets.forEach((dataset, i) => {
                	      chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
                	        //const supFirm = chart.data.labels[index]; // supFirm Ïù¥Î¶Ñ
                	        const expPercentage = dataset.data[index];   // ÎπÑÏú® Ïà´Ïûê

                	        if (expPercentage < 1) return;

                	        const { x, y } = datapoint.tooltipPosition();
                	        const radius = chart.outerRadius || (chart.chartArea.width / 2);
                	        const angle = (datapoint.startAngle + datapoint.endAngle) / 2;

                	        const xOuter = x + (radius * 0.4) * Math.cos(angle);
                	        const yOuter = y + (radius * 0.4) * Math.sin(angle);

                	        const xMiddle = xOuter + Math.cos(angle) * 20;
                	        const yMiddle = yOuter + Math.sin(angle) * 20;

                	        let xLine = xMiddle + (Math.cos(angle) >= 0 ? 20 : -20);
                	        let yLine = yMiddle;

                	        const minDistance = 90;
                	        let attempts = 0;

                	        // ÌÖçÏä§Ìä∏ Í∞ÑÍ≤© Ï°∞Ï†ï Î∞òÎ≥µ
                	        prevTextPositions4.forEach((prevPos) => {
    		                    const dist2 = Math.sqrt(Math.pow(xLine - prevPos.x, 2) + Math.pow(yLine - prevPos.y, 2));
    		                    if (dist2 < minDistance) {
    		                        // Í≤πÏπ† Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï1
    		                        const angleOffset2 = Math.PI / 18;  // ÏïΩÍ∞ÑÏùò Í∞ÅÎèÑ Ïò§ÌîÑÏÖãÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ Ïù¥Îèô
    		                        xLine = xMiddle + (Math.cos(angle + angleOffset2) * 10);
    		                        yLine = yMiddle + (Math.sin(angle + angleOffset2) * 10);
    		                    }
    		                });

                	        prevTextPositions4.push({ x: xLine, y: yLine });

                	        ctx4.beginPath();
                	        ctx4.moveTo(xOuter, yOuter);
                	        ctx4.lineTo(xMiddle, yMiddle);
                	        ctx4.lineTo(xLine, yLine);
                	        ctx4.strokeStyle = 'rgba(129,212,250,0.9)';
                	        ctx4.stroke();

                	        ctx4.textAlign = Math.cos(angle) >= 0 ? "left" : "right";

                	       
                	        //let labelText = `${supFirm} : ${percentage.toFixed(2)}%`;
                	        let labelText = `${expPercentage.toFixed(2)}%`;

                	        ctx4.fillText(labelText, xLine, yLine);
                	      });
                	    });
                	  }
                	};

                	
                	// 1% Ïù¥ÏÉÅÏù∏ Îç∞Ïù¥ÌÑ∞Îßå ÌïÑÌÑ∞ÎßÅ
                	const chartDataFilter = reportData10
                	  .map(item => {
                	    	const rpt = Number(item.totRptKrw || 0); // Í∏àÏï°
                	        const percentage = totalTotRptKrw > 0 ? (rpt / totalTotRptKrw) * 100 : 0;
                	        
                	        return {
                	          buyFirm: item.buyFirm,
                	          percentage: percentage
                	        };
                	      })
                	  .filter(item => item.percentage >= 5); //  üî•3% Ïù¥ÏÉÅÎßå

                	// ÎùºÎ≤®: supFirm Ïù¥Î¶Ñ
                	const expLabels = chartDataFilter.map(item => item.buyFirm);

                	// Îç∞Ïù¥ÌÑ∞: ÎπÑÏú® (ÏÜåÏàòÏ†ê 2ÏûêÎ¶¨)
                	const expPieData = chartDataFilter.map(item => Number(item.percentage.toFixed(2)));
                	
                	const pdf8chart = new Chart(pdf8ctx, {
                		plugins : [chartDataLabels4],
                			type: "pie",
    	            	    data: {
    	            	        labels: expLabels,
    	            	        datasets: [{
    	            	            data: expPieData,
    	            	            backgroundColor: [
    	            	            	'rgba(1,87,155,0.7)',
    	            	            	'rgba(2,119,189,0.7)',
    	            	            	'rgba(2,136,209,0.7)',
    	            	            	'rgba(3,155,229,0.7)',
    	            	            	'rgba(3,169,244,0.7)',
    	            	            	'rgba(41,182,246,0.7)',
    	            	            	'rgba(79,195,247, 0.7)',
    	            	            	'rgba(129,212,250,0.7)',
    	            	            	'rgba(179,229,252,0.7)',
    	            	            	'rgba(166,208,228,0.7)',
    	            	            	]
    	            	        }]
    	            	    },
    	            	    options: {
    	            	    	 responsive: false, // ‚úÖ Ï∞®Ìä∏ ÌÅ¨Í∏∞ ÏûêÎèô Ï°∞Ï†à ÎπÑÌôúÏÑ±Ìôî
    	            	         maintainAspectRatio: true, // ‚úÖ ÏõêÌòï ÎπÑÏú® Ïú†ÏßÄ ÎπÑÌôúÏÑ±Ìôî
    	            	        layout: {
    	            	        	padding: {
    	            	                top: 300,
    	            	                right: 320,
    	            	                bottom: 30,
    	            	                left: 320
    	            	            }
    	            	        },
    	            	        plugins: {
    	            	            legend: { 
    	            	            	position: "bottom",
    	            	            	 fullWidth: true,
    	            	            	labels : {
    	            	            		boxWidth : 8,
    	            	            		padding : 10,
    	            	            		font : {
    	            	            			size : 13,
    	            	            			//weight : 'bold'
    	            	            		}
    	            	            	}

    	            	            },
    	            	            title : {
    	            	            	display: true,
    	            	            	text: 'Ï£ºÏöî Ìï¥Ïô∏Í±∞ÎûòÏ≤ò(ÏàòÏ∂ú)',
    	            	            	font : {size :24 ,weight : 'bold'},
    	            	            	padding: {bottom :30}
    	            	            },
    	            	            tooltip: {
    	             	               enabled : false // Ìà¥ÌåÅ ÎπÑÌôúÏÑ±Ìôî
    	             	            },
    	             	            datalabels: { 
    	             	            	 display: false // ‚úÖ Ï∞®Ìä∏ ÎÇ¥Î∂Ä Îç∞Ïù¥ÌÑ∞ Ïà®ÍπÄ
    	             	            }
    	            	        }
    	            	    },
    	            	});
                	
                	// üü¢ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
                    doc.addPage();
                    
                    doc.setFontSize(16);
                    doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                    doc.setFont('NanumSquareB', 'normal');
                    //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                    doc.setTextColor(71, 140, 114); 
                    doc.text(8, 15, "9.ÏàòÏ∂úÏûÖ Ï†ïÏ†ï Í∑ÄÏ±ÖÏûêÎ≥Ñ ÎπÑÏú®");
                    
                    // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                    const boxMargin10 = 5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                    const boxWidth10 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                    const boxHeight10 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                    
                    doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                    doc.setDrawColor(35, 69,56); 
                    doc.rect(5, 8, boxWidth10, boxHeight10, 'D'); 
                    
                    const reportData11 = data.reportData11;
                   console.log("reportData11",reportData11);
                   
                   const datas10 = [];

                   
                   for (let i = 0; i < reportData11.length; i += 2) {
                	   const row1 = reportData11[i];     // Í±¥Ïàò
                	   const row2 = reportData11[i + 1]; // ÎπÑÏú®

                	   datas10.push([
                	     {
                	       content: row1.div1,  // ÏàòÏûÖ or ÏàòÏ∂ú
                	       rowSpan: 2,
                	       styles: { halign: 'center', valign: 'middle' }
                	     },
                	     { content: row1.div2, styles: { halign: 'center' } },
                	     { content: row1.cunt1, styles: { halign: 'right' } },
                	     { content: row1.cunt2, styles: { halign: 'right' } },
                	     { content: row1.cunt3, styles: { halign: 'right' } },
                	     { content: row1.cunt4, styles: { halign: 'right' } },
                	     { content: row1.total, styles: { halign: 'right' } }
                	   ]);

                	   datas10.push([
                	     { content: row2.div2, styles: { halign: 'center' } },
                	     { content: row2.cunt1, styles: { halign: 'right' } },
                	     { content: row2.cunt2, styles: { halign: 'right' } },
                	     { content: row2.cunt3, styles: { halign: 'right' } },
                	     { content: row2.cunt4, styles: { halign: 'right' } },
                	     { content: row2.total, styles: { halign: 'right' } }
                	   ]);
                	 }
                
    	            // ÌÖåÏù¥Î∏î Ìó§Îçî
    	            var header9 = [
    	            	  	[
    	            		    { content: 'Íµ¨Î∂Ñ', colSpan: 2, styles: { halign: 'center' } },
    	            		    { content: 'Ïã†Í≥†Ïù∏', styles: { halign: 'center' } },
    	            		    { content: 'Ïã†Í≥†ÏùòÎ¢∞Ïù∏(ÌôîÏ£º Îì±)', styles: { halign: 'center' } },
    	            		    { content: 'Ïô∏Íµ≠Ïù∏Íµ¨Îß§Ïûê(ÌåêÎß§Ïûê)', styles: { halign: 'center' } },
    	            		    { content: 'Í∏∞ÌÉÄ', styles: { halign: 'center' } },
    	            		    { content: 'Ìï©Í≥Ñ', styles: { halign: 'center' } }
    	            		  ]
    	            		];
    	            
    	            
    	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header9,
                	  body:datas10,
                	  startY: 24, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                        wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                        wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                        halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  0: { halign: 'center' },
                		  1: { halign: 'center' },
                		  2: { halign: 'right' },
                		  3: { halign: 'right' },
                		  4: { halign: 'right' },
                		  5: { halign: 'right' },
                		  6: { halign: 'right' }
                	  },
            		});
                	
                	lastYPage8 = doc.lastAutoTable.finalY;
                    
                    doc.setFontSize(16);
                    doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                    doc.setFont('NanumSquareB', 'normal');
                    //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                    doc.setTextColor(71, 140, 114); 
                    doc.text(8, lastYPage8 + 20, "10.ÏàòÏ∂úÏûÖ Ï†ïÌòïÏ°∞Í±¥");
                    
                    // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                    const boxMargin11 =  5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                    const boxWidth11 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                    const boxHeight11 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                    
                    doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                    doc.setDrawColor(35, 69,56); 
                    doc.rect(5, lastYPage8 + 13, boxWidth11, boxHeight11, 'D'); 
                    
                    const reportData12 = data.reportData12;
                   console.log("reportData12",reportData12);
                   
                   
                   // 1. Í∞ÅÍ∞Å Ï¥ùÌï© Í≥ÑÏÇ∞
                   const totalImpAmt = reportData12.reduce((sum, item) => sum + Number(item.impAmt || 0), 0);
                   const totalExpAmt = reportData12.reduce((sum, item) => sum + Number(item.expAmt || 0), 0);

                   // 2. map ÎèåÎ©¥ÏÑú ÎπÑÏú® Í≥ÑÏÇ∞
                   const datas11 = reportData12.map(item => {
                	 const formattedlmpAmt = Intl.NumberFormat("ko-KR").format(item.impAmt); 
                	 const formattedEmpAmt = Intl.NumberFormat("ko-KR").format(item.expAmt); 
                     const impAmt = Number(item.impAmt || 0);
                     const expAmt = Number(item.expAmt || 0);

                     // ÏàòÏûÖ ÎπÑÏú®
                     const impRate = totalImpAmt === 0 ? '0.0%' : ((impAmt / totalImpAmt) * 100).toFixed(1) + '%';
                     // ÏàòÏ∂ú ÎπÑÏú®
                     const expRate = totalExpAmt === 0 ? '0.0%' : ((expAmt / totalExpAmt) * 100).toFixed(1) + '%';

                     return [
                       item.incoterms,  // Ïù∏ÏΩîÌÖÄÏ¶à
                       item.impCnt,     // ÏàòÏûÖ Í±¥Ïàò
                       formattedlmpAmt, // ÏàòÏûÖ Í∏àÏï°
                       impRate,         // ÏàòÏûÖ ÎπÑÏú®
                       item.expCnt,     // ÏàòÏ∂ú Í±¥Ïàò
                       formattedEmpAmt, // ÏàòÏ∂ú Í∏àÏï°
                       expRate          // ÏàòÏ∂ú ÎπÑÏú®
                     ];
                   });
                   
                   
                // ÌÖåÏù¥Î∏î Ìó§Îçî
    		       const header10 = [
    		    	   	[ 
    		    		    { content: 'Ïù∏ÏΩîÌÖÄÏ¶à', rowSpan: 3, border: [true, true, true, true] },  // ÏàòÎ¶¨ÏùºÏûê ÏÖÄÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
    		    		    { content: 'ÏàòÏûÖ', colSpan: 3, border: [true, true, true, true] },
    		    		    { content: 'ÏàòÏ∂ú', colSpan: 3, border: [true, true, true, true] },
    		    		  ],  // Ï≤´ Î≤àÏß∏ Ìñâ
    		    		  [
      		    		    { content: 'Ïã†Í≥†Í∏àÏï°(USD)',colSpan: 3, border: [true, true, true, true] },
      		    		    { content: 'Ïã†Í≥†Í∏àÏï°(USD)',colSpan: 3, border: [true, true, true, true] },
      		    		    
      		    		  ],
    		    		  [
    		    		    { content: 'Í±¥Ïàò', border: [true, true, true, true] },
    		    		    { content: 'Í∏àÏï°', border: [true, true, true, true] },
    		    		    { content: 'ÎπÑÏú®', border: [true, true, true, true] },
    		    		    { content: 'Í±¥Ïàò', border: [true, true, true, true] },
    		    		    { content: 'Í∏àÏï°', border: [true, true, true, true] },
    		    		    { content: 'ÎπÑÏú®', border: [true, true, true, true] },
    		    		  ]
    		    	 ];
    		       
    	            // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header10,
                	  body:datas11,
                	  startY: lastYPage8 + 29, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                        wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                        wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                        halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  0: { halign: 'center' },
                		  1: { halign: 'right' },
                		  2: { halign: 'right' },
                		  3: { halign: 'right' },
                		  4: { halign: 'right' },
                		  5: { halign: 'right' },
                		  6: { halign: 'right' }
                	  },
            		});
                	
                	lastYPage9 = doc.lastAutoTable.finalY;
                	
                    doc.setFontSize(16);
                    doc.addFont('/pf/fonts/NanumSquareB.ttf', 'NanumSquareB', 'normal');
                    doc.setFont('NanumSquareB', 'normal');
                    //doc.setTextColor(62, 113, 175); //ÌååÎûÄÏÉâ
                    doc.setTextColor(71, 140, 114); 
                    doc.text(8, lastYPage9 + 20, "11.ÏÑ∏Í¥ÄÎ≥Ñ Ïã†Í≥†Í±¥Ïàò Î∞è Í∏àÏï°");
                    
                    // Ï†úÎ™© + ÏÑ§Î™ÖÏùÑ ÎÑ£ÏùÑ ÏòÅÏó≠ÏùÑ ÎÑ§Î™®Î∞ïÏä§Î°ú Í∑∏Î¶¨Í∏∞
                    const boxMargin12 =  5;  // ÌÖåÎëêÎ¶¨ÏôÄÏùò Ïó¨Î∞±
                    const boxWidth12 = 200;  // Î∞ïÏä§Ïùò ÎÑàÎπÑ
                    const boxHeight12 = 15;  // Î∞ïÏä§Ïùò ÎÜíÏù¥ (ÏÑ§Î™Ö Ìè¨Ìï®)
                    
                    doc.setLineWidth(0.5);  // ÌÖåÎëêÎ¶¨ ÎëêÍªò ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏùÄ 0.2)
                    doc.setDrawColor(35, 69,56); 
                    doc.rect(5, lastYPage9 + 13, boxWidth12, boxHeight12, 'D'); 
                    
                    const reportData13 = data.reportData13;
                    console.log("reportData13",reportData13);
                    
                    const datas12 = [];
                    let currentGroupStartRow = 0;

                    reportData13.forEach((item, index) => {
                      const formattedCnt = Intl.NumberFormat("ko-KR").format(item.cnt);
                      const formattedTaxKrw = Intl.NumberFormat("ko-KR").format(item.taxKrw);
                      const formattedTaxSum = Intl.NumberFormat("ko-KR").format(item.taxSum);
                      const formattedTaxUsd = Intl.NumberFormat("ko-KR").format(item.taxUsd);


                      datas12.push([
                    	item.al,
                        item.cus,
                        item.cusnm,
                        formattedCnt,
                        formattedTaxUsd,
                        formattedTaxKrw,
                        formattedTaxSum,
                        item.taxRate,
                      ]);
                    });
                    
                 // ÌÖåÏù¥Î∏î Ìó§Îçî
    	            var header11 = [['Íµ¨Î∂Ñ','ÏÑ∏Í¥ÄÏΩîÎìú','ÏÑ∏Í¥ÄÎ™Ö','Ïã†Í≥†Í±¥Ïàò','Ïã†Í≥†Í∏àÏï°(USD)','Í≥ºÏÑ∏Í∞ÄÍ≤©(ÏõêÌôî)','ÎÇ©Î∂ÄÏÑ∏Ïï°','ÎπÑÏ§ë']];
                    
    	         // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header11,
                	  body:datas12,
                	  startY: lastYPage9 + 29, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                        wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                        wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                        halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  	0: { halign: 'center'},
                	        1: { halign: 'center'},
                	        2: { halign: 'center'},
                	        3: { halign: 'right'},
                	        4: { halign: 'right'},
                	        5: { halign: 'right'},
                	        6: { halign: 'right'},
                	        7: { halign: 'right'},
                	  },
                	  didParseCell: function (data) {
                		    // Îç∞Ïù¥ÌÑ∞ ÏÖÄÏù¥Í≥†, 'Ìï©Í≥Ñ'Ïù∏ Í≤ΩÏö∞
                		    if (data.section === 'body' && data.row.raw[0] === 'Ìï©Í≥Ñ') {
                		      data.cell.styles.fillColor = [246, 243, 202]; // Î∞∞Í≤Ω
              	              data.cell.styles.font = 'NanumSquareB'; // ÍµµÏùÄ Ìè∞Ìä∏ Ï†ÅÏö©
              	              data.cell.styles.fontStyle = 'bold'; // Î≥ºÎìú Ï≤òÎ¶¨
                		    }
                		  }
                		});
                	
            		/*lastYPage10 = doc.lastAutoTable.finalY;
                	
                    const reportData14 = data.reportData14;
                    console.log("reportData14",reportData14);
                    
                    let lastAl1 = null; // <-- Ïù¥ Ï§ÑÏùÑ map() Ìï®Ïàò Î∞îÍπ•Ïóê ÏÑ†Ïñ∏Ìï¥Ï§òÏïº Ìï¥
                    let rowSpanTracker1 = {};
                    let rowIndex1 = 0;
                    
                    const datas13 = reportData14.map(item => {
      	              const formattedCnt = Intl.NumberFormat("ko-KR").format(item.cnt);
      	              const formattedTaxKrw = Intl.NumberFormat("ko-KR").format(item.taxKrw);
      	              const formattedTaxSum = Intl.NumberFormat("ko-KR").format(item.taxSum);
      	              const formattedTaxUsd = Intl.NumberFormat("ko-KR").format(item.taxUsd);
      	              
      	            // rowspanÏùÑ ÏúÑÌï¥ ÌòÑÏû¨ alÏù¥ Ïù¥Ï†ÑÍ≥º Îã§Î•∏ Í≤ΩÏö∞Îßå ÌëúÏãú
      	            const showAl1 = item.al !== lastAl1;
	      	          if (showAl1) {
	      	            const sameAlCount1 = reportData13.filter(i => i.al === item.al).length;
	      	            rowSpanTracker1[rowIndex1] = { text: item.al, rowSpan: sameAlCount1 };
	      	            lastAl1 = item.al;
	      	          }
      	              
      	          const row = [
      	            item.al,                // ÎÇòÏ§ëÏóê Ïª§Ïä§ÌÖÄ Î†åÎçîÎßÅ Ìï† Ïó¥
      	            item.cus,
      	            item.cusnm,
      	            formattedCnt,
      	            formattedTaxUsd,
      	            formattedTaxKrw,
      	            formattedTaxSum,
      	            item.taxRate,
      	          ];

      	          rowIndex++;
      	          return row;
      	        });
                    
                 // ÌÖåÏù¥Î∏î Ìó§Îçî
    	            var header12 = [['Íµ¨Î∂Ñ','ÏÑ∏Í¥ÄÏΩîÎìú','ÏÑ∏Í¥ÄÎ™Ö','Ïã†Í≥†Í±¥Ïàò','Ïã†Í≥†Í∏àÏï°(USD)','Í≥ºÏÑ∏Í∞ÄÍ≤©(ÏõêÌôî)','ÎÇ©Î∂ÄÏÑ∏Ïï°','ÎπÑÏ§ë']];
                    
    	         // üü¢ ÌÖåÏù¥Î∏î Ïä§ÌÉÄÏùº Ï†ÅÏö©
                	doc.autoTable({
                	  head: header12,
                	  body:datas13,
                	  startY: lastYPage10 + 5, // ÏÑ§Î™Ö ÏïÑÎûòÏóê ÌÖåÏù¥Î∏î Î∞∞Ïπò
                	  theme: 'grid',
                	  styles: {
                	    font: 'NanumSquareR',
                	    fontSize: 7,
                	    cellPadding: 2,   // ÏÖÄ Ìå®Îî©ÏùÑ Ï§ÑÏó¨ÏÑú Ìñâ ÎÜíÏù¥ Ï§ÑÏù¥Í∏∞
                	    textColor: [0, 0, 0],
                	    valign: 'middle',
                	    overflow: 'hidden', // ÌÖçÏä§Ìä∏ Ï§ÑÎ∞îÍøàÏùÑ Î∞©ÏßÄÌïòÍ≥† ÎÑòÏπòÏßÄ ÏïäÍ≤å ÏÑ§Ï†ï
                        wordWrap: 'normal', // Ï§ÑÎ∞îÍøà Î∞©ÏßÄ (Ìïú Ï§ÑÎ°úÎßå Î≥¥Ïù¥Í≤å)
                	  },
                	  headStyles: {
                		//fillColor: [36, 83, 118], // Ìó§Îçî Î∞∞Í≤Ω (ÌååÎûÄ)
                		fillColor: [35, 69, 56], // Ìó§Îçî Î∞∞Í≤Ω (Ï¥àÎ°ù)
                	    fontSize: 8,
                	    textColor: [255, 255, 255],
                	    font: 'NanumSquareEB',
                	    fontStyle: 'bold',
                	    cellPadding: 2, // Ìó§Îçî ÎÜíÏù¥Î•º Ï§ÑÏù¥Í∏∞ ÏúÑÌï¥ Ìå®Îî©ÏùÑ Ï†ÅÍ≤å ÏÑ§Ï†ï
                	    lineWidth: 0.2, // ÌÖåÎëêÎ¶¨ ÎëêÍªò
                	    border: [true, true, true, true],  // Ìó§ÎçîÏóê ÌÖåÎëêÎ¶¨ Ï∂îÍ∞Ä
                	    overflow: 'linebreak', // Ìó§ÎçîÏùò ÌÖçÏä§Ìä∏Í∞Ä Îëê Ï§ÑÎ°ú ÎÑòÏñ¥Í∞ÄÎèÑÎ°ù ÏÑ§Ï†ï
                        wordWrap: 'break-word', // ÌÖçÏä§Ìä∏Í∞Ä ÏÖÄ ÎÑàÎπÑÎ•º ÎÑòÏñ¥ÏÑúÎ©¥ Ï§ÑÎ∞îÍøà ÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                        halign: 'center', // ÌÖçÏä§Ìä∏ Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
                	  },
                	  tableWidth: 'auto', // PDF ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å ÏûêÎèô Ï°∞Ï†ï
                	  margin: { left: 5, right: 5 }, // Ï¢åÏö∞ Í≥µÎ∞± Ï∂îÍ∞Ä
                	  columnStyles: {
                		  	0: { halign: 'center'},
                	        1: { halign: 'center'},
                	        2: { halign: 'center'},
                	        3: { halign: 'right'},
                	        4: { halign: 'right'},
                	        5: { halign: 'right'},
                	        6: { halign: 'right'},
                	        7: { halign: 'right'},
                	  },
                	  didParseCell: function (data) {
                		    if (data.section === 'body' && data.column.index === 0) {
                		      const rowSpanInfo = rowSpanTracker[data.row.index];
                		      if (rowSpanInfo) {
                		        data.cell.rowSpan = rowSpanInfo.rowSpan;
                		        data.cell.text = rowSpanInfo.text;
                		      } else {
                		        // Î≥ëÌï©Îêú ÏÖÄ ÏïÑÎûòÏ™ΩÏùÄ Ïà®ÍπÄ Ï≤òÎ¶¨
                		        data.cell.text = '';
                		      }
                		    }
                		  },
            		});*/
            	
	            	
	            setTimeout(() => {
	            	const imgData = canvas.toDataURL('image/png'); // ÏôºÏ™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§Î•º PNGÎ°ú Î≥ÄÌôò
	                const rightImgData = rightCanvas.toDataURL('image/png'); // Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ Ï∫îÎ≤ÑÏä§Î•º PNGÎ°ú Î≥ÄÌôò
	                const pdf2ImgData = pdf2canvas.toDataURL('image/png');
	                const pdf3ImgData = pdf3canvas.toDataURL('image/png');
	                const pdf4ImgData = pdf4canvas.toDataURL('image/png');
	                const pdf5ImgData = pdf5canvas.toDataURL('image/png');
	                const pdf6ImgData = pdf6canvas.toDataURL('image/png');
	                const pdf7ImgData = pdf7canvas.toDataURL('image/png');
	                const pdf8ImgData = pdf8canvas.toDataURL('image/png');
	               

	                doc.setPage(chartPage1);
	                doc.addImage(imgData, 'PNG', 25, chartY1, 60, 60);      // ÏôºÏ™Ω Ï∞®Ìä∏
	                doc.addImage(rightImgData, 'PNG', 125, chartY1, 60, 60); // Ïò§Î•∏Ï™Ω Ï∞®Ìä∏
            	    
	                doc.setPage(chartPage2);
            	    doc.addImage(pdf2ImgData, 'PNG', 15, chartY2, 180, 70); // Ï†ÑÏõî ÎåÄÎπÑ Ï∞®Ìä∏ (x, y, width, height)
            	    
            	    doc.setPage(chartPage3);
            	    doc.addImage(pdf3ImgData, 'PNG', 43, chartY3, 120, 120);
            	    
            	    doc.setPage(chartPage4);
            	   
            	    doc.addImage(pdf4ImgData, 'PNG', 55, chartY4-10,100,100);
            	    
            	    doc.setPage(chartPage5);  
            	    
            	    doc.addImage(pdf5ImgData, 'PNG', 25, chartY5+5, 60, 60); // ÏôºÏ™Ω Ï∞®Ìä∏ (x, y, width, height)
            	    doc.addImage(pdf6ImgData, 'PNG', 125, chartY5+5 , 60, 60); // Ïò§Î•∏Ï™Ω Ï∞®Ìä∏ (x, y, width, height)
            	    
            	    doc.setPage(chartPage6);
            	    
            	    doc.addImage(pdf7ImgData, 'PNG', 15, chartY6-45,180,180);
            	    
            	    doc.setPage(chartPage7);
            	   
            	    doc.addImage(pdf8ImgData, 'PNG', 15, chartY7-45,180,180);
            	    //doc.addImage(pdf7ImgData, 'PNG', 15, lastYPage6 , pdfWidth, pdfHeight);

            	    // üü¢ ÌéòÏù¥ÏßÄ Î≤àÌò∏ Ï∂îÍ∞Ä
            	    let totalPages = doc.getNumberOfPages();
            	    for (let i = 3; i <= totalPages; i++) {
            	        doc.setPage(i);
            	        doc.setFontSize(9);
            	        doc.setTextColor(0, 0, 0);
            	        doc.text(`-${i-2}-`, 105, 290, { align: "center" }); // Ï§ëÏïô Ï†ïÎ†¨
            	    }
            	    
            	    // üü¢ PDF Ï†ÄÏû•
	               doc.save(String(data.rptDate1) + 'ÎÖÑ ' + String(data.rptDate2) + 'Ïõî_' + String(data.cmpnyInfo) +'_'+'_report.pdf');
	               fn_loading(false);
				    fn_dashInfo1("02");
					fn_dashManagerInfo();
					fn_dashSrch();

	            }, 3000); // 3Ï¥à ÎîúÎ†àÏù¥ (Ï∞®Ìä∏ Î†åÎçîÎßÅ Í∏∞Îã§Î¶¨Í∏∞)
        }

        img.onerror = function() {
            console.error("Failed to load background image");
        };

	}




