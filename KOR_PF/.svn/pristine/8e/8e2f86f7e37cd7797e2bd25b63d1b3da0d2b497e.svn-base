package egovframework.pf.imp.web;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.springframework.http.ResponseEntity;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.collections.set.SynchronizedSortedSet;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.itextpdf.text.log.SysoCounter;

import egovframework.pf.cmmn.service.CmmnService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.exp.service.SaveExpFileVO;
import egovframework.pf.exp.web.ZipFileDownload;
import egovframework.pf.imp.service.ImportService;
import egovframework.pf.imp.service.CustomsImportUpdateService;
import egovframework.pf.member.utill.EmailUtill;
import egovframework.pf.util.ExcelUtil;
import egovframework.pf.util.importUpdate_ExcelUtil;
import egovframework.rte.psl.dataaccess.util.EgovMap;



@Controller
public class customsImportController {

	@Resource(name = "CmmnService")
	private CmmnService CmmnService;
	
	@Resource(name = "customsImportUpdateService")
	private CustomsImportUpdateService customsImportUpdateService;
	

	
	//타관세사 데이터 호출
	@RequestMapping(value = "/customsImport/customsImportUpdate.do")
	public String customsImportUpdate(HttpServletRequest request, Model model) throws Exception {
		return "import/customsImportUpdate";
	}
	
	
	@RequestMapping(value = "/customsImport/selectImportViewList.do")
	public ModelAndView selectImportViewList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		if(vo.getSrch1().equals("01")) {
			List<?> resultList = customsImportUpdateService.selectCustomsImportViewList(vo);
			model.addAttribute("resultList", resultList);
		}else {
			List<?> resultList = customsImportUpdateService.selectCustomsFileList(vo);
			model.addAttribute("resultList", resultList);
		}
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	@RequestMapping(value = "/customsImport/selectImportViewLanList.do")
		public ModelAndView selectImportViewLanList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
			List<?> resultList = customsImportUpdateService.selectCustomsImportViewLanList(vo);
			model.addAttribute("resultList", resultList);
			ModelAndView mav = new ModelAndView("jsonView", model);
			return mav ;
		}
	@RequestMapping(value = "/customsImport/selectImportViewSpecList.do")
	public ModelAndView selectImportViewSpecList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		List<?> resultList = customsImportUpdateService.selectCustomsImportViewSpecList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	//타관세사 데이터 업로드
	@RequestMapping(value = "/customsImport/fileUploadTemp.do")
	public Map<String,Object> fileUploadTemp (@RequestParam("files") MultipartFile[] excelFiles, HttpServletRequest request){
		HttpSession httpSession = request.getSession(true);
		UserSessionVO loginUser = (UserSessionVO) httpSession.getAttribute("USER"); //로그인정보 
		
		Map<String,Object> returnData = new HashMap<String, Object>();
		Map<String,Object> excelData = new HashMap<String, Object>();
		try {
	            excelData = ExcelUtil.excelUpload(excelFiles, loginUser);           //엑셀데이터 가공
	            System.out.println("excelData"+excelData);
	            returnData = customsImportUpdateService.insertTempExcelData(excelData, loginUser);                     //데이터 insert
	            
	            int resultCnt = customsImportUpdateService.insertTempDataUploadLog(excelData, returnData, loginUser);  //데이터 로그
	            returnData.put("fileLogId", resultCnt);

		} catch (Exception e) {
		    returnData.put("fileName", excelFiles[0].getOriginalFilename());
            returnData.put("success", '0');
            returnData.put("fail", '0');
            returnData.put("failReason", "NOT_FILE_FORMAT");
            returnData.put("fileLogId", 0);

		}
		 return new HashMap<>();
	}
	
	//데이터 삭제 
	@ResponseBody
	@RequestMapping(value = "/customsImport/deleteTempData.do", method = RequestMethod.POST)
	 public int deleteTempData (HttpServletRequest request) throws  Exception{
        Map<String, Object> loginUser = (Map<String, Object>) request.getSession().getAttribute("USER");
        return customsImportUpdateService.deleteTempData(loginUser);
    }	
	
	//view 데이터 삭제
	@ResponseBody
    @RequestMapping(value = "/customsImport/deleteImportView.do", method = RequestMethod.POST)
    public ResponseEntity<Map<String, String>> deleteImportView(@RequestBody List<SearchVO> customsData) {
		 System.out.println("222");
		 System.out.println("1"+customsData);
		 System.out.println("customsData"+customsData);
	            for (SearchVO vo : customsData) {
	                String sn = vo.getSrch1();
	                String rptNo = vo.getSrch2();
	                // 데이터 삭제 로직 수행
	                customsImportUpdateService.deleteImportView(vo);
	            }
	            Map<String, String> response = new HashMap<>();
	            response.put("status", "success");
	            return ResponseEntity.ok(response);
	    }
	
	
	}
