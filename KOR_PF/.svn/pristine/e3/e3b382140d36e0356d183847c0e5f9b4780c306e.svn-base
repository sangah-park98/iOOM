package egovframework.pf.exp.web;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Paths;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.itextpdf.text.log.SysoCounter;

import egovframework.pf.util.ExcelUtil;
import egovframework.pf.util.FileUtil;
import egovframework.pf.util.importUpdate_ExcelUtil;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.exp.service.CustomsExportUpdateService;
import egovframework.pf.exp.service.SaveExpFileVO;
import egovframework.pf.exp.service.SaveExpMainVO;
import egovframework.pf.exp.service.pfExportService;
import egovframework.pf.imp.service.CustomsImportUpdateService;
import egovframework.pf.imp.service.ImportService;
import egovframework.pf.member.utill.EmailUtill;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import net.sf.jasperreports.export.SimpleXlsReportConfiguration;


@Controller
public class CustomsExportController {

	@Resource(name = "pfExportService")
	private pfExportService pfexportService;
	
	@Resource(name = "customsExportUpdateService")
	private CustomsExportUpdateService customsExportUpdateService;
	
	
	@RequestMapping(value = "/customsExport/customsExportUpdate.do")
	public String exportIn(HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		model.addAttribute("corpNos", userVO.getCorpNos());
		return "export/customsExportUpdate";
	}
	
	//타관세사 데이터 업로드
		@RequestMapping(value = "/customsExport/fileUpload.do")
		public Map<String,Object> fileUploadTemp (@RequestParam("files") MultipartFile[] excelFiles, HttpServletRequest request){
			HttpSession httpSession = request.getSession(true);
			UserSessionVO loginUser = (UserSessionVO) httpSession.getAttribute("USER"); //로그인정보 
			
			Map<String,Object> returnData = new HashMap<String, Object>();
			Map<String,Object> excelData = new HashMap<String, Object>();
			try {
		            excelData = ExcelUtil.excelUpload(excelFiles, loginUser);           //엑셀데이터 가공
		            System.out.println("excelData"+excelData);
		            returnData = customsExportUpdateService.insertExportTempExcelData(excelData, loginUser);                     //데이터 insert
		            
		            int resultCnt = customsExportUpdateService.insertExportTempDataUploadLog(excelData, returnData, loginUser);  //데이터 로그
		            returnData.put("fileLogId", resultCnt);

			} catch (Exception e) {
			    returnData.put("fileName", excelFiles[0].getOriginalFilename());
	            returnData.put("success", '0');
	            returnData.put("fail", '0');
	            returnData.put("failReason", "NOT_FILE_FORMAT");
	            returnData.put("fileLogId", 0);

			}
			 return new HashMap<>();
		}
	//데이터 삭제
		@ResponseBody
		@RequestMapping(value = "/customsExport/deleteTempData.do", method = RequestMethod.POST)
		 public int deleteTempData (HttpServletRequest request) throws  Exception{
	        Map<String, Object> loginUser = (Map<String, Object>) request.getSession().getAttribute("USER");
	        return customsExportUpdateService.deleteTempData(loginUser);
	    }
	// 타관세사 데이터(수출) 리스트 
	@RequestMapping(value = "/customsExport/selectExportViewList.do")
	public ModelAndView selectExportViewList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request,
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		if(vo.getSrch1().equals("01")) {
			List<?> resultList = customsExportUpdateService.selectCustomsExportViewList(vo);
			model.addAttribute("resultList", resultList);
		}else {
			List<?> resultList = customsExportUpdateService.selectCustomsFileList(vo);
			model.addAttribute("resultList", resultList);
		}
		
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	//타관세사 데이터(수출) 란 리스트 
	@RequestMapping(value = "/customsExport/selectExportViewLanList.do")
	public ModelAndView selectExportViewLanList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request,
			ModelMap model) throws Exception {
		List<?> resultList = customsExportUpdateService.selectExportViewLanList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	//타관세사 데이터(수출) 규격 리스트 
	@RequestMapping(value = "/customsExport/selectExportViewSpecList.do")
	public ModelAndView selectExportViewSpecList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request,
			ModelMap model) throws Exception {
		List<?> resultList = customsExportUpdateService.selectExportViewSpecList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	//view 데이터 삭제
	@ResponseBody
    @RequestMapping(value = "/customsExport/deleteExportView.do", method = RequestMethod.POST)
    public ResponseEntity<Map<String, String>> deleteImportView(@RequestBody List<SearchVO> customsData) {
		 System.out.println("222");
		 System.out.println("1"+customsData);
		 System.out.println("customsData"+customsData);
	            for (SearchVO vo : customsData) {
	                String sn = vo.getSrch1();
	                String rptNo = vo.getSrch2();
	                // 데이터 삭제 로직 수행
	                customsExportUpdateService.deleteExportView(vo);
	            }
	            Map<String, String> response = new HashMap<>();
	            response.put("status", "success");
	            return ResponseEntity.ok(response);
	    }

	
}
