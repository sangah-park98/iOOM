package egovframework.pf.rpt.service.web;

import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import egovframework.pf.cmmn.service.CmmnService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.rpt.service.KPIService;
import egovframework.pf.util.ExcelUtil;
import egovframework.rte.psl.dataaccess.util.EgovMap;

/**
 * @Class Name : KPIController.java
 * @Description : KPI 컨트롤러
 * @Modification Information
 * @
 * @  수정일          			 수정자              			 수정내용
 * @ ---------        ----------     -------------------------------
 * @ 2024.04.02			이재성              				 최초생성
 *
 * @author 이재성
 * @since 2024.04.02
 * @version 1.0
 * @see
 *
 *  Copyright (C) by MOPAS All right reserved.
 */

@Controller
public class KPIController {
	private static final Logger log = LoggerFactory.getLogger(KPIController.class);

	@Resource(name = "CmmnService")
	private CmmnService CmmnService;
	
	@Resource(name = "kpiService")
	private KPIService kpiService;
	
	// kpi 화면 호출
	@RequestMapping(value = "/rpt/kpi.do")
	public String kipView(HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		model.addAttribute("writable","Y".equals(userVO.getAdminYn())?"Y":CmmnService.selectWriteCheck(request.getServletPath(), userVO));
		SearchVO vo = new SearchVO();
		String lang = userVO.getLang();
		vo.setLang(lang);
		vo.setCmpnyCd(userVO.getCmpnyCd());
		model.addAttribute("lang", lang);
		model.addAttribute("userCmpnyCd", userVO.getCmpnyCd());
			
		return "rpt/kpi";
	}
	
	// 수입 정확성 관리 조회
	@RequestMapping(value = "/rpt/kpiImport.do")
	public ModelAndView selectKpiImportList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());      
	    vo.setList(userVO.getCorpNos());
		List<?> resultList = null;
	    int totCnt = 0;
	    
	    resultList = kpiService.selectKpiImportList(vo);
		
	    ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		                                                
		return mav;                                     
	}
	
	// 수출 정확성 관리 조회
	@RequestMapping(value = "/rpt/kpiExport.do")
	public ModelAndView selectKpiExportList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());      
		vo.setList(userVO.getCorpNos());		
		List<?> resultList = null;
	    int totCnt = 0;
	    
	    resultList = kpiService.selectKpiExportList(vo);
		
	    ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		                                                
		return mav;                                     
	}
	
	// Leadtime 조회
	@RequestMapping(value = "/rpt/kpiLeadtime.do")
	public ModelAndView selectKpiLeadtimeList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());      
	    vo.setList(userVO.getCorpNos());
		List<?> resultList = null;
	    int totCnt = 0;
	    
	    resultList = kpiService.selectKpiLeadtimeList(vo);
	    
	    for(Object obj : resultList) {
	    	EgovMap map = (EgovMap)obj;
	    	JsonNode callApi = null;
	    	
	    	try {
	    		map.put("arrDay", '-');
	    		map.put("incDay", '-');
	    		map.put("banChulDay", '-');
	    		map.put("bosuPetDay", '-');
	    		map.put("bosuComDay", '-');
	    		map.put("rcDay", '-');
	    		map.put("lisDay2", '-');
	    		
	    		map.put("diff1", '-');
	    		map.put("diff2", '-');
	    		map.put("diff3", '-');
	    		map.put("diff4", '-');
	    		map.put("diff5", '-');
	    		map.put("diff6", '-');
	    		
    			callApi = callApi((String) map.get("cargMtNo")); 
    			
    			if(callApi == null) {
    				continue;
    			}
    			
    			if(callApi != null || !callApi.isEmpty()) {
    				JsonNode cargCsclPrgsInfoDtlQryVoArr = callApi.get("cargCsclPrgsInfoDtlQryVo");
    				
    				String arrDay = "";
    				String incDay = "";
    				String bosuPetDay = "";
    				String bosuComDay = "";
    				String rcDay = "";
    				String banChulDay = "";
    				String lisDay2 = "";
    				
    				if(cargCsclPrgsInfoDtlQryVoArr.isArray()) {
    					for(JsonNode cargCsclPrgsInfoDtlQryVo :  cargCsclPrgsInfoDtlQryVoArr) {
    						String rlbrCn = cargCsclPrgsInfoDtlQryVo.get("rlbrCn").toString().replaceAll("\"", "");
    						String cargTrcnRelaBsopTpcd = cargCsclPrgsInfoDtlQryVo.get("cargTrcnRelaBsopTpcd").toString().replaceAll("\"", "");
    						
    						switch (rlbrCn) {
//    						arrDay(입항일시): rlbrCn 이 "입항 반입"인 것의 rlbrDttm(반출입 일시) --> cargTrcnRelaBsopTpcd 이 "입항보고 수리"인 것의 prcsDttm(처리일시)
//    						case "입항 반입": // 입항일자
//    							arrDay = cargCsclPrgsInfoDtlQryVo.get("rlbrDttm").toString();
//    							arrDay = arrDay.replaceAll("[^0-9]","");
//    							break;
//    						incDay(반입일시): rlbrCn 이 "보세운송 반입"인 것의 rlbrDttm(반출입 일시) --> cargTrcnRelaBsopTpcd 이 "반입신고"인 것의 rlbrDttm(처리일시) 
//    						case "보세운송 반입": // 반입일자
//    							if(incDay.isEmpty()) // 최종 반입일자만 처리
//    							{
//        							incDay = cargCsclPrgsInfoDtlQryVo.get("rlbrDttm").toString();
//        							incDay = incDay.replaceAll("[^0-9]","");    								
//    							}
//    							break;
    						case "수입신고 수리후 반출": // 반출일자
    							banChulDay = cargCsclPrgsInfoDtlQryVo.get("rlbrDttm").toString();
    							banChulDay = banChulDay.replaceAll("[^0-9]","");
    							break;
    						}
    						
    						switch (cargTrcnRelaBsopTpcd) {
    						case "입항보고 수리": // 입항일시
    							arrDay = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
    							arrDay = arrDay.replaceAll("[^0-9]","");
    							break;
    						case "반입신고": // 반입일시
    							if(incDay.isEmpty()) // 최종 반입일자만 처리
    							{
	    							incDay = cargCsclPrgsInfoDtlQryVo.get("rlbrDttm").toString();
	    							incDay = incDay.replaceAll("[^0-9]","");
    							}
    							break;
    						case "보수작업 승인": // 보수승일일자
    							bosuPetDay = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
    							bosuPetDay = bosuPetDay.replaceAll("[^0-9]","");
    							break;
    						case "보수작업 완료보고 확인": // 보수완료일자
    							bosuComDay = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
    							bosuComDay = bosuComDay.replaceAll("[^0-9]","");
    							break;
    						case "수입신고": // 접수일자(신고일시)
    							rcDay = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
    							rcDay = rcDay.replaceAll("[^0-9]","");
    							break;
//    						case "수입신고수리": // 수리일자 --> contains 로 변경
//    							lisDay2 = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
//    							lisDay2 = lisDay2.replaceAll("[^0-9]","");
//    							break;
    						}
    						if(cargTrcnRelaBsopTpcd.contains("수입신고수리"))
    						{
    							lisDay2 = cargCsclPrgsInfoDtlQryVo.get("prcsDttm").toString();
    							lisDay2 = lisDay2.replaceAll("[^0-9]","");
    						}
    					}
    				}
    				
    				map.put("arrDay", dateFormat(arrDay));
    				map.put("incDay", dateFormat(incDay));
    				map.put("banChulDay", dateFormat(banChulDay));
    				map.put("bosuPetDay", dateFormat(bosuPetDay));
    				map.put("bosuComDay", dateFormat(bosuComDay));
    				map.put("rcDay", dateFormat(rcDay));
    				map.put("lisDay2", dateFormat(lisDay2));
    				
    				map.put("diff1", diffDate(incDay, arrDay));
    				map.put("diff2", diffDate(bosuPetDay, incDay));
    				map.put("diff3", diffDate(bosuComDay, bosuPetDay));
    				map.put("diff4", diffDate(rcDay, bosuComDay));
    				map.put("diff5", diffDate(lisDay2, rcDay));
    				map.put("diff6", diffDate(banChulDay, lisDay2));
    				map.put("diff7", diffDate(rcDay, incDay));
    				
    			}
			} catch (Exception e) {
				log.error(e.getMessage());
	    		continue;
			}
	    	
	    }
	    ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		
		return mav;                                     
	}
	
	@RequestMapping(value = "/kpi/downloadExcel.do")
	public ModelAndView downloadExcel(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());      
		vo.setCorpNo(userVO.getCorpNo());
		vo.setRecordCountPerPage(99999999);
		vo.setStartPage(0);
		
		XSSFWorkbook workBook = null;
		String fileName = "";
		
		ModelAndView mv = new ModelAndView("jsonView");
		ModelAndView dataMv = new ModelAndView();
		String resultCode="200";
	    
		try {
			if("import".equals(vo.getExType())) {
				dataMv = this.selectKpiImportList(vo, request, new ModelMap());
				List<?> reslutList = (List<?>) dataMv.getModel().get("resultList"); 
				workBook = new XSSFWorkbook();
				
				XSSFSheet sheet = ExcelUtil.createSheetWithTitleRow(workBook, "수입 정확성 관리", vo.getExCol().split("\\|\\|").length);
				sheet = ExcelUtil.createMainTable(sheet, reslutList, vo);
				
				fileName = " 수입정확성관리";
			}else if("export".equals(vo.getExType())) {
				dataMv = this.selectKpiExportList(vo, request, new ModelMap());
				List<?> reslutList = (List<?>) dataMv.getModel().get("resultList"); 
				workBook = new XSSFWorkbook();
				
				XSSFSheet sheet = ExcelUtil.createSheetWithTitleRow(workBook, "수출 정확성 관리", vo.getExCol().split("\\|\\|").length);
				ArrayList<String> conts = new ArrayList<String>();
				sheet = ExcelUtil.createMainTable(sheet, reslutList, vo);
				
				fileName = " 수출확성관리";
			}else if("leadtime".equals(vo.getExType())) {
				dataMv = this.selectKpiLeadtimeList(vo, request, new ModelMap());
				List<?> reslutList = (List<?>) dataMv.getModel().get("resultList"); 
				workBook = new XSSFWorkbook();
				
				XSSFSheet sheet = ExcelUtil.createSheetWithTitleRow(workBook, "수입신고 Lead-Time", vo.getExCol().split("\\|\\|").length);
				sheet = ExcelUtil.createMainTable(sheet, reslutList, vo);
				
				fileName = " 수입신고LeadTime";
			}
			
			// cell 너비 조정 및 하단 타임 스탬프
			int sheetCnt = workBook.getNumberOfSheets();
			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date now = new Date();         
			String nowTime = sdf1.format(now);
			
			for(int i=0; i < sheetCnt; i++) {
				XSSFSheet tempSheet = workBook.getSheetAt(i);
				int cellCnt = tempSheet.getPhysicalNumberOfRows();
				
				for(int j=1; j < cellCnt; j++) {
					tempSheet.autoSizeColumn(j);
				}
				
				tempSheet.createRow(tempSheet.getLastRowNum() +1);
				XSSFRow row = tempSheet.createRow(tempSheet.getLastRowNum() +1);
				XSSFCell cell = row.createCell(0);
				cell.setCellValue(nowTime);
			}
			
			ExcelUtil.generateExcelFile(workBook, userVO.getCmpnyCd().concat(fileName), response);
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		mv.addObject("resultCode", resultCode);
		return mv;
	}
	
	
	private JsonNode callApi(String cargMtNo) throws Exception {
		if(cargMtNo == null || "".equals(cargMtNo)) {
			return null;
		}
		
		try {
			// 헤더설정
			HttpHeaders headers = new HttpHeaders();
			headers.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML_VALUE + ";charset=UTF-8");
			
			URI uri = UriComponentsBuilder.fromHttpUrl("https://unipass.customs.go.kr:38010/ext/rest/cargCsclPrgsInfoQry/retrieveCargCsclPrgsInfo")
					.queryParam("crkyCn", "p240e234w064g101l050r050p0")
					.queryParam("cargMtNo", cargMtNo)
					.build()
					.encode("UTF-8")
					.toUri();	
			
			HttpComponentsClientHttpRequestFactory httpRequestFactory = new HttpComponentsClientHttpRequestFactory();
	        httpRequestFactory.setConnectTimeout(5000);
	        httpRequestFactory.setReadTimeout(5000);
	        
	        HttpClient httpClient = HttpClientBuilder.create()
	                .setMaxConnTotal(200)
	                .setMaxConnPerRoute(20)
	                .build();
	        
	        //Rest template setting
	        RestTemplate restTpl = new RestTemplate(httpRequestFactory);
	        HttpEntity entity = new HttpEntity<>(headers); // http entity에 header 담아줌
			
	        restTpl.getMessageConverters().add(0, new StringHttpMessageConverter(StandardCharsets.UTF_8));
	        
	        log.debug("call api :: {}", uri.toString()) ;
	        ResponseEntity<String>  responseEntity = restTpl.exchange(uri.toString(), HttpMethod.GET, entity, String.class);
	        
	        if(responseEntity.getStatusCodeValue() == 200) {
	        	XmlMapper xmlMapper = new XmlMapper();
	        	String str = responseEntity.getBody().toString();
	        	JsonNode node = xmlMapper.readValue(str, new TypeReference<JsonNode>() { });
	        	String tCnt = node.get("tCnt").toString().replaceAll("\"", "");
	        	
	        	if("-1".equals(tCnt)) {
		        	throw new Exception("Reulst Cnt -1  :: ".concat(cargMtNo));
	        	}
	        	
	        	return node;
	        } else {
	        	log.debug("StatusCodeValue :: {}", responseEntity.getStatusCodeValue());
	        	throw new Exception("Call unipass ERROR!!");
	        }
		} catch (Exception e) {
			throw e;
		}
	}
	
	private String diffDate(String dStr1, String dStr2) {
		if(StringUtils.isEmpty(dStr1) || StringUtils.isEmpty(dStr2)) {
			return "-";
		}
	    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
	    
	    try {
	    	Date date1 = formatter.parse(dStr1);
	 	    Date date2 = formatter.parse(dStr2);
	 	    
	 	    long diffMin = ((date1.getTime() - date2.getTime())) / (60 * 1000L) % 60; //분 차이
	 	    long diffHor = ((date1.getTime() - date2.getTime())) / (60 * 60 * 1000L) % 24; //시 차이
	 	    long diffDays = ((date1.getTime() - date2.getTime())) / (24 * 60 * 60 * 1000L) % 24; //일 차이
	 	    
	 	    String formatString = String.format("%d일 %d시 %d분", diffDays, diffHor, diffMin);
//	 	    return "0일 0시 0분".equals(formatString) ? "-" : formatString;
	 	    return formatString;
		} catch (Exception e) {
			return "ERROR";
		}
	}
	
	private String dateFormat(String dStr) {
		if(StringUtils.isEmpty(dStr)) {
			return "-";
		}
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		
		try {
			Date date = formatter.parse(dStr);
			formatter.applyPattern("yyyy-MM-dd HH:mm");
		    return formatter.format(date);
		} catch (Exception e) {
			return "ERROR";
		}
	}
}