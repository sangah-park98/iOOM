package egovframework.pf.docu.web;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.nio.file.Paths;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import egovframework.pf.cmmn.service.CmmnService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.docu.service.SaveDocuFileVO;
import egovframework.pf.docu.service.pfDocumentService;
import egovframework.pf.exp.service.SaveExpFileVO;
import egovframework.pf.exp.web.ZipDocuFileDownload;
import egovframework.pf.exp.web.ZipFileDownload;
import egovframework.pf.exp.web.ExportController.CIRequest;
import egovframework.pf.util.FileUtil;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import net.sf.jasperreports.engine.DefaultJasperReportsContext;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperReportsContext;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JRPrintPage;
import net.sf.jasperreports.engine.JRPropertiesUtil;

@Controller
public class DocumentController {

	@Resource(name = "CmmnService")
	private CmmnService CmmnService;
	
	@Resource(name = "pfDocumentService")
	private pfDocumentService pfdocumentService;
	
	@Resource(name = "fileProperties")
	private Properties fileProperties;
	
	private Connection conn;
	
	@RequestMapping(value = "/docu/documentView.do")
	public String documentView(HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		SearchVO vo = new SearchVO();
		vo.setLang(userVO.getLang());
		vo.setSrch2("document");
		List<?> msgList = CmmnService.selectMsgList(vo);
		for(int i=0; i<msgList.size(); i++) {
			EgovMap map = (EgovMap)msgList.get(i);
			model.addAttribute((String)map.get("msgId"), map.get("msgNm"));
		}
		model.addAttribute("corpNos", userVO.getCorpNos());
		return "document/documentView";
	}
	
	@RequestMapping(value = "/document/selectDocumentImpViewList.do", method = RequestMethod.POST)
	public ModelAndView selectDocumentImpViewList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
	    HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = pfdocumentService.selectDocumentImpViewList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    return mav;
	}
	
	@RequestMapping(value = "/document/selectDocumentExpViewList.do", method = RequestMethod.POST)
	public ModelAndView selectDocumentExpViewList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = pfdocumentService.selectDocumentExpViewList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		return mav;
	}
	
	@RequestMapping(value = "/document/selectDocuImpModalUpdateList.do")
	public ModelAndView selectDocuImpModalUpdateList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());
		
		List<?> resultList = pfdocumentService.selectDocuImpModalUpdateList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    return mav;
	}
	
	@RequestMapping(value = "/document/selectDocuExpModalUpdateList.do")
	public ModelAndView selectDocuExpModalUpdateList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());
		
		List<?> resultList = pfdocumentService.selectDocuExpModalUpdateList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    return mav;
	}
	

	@RequestMapping(value = "/document/createMthTaxBillPdf.do", method = RequestMethod.POST)
	public ResponseEntity<String> createMthTaxBillPdf(@RequestBody mthTaxBillVO bvo,
	                                                  HttpServletRequest request,
	                                                  HttpServletResponse response,
	                                                  HttpSession session) throws Exception {

		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");

		Map<String, Object> parameters = new HashMap<>();
		String nabSdNo = userVO.getCorpNo();
		String reportName = "";
		List<JasperPrint> allPrint = new ArrayList<>();
		String rptNo = bvo.getRptNo();

		JasperReport jasperReport;
		JasperPrint jasperPrint = null;

		String ul = request.getServletContext().getRealPath("");
		String savePath = null;

		if (System.getProperty("os.name").toLowerCase().contains("win")) {
		    savePath = "C:\\home\\files\\" + rptNo + ".pdf";  // Windows 환경
		}

		// 파일 저장 경로가 없으면 디렉터리 생성
		File dir = new File(savePath).getParentFile();
		if (!dir.exists()) {
		    dir.mkdirs();
		}

		int totCnt = pfdocumentService.selectMthTaxBillCnt(rptNo);
		int pageSize = 25;
		int totalPages = (int) Math.ceil((double) totCnt / pageSize);  // 전체 페이지 수

		try {
		    List<String> annexList = new ArrayList<>();
		    annexList.add("mthTaxBill");

		    for (int i = 1; i <= totalPages; i++) {
		        int offset = (i - 1) * pageSize;
		        parameters.put("i_prm1", rptNo);
		        parameters.put("i_prm2", nabSdNo);
		        parameters.put("i_prm3", ul);
		        parameters.put("i_prm4", offset);

		        for (String annex : annexList) {
		        	System.out.println(parameters);
		            reportName = annex;
		            String reportPath = ul + "/templet/" + reportName + ".jrxml";
		            JasperDesign jasperd = JRXmlLoader.load(reportPath);
		            jasperReport = JasperCompileManager.compileReport(jasperd);

		            BeanFactory factory = new XmlBeanFactory(new ClassPathResource("egovframework/spring/context-datasource.xml"));
		            DataSource ds = (DataSource) factory.getBean("dataSource");
		            Connection conn = ds.getConnection();

		            jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap<>(parameters), conn);
		            allPrint.add(jasperPrint);
		        }
		    }
		} catch (Exception e) {
		    e.printStackTrace();
		    return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
		}

		// PDF Export
		try {
		    JRPdfExporter exporter = new JRPdfExporter();
		    exporter.setExporterInput(SimpleExporterInput.getInstance(allPrint));
		    exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(savePath));
		    exporter.exportReport();
		} catch (Exception e) {
		    e.printStackTrace();
		    return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return new ResponseEntity<>("success", HttpStatus.OK);
	}
	
	@RequestMapping(value = "/document/createPaymentBillPdf.do", method = RequestMethod.POST)
	public ResponseEntity<String> createPaymentBillPdf(@RequestBody mthTaxBillVO bvo,
	                                                  HttpServletRequest request,
	                                                  HttpServletResponse response,
	                                                  HttpSession session) throws Exception {

		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		Map<String, Object> parameters = new HashMap<>();
		String nabSdNo = userVO.getCorpNo();
		String reportName = "";
		String rptNo = bvo.getRptNo();
		String blNo = bvo.getBlNo();

		List<JasperPrint> allPrint = new ArrayList<>();
		JasperReport jasperReport;
		JasperPrint jasperPrint = null;

		String ul = request.getServletContext().getRealPath("");
		String savePath = null;
		if (System.getProperty("os.name").toLowerCase().contains("win")) {
		    savePath = "C:\\home\\files\\" + rptNo + ".pdf";
		}
		File dir = new File(savePath).getParentFile();
		if (!dir.exists()) {
		    dir.mkdirs();
		}

		try {
		    List<String> annexList = new ArrayList<>();
		    annexList.add("paymentBill");

	        parameters.put("i_prm1", blNo);
	        parameters.put("i_prm2", rptNo);
	        parameters.put("i_prm4", ul);
	        parameters.put("i_prm3", nabSdNo);

	        for (String annex : annexList) {
	        	System.out.println(parameters);
	            reportName = annex;
	            String reportPath = ul + "/templet/" + reportName + ".jrxml";
	            JasperDesign jasperd = JRXmlLoader.load(reportPath);
	            jasperReport = JasperCompileManager.compileReport(jasperd);

	            BeanFactory factory = new XmlBeanFactory(new ClassPathResource("egovframework/spring/context-datasource.xml"));
	            DataSource ds = (DataSource) factory.getBean("dataSource");
	            Connection conn = ds.getConnection();

	            jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap<>(parameters), conn);
	            allPrint.add(jasperPrint);
	        }
		} catch (Exception e) {
		    e.printStackTrace();
		    return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
		}

		// PDF Export
		try {
		    JRPdfExporter exporter = new JRPdfExporter();
		    exporter.setExporterInput(SimpleExporterInput.getInstance(allPrint));
		    exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(savePath));
		    exporter.exportReport();
		} catch (Exception e) {
		    e.printStackTrace();
		    return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return new ResponseEntity<>("success", HttpStatus.OK);
	}
	
	@RequestMapping(value = "/document/createIndivTaxBillPdf.do", method = RequestMethod.POST)
	public ResponseEntity<String> createIndivTaxBillPdf(@RequestBody mthTaxBillVO bvo,
			HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session) throws Exception {
		
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		Map<String, Object> parameters = new HashMap<>();
		String nabSdNo = userVO.getCorpNo();
		String reportName = "";
		String rptNo = bvo.getRptNo();
		String blNo = bvo.getBlNo();
		
		List<JasperPrint> allPrint = new ArrayList<>();
		JasperReport jasperReport;
		JasperPrint jasperPrint = null;
		
		String ul = request.getServletContext().getRealPath("");
		String savePath = null;
		if (System.getProperty("os.name").toLowerCase().contains("win")) {
			savePath = "C:\\home\\files\\" + rptNo + ".pdf";
		}
		File dir = new File(savePath).getParentFile();
		if (!dir.exists()) {
			dir.mkdirs();
		}
		
		int totCnt = pfdocumentService.selectIndivTaxBillCnt(rptNo);
		if (totCnt == 0) {
		    return new ResponseEntity<>("fail", HttpStatus.OK);
		}
		for (int i = 1; i <= totCnt; i++) {
			try {
				List<String> annexList = new ArrayList<>();
				annexList.add("indivTaxBill");
				
				parameters.put("i_prm1", blNo);
				parameters.put("i_prm2", rptNo);
				parameters.put("i_prm3", nabSdNo);
				
				for (String annex : annexList) {
					System.out.println(parameters);
					reportName = annex;
					String reportPath = ul + "/templet/" + reportName + ".jrxml";
					JasperDesign jasperd = JRXmlLoader.load(reportPath);
					jasperReport = JasperCompileManager.compileReport(jasperd);
					
					BeanFactory factory = new XmlBeanFactory(new ClassPathResource("egovframework/spring/context-datasource.xml"));
					DataSource ds = (DataSource) factory.getBean("dataSource");
					Connection conn = ds.getConnection();
					
					jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap<>(parameters), conn);
					allPrint.add(jasperPrint);
				}
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		// PDF Export
		try {
			JRPdfExporter exporter = new JRPdfExporter();
			exporter.setExporterInput(SimpleExporterInput.getInstance(allPrint));
			exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(savePath));
			exporter.exportReport();
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>("fail", HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return new ResponseEntity<>("success", HttpStatus.OK);
	}

	public static class mthTaxBillVO {
	    private String rptNo;
	    private String blNo;
	    private String nabFirm;
	    
		public String getRptNo() {
			return rptNo;
		}
		public void setRptNo(String rptNo) {
			this.rptNo = rptNo;
		}
		public String getBlNo() {
			return blNo;
		}
		public void setBlNo(String blNo) {
			this.blNo = blNo;
		}
		public String getNabFirm() {
			return nabFirm;
		}
		public void setNabFirm(String nabFirm) {
			this.nabFirm = nabFirm;
		}
	}
	
	@RequestMapping(value = "/document/insertDocuFilesInfo.do")
	public ModelAndView insertDocuFilesInfo(
					@RequestParam("fileBL[]") MultipartFile[] filesBl,
					@RequestParam("fileDC[]") MultipartFile[] filesDc,
					@RequestParam("fileUC[]") MultipartFile[] filesUc,
					@RequestParam("fileCI[]") MultipartFile[] filesCi,
					@RequestParam("filePL[]") MultipartFile[] filesPl,
					@RequestParam("fileCO[]") MultipartFile[] filesCo,
					@RequestParam("fileRQ[]") MultipartFile[] filesRq,
					@RequestParam("fileAC[]") MultipartFile[] filesAc,
					@RequestParam("fileCB[]") MultipartFile[] filesCb,
					@RequestParam("fileOT[]") MultipartFile[] filesOt,
					@RequestParam("docuRptNo") String docuRptNo,
					@RequestParam("docuType") String docuType,
					@RequestParam("docuBlNo") String docuBlNo,
					@RequestParam("docuInvoiceNo") String docuInvoiceNo,
					 HttpServletRequest request, ModelMap model
		) throws Exception {
		
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		System.out.println("docuBlNo: " + docuBlNo);
		String cmpnyCd = userVO.getCmpnyCd();
		String regId = userVO.getId();
		if (docuType.equals("02")) { // imp
		
			for (MultipartFile file : filesBl) {
				  
				System.out.println("Received file Bl: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("BL");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
		    }
			
			for (MultipartFile file : filesDc) {
				
				System.out.println("Received file Dc: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("DC");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
			}
			
			for (MultipartFile file : filesUc) {
				  
				System.out.println("Received file Uc: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("UC");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
		    }
			
			for (MultipartFile file : filesCi) {
			    System.out.println("Received file In: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("CI");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
			 }
			
			 for (MultipartFile file : filesPl) {
			    System.out.println("Received file Pl: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("PL");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
			 }
			 
			 for (MultipartFile file : filesCo) {
			    System.out.println("Received file Re: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("CO");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setBlNo(docuBlNo);
				
				pfdocumentService.insertImpDocuFilesInfo(vo);
			 } 
			 
			 for (MultipartFile file : filesRq) {
			     System.out.println("Received file Rq: " + file.getOriginalFilename());
			     String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				
				 vo.setOrgFileName(name);
				 vo.setDocuType("RQ");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setBlNo(docuBlNo);
				 
				 pfdocumentService.insertImpDocuFilesInfo(vo);
			  }
			 for (MultipartFile file : filesCb) {
				 System.out.println("Received file Cb: " + file.getOriginalFilename());
				 String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				 
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				 
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				 
				 vo.setOrgFileName(name);
				 vo.setDocuType("CB");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setBlNo(docuBlNo);
				 
				 pfdocumentService.insertImpDocuFilesInfo(vo);
			 }
			 for (MultipartFile file : filesOt) {
				 System.out.println("Received file Rq: " + file.getOriginalFilename());
				 String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				 
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				 
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				 
				 vo.setOrgFileName(name);
				 vo.setDocuType("OT");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setBlNo(docuBlNo);
				 
				 pfdocumentService.insertImpDocuFilesInfo(vo);
			 }
	
			  for (MultipartFile file : filesAc) {
			     System.out.println("Received file Ac: " + file.getOriginalFilename());
			     String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				
				 vo.setOrgFileName(name);
				 vo.setDocuType("AC");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setBlNo(docuBlNo);
				
				 pfdocumentService.insertImpDocuFilesInfo(vo);
			  }
			  
		} else if(docuType.equals("03")) { // exp
			for (MultipartFile file : filesBl) {
				System.out.println("exp_Bl: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("BL");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
		    }
			
			for (MultipartFile file : filesDc) {
				
				System.out.println("exp_Dc: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("DC");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
			}
			
			for (MultipartFile file : filesUc) {
				
				System.out.println("exp_Uc: " + file.getOriginalFilename());
				String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("UC");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
			}
			
			for (MultipartFile file : filesCi) {
			    System.out.println("exp_In: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("CI");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
			 }
			
			 for (MultipartFile file : filesPl) {
			    System.out.println("exp_Pl: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("PL");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
			 }
			 
			 for (MultipartFile file : filesCo) {
			    System.out.println("exp_Re: " + file.getOriginalFilename());
			    String name = file.getOriginalFilename();
				String fileName = UUID.randomUUID().toString();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveDocuFileVO vo = new SaveDocuFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(name);
				vo.setDocuType("CO");
				vo.setFileName(fileName);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				vo.setRptNo(docuRptNo);
				vo.setInvoiceNo(docuInvoiceNo);
				
				pfdocumentService.insertExpDocuFilesInfo(vo);
			 } 
			 
			 for (MultipartFile file : filesRq) {
			     System.out.println("exp_Rq: " + file.getOriginalFilename());
			     String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				
				 vo.setOrgFileName(name);
				 vo.setDocuType("RQ");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setInvoiceNo(docuInvoiceNo);
				 
				 pfdocumentService.insertExpDocuFilesInfo(vo);
			  }
			 for (MultipartFile file : filesCb) {
				 System.out.println("exp_Cb: " + file.getOriginalFilename());
				 String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				 
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				 
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				 
				 vo.setOrgFileName(name);
				 vo.setDocuType("CB");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setInvoiceNo(docuInvoiceNo);
				 
				 pfdocumentService.insertExpDocuFilesInfo(vo);
			 }
			 for (MultipartFile file : filesOt) {
				 System.out.println("exp_Rq: " + file.getOriginalFilename());
				 String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				 
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				 
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				 
				 vo.setOrgFileName(name);
				 vo.setDocuType("OT");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setInvoiceNo(docuInvoiceNo);
				 
				 pfdocumentService.insertExpDocuFilesInfo(vo);
			 }
	
			  for (MultipartFile file : filesAc) {
			     System.out.println("exp_Ac: " + file.getOriginalFilename());
			     String name = file.getOriginalFilename();
				 String fileName = UUID.randomUUID().toString();
				 String directory = "/home/files";
				 String filepath = Paths.get(directory, fileName).toString();
				 BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				 stream.write(file.getBytes());
				 stream.close();
				
				 SaveDocuFileVO vo = new SaveDocuFileVO();
				
				 SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				 Calendar date = Calendar.getInstance();
				 String uploadDt = sdf.format(date.getTime());
				 SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				 Calendar date2 = Calendar.getInstance();
				 String regDt = sdf2.format(date2.getTime());
				
				 vo.setOrgFileName(name);
				 vo.setDocuType("AC");
				 vo.setFileName(fileName);
				 vo.setUploadDt(uploadDt);
				 vo.setRegDt(regDt);
				 vo.setRegId(regId);
				 vo.setCmpnyCd(cmpnyCd);
				 vo.setRptNo(docuRptNo);
				 vo.setInvoiceNo(docuInvoiceNo);
				
				 pfdocumentService.insertExpDocuFilesInfo(vo);
			  }
		} else {}
		
	ModelAndView mav = new ModelAndView("jsonView", model);
	return mav ;
	} 
	
	// ResponseEntity<String> String 반환값 처리를 위함   * ex. "success" or "fail"
	// 다중 체크 다운로드
	@PostMapping(value = "/document/downLoadZipFileDocuList.do")
	public ResponseEntity<String> downLoadZipFileDocuList(@RequestBody List<ZipDocuFileDownload> downloadFile,
	        @ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model,
	        HttpServletResponse response) throws Exception {
	    System.out.println("---------------downLoadZipFileDocuList---------------");
	    
	    List<?> resultList = null;
	    for (ZipDocuFileDownload zipFile : downloadFile) {
	    	List<ZipDocuFileDownload> zipFiles = new ArrayList<>(); //선택한 파일을 확인하기 위한 새로운 배열 선언
	    	Map<String, Object> paramMap = new HashMap<>();
	    	System.out.println(zipFile.getRptNo());
	    	System.out.println(zipFile.getMgCode());
	    	System.out.println(zipFile.getBlno());
	    	zipFiles.add(zipFile); //다운로드 시도할 신고번호를 paramMap 오브젝트에 넣기 위해 배열에 추가
	    
	    paramMap.put("zipFiles", zipFiles);
	    System.out.println(paramMap);
	    resultList = pfdocumentService.selectDownloadFileList(paramMap); 
	    System.out.println("resultList : " + resultList);
	    
	    if(resultList.size() == 0) {
	    	return ResponseEntity.status(HttpStatus.OK).body("fail");
	    }
	    List<String> docuFiles = new ArrayList<>();
	    List<String> docuOrgFiles = new ArrayList<>();
	    List<String> saveDir = new ArrayList<>();
	        for (Object result : resultList) { // 조회된 결과 값이 있을 경우 zip 파일을 만들기 위한 파일명, 파일경로를 배열로 처리
	        	@SuppressWarnings("unchecked")
	        	Map<String, Object> resultMap = (Map<String, Object>) result;
	        	String docuFile = (String) resultMap.get("docuFile");
	        	String docuOrgFile = (String) resultMap.get("docuOrgFile");
	        	String docuPath = (String) resultMap.get("docuPath");
	        	docuFiles.add(docuFile);
	        	docuOrgFiles.add(docuOrgFile);
        		saveDir.add(docuPath);
	        }
	        
	        String zipFileName;
	        if (zipFile.getBlno() != null && !zipFile.getBlno().isEmpty()) {
	        	zipFileName = zipFile.getBlno() + "_" + zipFile.getRptNo() + ".zip";
	        } else if (zipFile.getMgCode() != null && !zipFile.getMgCode().isEmpty()) {
	        	zipFileName = zipFile.getMgCode() + "_" + zipFile.getRptNo() + ".zip";
	        } else {
	        	zipFileName = zipFile.getRptNo() + ".zip";
	        }
	        
	        System.out.println("파일명: " + zipFileName);
	        createZipFile(docuOrgFiles, zipFileName, saveDir, docuFiles); // 선언된 배열 zip 파일로 만들기
	    }
	        return ResponseEntity.status(HttpStatus.OK).body("success");
	    }
	    

	private void createZipFile(List<String> docuOrgFiles, String zipFileName, List<String> saveDir, List<String> docuFiles) throws IOException {
	    String zipFilePath = "/home/files" + File.separator + zipFileName;
	    try (FileOutputStream fos = new FileOutputStream(zipFilePath);
    		ZipArchiveOutputStream zos = new ZipArchiveOutputStream(fos)) {
	        
	        for (int i = 0; i < docuOrgFiles.size(); i++) {
	        	String docuFile = docuFiles.get(i);
	        	String docuOrgFile = docuOrgFiles.get(i);
	        	String saveDir2 = saveDir.get(i);
	        	File file = new File(saveDir2, docuFile);
	        	ZipArchiveEntry zipEntry = new ZipArchiveEntry(file, docuOrgFile);
	            if (file.exists()) {
	                byte[] buffer = new byte[1024];
	                FileInputStream fis = new FileInputStream(file);
	                zos.putArchiveEntry(zipEntry);
	                int length;
	                while ((length = fis.read(buffer)) > 0) {
	                    zos.write(buffer, 0, length);
	                }
	                zos.closeArchiveEntry();
	                fis.close();
	            }
			}
	    }
	}
	
	@RequestMapping(value = "/docu/downloadDocuFile.do")
  	public void downloadDocuFile(
  			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String zipName = request.getParameter("zipDownloadName");
		System.out.println("zipName: " + zipName);
  		String saveDir = "/home/files";
  		File file = new File(saveDir + "/" + zipName + ".zip");
  		response.setHeader("Content-Disposition","attachment;filename=\"" + zipName + ".zip\";");

  		FileInputStream fileInputStream = new FileInputStream(file);
  		ServletOutputStream servletOutputStream = response.getOutputStream();

  		byte b [] = new byte[1024];
  		int data = 0;

  		while((data=(fileInputStream.read(b, 0, b.length))) != -1)
  		{
  			servletOutputStream.write(b, 0, data);
  		}

  		servletOutputStream.flush();
  		servletOutputStream.close();
  		fileInputStream.close();
  	}
	
	@RequestMapping(value = "/document/deleteDocuFile.do", method = RequestMethod.POST)
	@ResponseBody
	public void deleteDocuFile(@RequestBody List<ZipFileDownload> downloadFile, HttpServletRequest request, ModelMap model) throws Exception {
		SearchVO vo = new SearchVO();
		  for (ZipFileDownload file : downloadFile) {
			  vo.setSrch1(file.getDocuFile());
			  vo.setSrch2(file.getDocuOrgFile());
			  vo.setSrch3(file.getDocuPath());
			  vo.setSrch4(file.getUploadDt());
			  
			  pfdocumentService.deleteDocuFile(vo);
		  }
	}
	
	
	@PostMapping(value = "/document/downloadFileZip.do")
	public void downloadFileZip(@RequestBody List<ZipFileDownload> downloadFile,
			@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model,
			HttpServletResponse response) throws Exception {
		String saveDir = "/home/files";
		String saveDir2 = "";
		String fileNo = "";
		if (downloadFile.get(0).getBlno() == null) {
			fileNo = downloadFile.get(0).getInvoiceNo();
		} else {
			fileNo = downloadFile.get(0).getBlno();
		}
		String zipFileName = fileNo + "_" + downloadFile.get(0).getRptNo() + ".zip";

		try {
			FileOutputStream fos = new FileOutputStream(saveDir + File.separator + zipFileName);
			ZipArchiveOutputStream zipOut = new ZipArchiveOutputStream(fos);

            // 파일 목록을 순회하며 압축 파일에 추가
            for (ZipFileDownload file : downloadFile) {
            	saveDir2 = file.getDocuPath();
                addFileToZip(saveDir2, file.getDocuFile(), zipOut, file.getDocuOrgFile());
            }
	            zipOut.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			
		}
	}
	
	private void addFileToZip(String directoryPath, String fileName, ZipArchiveOutputStream zipOut, String fileOrgName) throws IOException {
	    String docuFile = fileName;
	    String docuOrgFile = fileOrgName;

	    File file = new File(directoryPath, docuFile);
	    FileInputStream fis = new FileInputStream(file);

	    // 한글 파일명을 UTF-8로 인코딩
	    ZipArchiveEntry zipEntry = new ZipArchiveEntry(file, docuOrgFile);
	    zipOut.putArchiveEntry(zipEntry);

	    byte[] bytes = new byte[1024];
	    int length;
	    while ((length = fis.read(bytes)) >= 0) {
	        zipOut.write(bytes, 0, length);
	    }

	    zipOut.closeArchiveEntry();
	    fis.close();
	}
	
	// 단일 파일 다운로드 form
	@RequestMapping(value = "/base/downloadFile.do")
	public void downloadFile(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String docuPath = request.getParameter("docuPath");
		System.out.println(docuPath);
		String docuFile = request.getParameter("docuFile");
		String docuOrgFile = request.getParameter("docuOrgFile");

		String saveDir = docuPath;
		File file = new File(saveDir + "/" + docuFile);
		String encodedFileName = URLEncoder.encode(docuOrgFile, "UTF-8").replaceAll("\\+", "%20");
		response.setHeader("Content-Disposition", "attachment;filename=\"" + encodedFileName + "\";");

		FileInputStream fileInputStream = new FileInputStream(file);
		ServletOutputStream servletOutputStream = response.getOutputStream();

		byte b [] = new byte[1024];
		int data = 0;

		while((data=(fileInputStream.read(b, 0, b.length))) != -1)
		{
			servletOutputStream.write(b, 0, data);
		}

		servletOutputStream.flush();
		servletOutputStream.close();
		fileInputStream.close();
	}
	
	@RequestMapping(value = "/base/impDownloadFile.do")
	public void impDownloadFile(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String docuPath = request.getParameter("impDocuPath");
		System.out.println(docuPath);
		String docuFile = request.getParameter("impDocuFile");
		String docuOrgFile = request.getParameter("impDocuOrgFile");
		
		String saveDir = docuPath;
		File file = new File(saveDir + "/" + docuFile);
		String encodedFileName = URLEncoder.encode(docuOrgFile, "UTF-8").replaceAll("\\+", "%20");
		response.setHeader("Content-Disposition", "attachment;filename=\"" + encodedFileName + "\";");
		
		try (FileInputStream fileInputStream = new FileInputStream(file);
			     ServletOutputStream servletOutputStream = response.getOutputStream()) {
			    byte[] b = new byte[1024];
			    int data;
			    while ((data = fileInputStream.read(b)) != -1) {
			        servletOutputStream.write(b, 0, data);
			    }
			    servletOutputStream.flush();
			    servletOutputStream.close();
			    fileInputStream.close();
			}
	}

}
