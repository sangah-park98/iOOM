package egovframework.pf.trade.web;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import egovframework.pf.cmmn.service.CmmnService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.trade.service.TradeService;
import egovframework.pf.util.ExcelUtil;

/**
 * @Class Name : TradeController.java
 * @Description : 수량관리 컨트롤러
 * @Modification Information
 * @
 * @  수정일          수정자               수정내용
 * @ ---------        ----------     -------------------------------
 * @ 2024.09.23	서인석             최초생성
 *
 * @author 서인석
 * @since 2024.09.23
 * @version 1.0
 * @see
 *
 *  Copyright (C) by MOPAS All right reserved.
 */

@Controller
public class TradeController {

	@Resource(name = "CmmnService")
	private CmmnService CmmnService;
	
	@Resource(name = "TradeService")
	private TradeService tradeService;

	@RequestMapping(value = "/trade/tradeInfo.do")
	public String tradeInfo(HttpServletRequest request, ModelMap model) throws Exception {
	    return "trade/tradeInfo";
	}
	
	@RequestMapping(value = "/trade/tradeGap.do")
	public String tradeGap(HttpServletRequest request, ModelMap model) throws Exception {
		return "trade/tradeGap";
	}
	
	@RequestMapping(value = "/trade/tradeUpload.do")
	public String tradeUpload(HttpServletRequest request, ModelMap model) throws Exception {
		return "trade/tradeUpload";
	}
	
	@RequestMapping(value = "/trade/selectTradeViewList.do", method = RequestMethod.POST)
	public ModelAndView selectTradeViewList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
	    HttpSession httpSession = request.getSession(true);
	    UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = tradeService.selectTradeViewList(vo);
	    ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    return mav;
	}
	
	@RequestMapping(value = "/trade/saveTradeInfo.do", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView saveTradeInfo(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		tradeService.saveTradeInfo(vo);
		model.addAttribute("SaveStatus", "success");
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}

	@RequestMapping(value = "/trade/selectTradeGapList.do", method = RequestMethod.POST)
	public ModelAndView selectTradeGapList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = tradeService.selectTradeGapList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		return mav;
	}
	
	
	@RequestMapping(value = "/trade/selectTradeGapLanList.do", method = RequestMethod.POST)
	public ModelAndView selectTradeGapLanList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = tradeService.selectTradeGapLanList(vo);
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		return mav;
	}
	
	
	@RequestMapping(value = "/trade/selectTradeUploadList.do", method = RequestMethod.POST)
	public ModelAndView selectTradeUploadList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
	    HttpSession httpSession = request.getSession(true);
	    UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = tradeService.selectTradeViewList(vo);
	    ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    return mav;
	}
	
	@RequestMapping(value = "/trade/tradeDownloadExcel.do")
	public ModelAndView tradeDownloadExcel(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());      
		vo.setList(userVO.getCorpNos());
		vo.setRecordCountPerPage(99999999);
		vo.setStartPage(0);
		
		ModelAndView mav = new ModelAndView("jsonView");
		ModelAndView mv = new ModelAndView("jsonView");
		ModelAndView dataMv = new ModelAndView();
		String resultCode="200";
		
		try {
				vo.setSrch1("01");
				dataMv = this.selectTradeGapList(vo, request, new ModelMap());
				List<?> resultList = (List<?>) dataMv.getModel().get("resultList"); 
				System.out.println("resultList111"+resultList);
				XSSFWorkbook workBook = new XSSFWorkbook();
				XSSFSheet sheet = ExcelUtil.createSheetWithTitleRow(workBook, "거래정보 GAP 분석", vo.getExCol().split("\\|\\|").length);
				ArrayList<String> conts = new ArrayList<String>();
				conts.add("1");
				sheet = ExcelUtil.createSummaryCont(sheet, conts);
				sheet = ExcelUtil.createMainTable(sheet, resultList, vo);
				int cnt = 0;
				String ExcelTitle = "";
				if(userVO.getCorpNos().size() > 1) {
					cnt = userVO.getCorpNos().size() - 1;
					ExcelTitle = userVO.getCmpnyCd() + " 외 " + cnt + "개";
				} else {
					ExcelTitle = userVO.getCmpnyCd();
				}
				ExcelUtil.generateExcelFile(workBook, ExcelTitle.concat(" ").concat("거래정보GAP분석"), response);
				
		}catch(Exception e){
			e.printStackTrace();
		}
		
		mv.addObject("resultCode", resultCode);
		return mv;
		}
	
}

