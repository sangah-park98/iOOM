package egovframework.pf.cmmn.web;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;


import egovframework.pf.cmmn.service.ConectInfoService;
import egovframework.pf.cmmn.service.CmmnService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.member.sevice.MemberService;
import egovframework.pf.member.sevice.SaveCompnyVO;
import egovframework.pf.member.sevice.SaveMemberVO;
import egovframework.rte.psl.dataaccess.util.EgovMap;


@Controller
public class cmmnController {

	@Resource(name = "memberService")
	private MemberService memberService;
	@Resource(name = "CmmnService")
	private CmmnService CmmnService;
	@Resource(name = "conectionInfoService")
	private ConectInfoService ConectInfoService;

	//로그인 화면 호출
	@RequestMapping(value = "/login.do")
	public String login(Model model) throws Exception {
		return "cmmn/login";
	}

	@RequestMapping(value = "/relogin.do")
	public String relogin(Model model) throws Exception {
		return "cmmn/relogin";
	}

	//로그인 체크
		@RequestMapping(value = "/loginCheck.do")
		public ModelAndView loginCheck(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
			String result = "SUCCESS";
			
			if(vo == null) {
				result = "ERROR";
			}else {
				String id = vo.getId(); //email
				String lang = vo.getLang(); //language
				String ip = request.getHeader("X-FORWARDED-FOR"); //ip
				if(ip == null) ip = request.getRemoteAddr();
				
				Map<String, String> resultMap = CmmnService.selectCmpnyIdCheck(vo);
				if(resultMap == null) {
					result = "ERROR";
				}else {
					//세션등록
					List<String> corpNos = new ArrayList<>();
					List<String> cmpnyCds = new ArrayList<>();
					UserSessionVO userVO = new UserSessionVO();
					userVO.setUsrNm(resultMap.get("usrNm"));
					userVO.setCmpnyCd(resultMap.get("cmpnyNm"));
					userVO.setCorpNo(resultMap.get("cmpnyCd"));
					userVO.setManerYn(resultMap.get("manerYn"));
					userVO.setGrpCd(resultMap.get("grpCd"));
					cmpnyCds.add(resultMap.get("cmpnyNm"));
					corpNos.add(resultMap.get("cmpnyCd"));
					userVO.setCmpnyCds(cmpnyCds);
					userVO.setCorpNos(corpNos);
					if("admin".equalsIgnoreCase(userVO.getGrpCd())) {
						userVO.setAdminYn("Y");
					}else {
						userVO.setAdminYn("N");
					}
					userVO.setId(id);
					userVO.setLang("kr");
					userVO.setIp(ip);
					
					HttpSession httpSession = request.getSession(true);
					httpSession.setAttribute("USER", userVO);
					System.out.println("username   : "+userVO.getUsrNm());
					System.out.println("useradmin  : "+userVO.getAdminYn());
					System.out.println("usercmpny  : "+userVO.getCmpnyCd());
					System.out.println("usertaxNo  : "+userVO.getCorpNo());
					System.out.println("userManer  : "+userVO.getManerYn());
					System.out.println("userGrpCd  : "+userVO.getGrpCd());
					System.out.println("userID  : "+userVO.getId());
					System.out.println("userLANG  : "+userVO.getLang());
					System.out.println("userIp  : "+userVO.getIp());
					
					//접속정보 저장
					ConectInfoService.saveConectInfo(userVO);
				}			
			}		

			model.addAttribute("result", result);
			ModelAndView mav = new ModelAndView("jsonView", model);
			return mav;
		}

		//로그아웃
		@RequestMapping(value = "/logout.do")
		public String logout(HttpServletRequest request) throws Exception {
			HttpSession session = request.getSession();
			session.invalidate();
			return "redirect:/index.jsp";
		}

		//메인화면 호출
		@RequestMapping(value = "/cmmn/main.do")
		public String main(HttpServletRequest request, HttpServletResponse response,  ModelMap model) throws Exception {
			
			HttpSession httpSession = request.getSession(true);
			UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
			if ( userVO == null ) {
				httpSession.invalidate();
				response.sendRedirect("/comm/login.do");
				return "" ;
			}
			
		    httpSession.setAttribute("USER", userVO);
			SaveMemberVO memvo = new SaveMemberVO();
			SaveCompnyVO cmyvo = new SaveCompnyVO();
			memvo.setMEMBER_ID(userVO.getId());
			cmyvo.setMEMBER_ID(userVO.getId());
			
			SearchVO vo = new SearchVO();
			String lang = request.getParameter("lang");
		    if (lang == null) {
		        lang = userVO.getLang();
		    } else {
		        userVO.setLang(lang);
		    }
			vo.setLang(lang);
			vo.setSrch2("dashboard");
			List<?> msgList = CmmnService.selectMsgList(vo);
			for(int i=0; i<msgList.size(); i++) {
				EgovMap map = (EgovMap)msgList.get(i);
				model.addAttribute((String)map.get("msgId"), map.get("msgNm"));
			}
			vo.setId(userVO.getId());
			vo.setAdminYn(userVO.getAdminYn());
			vo.setGrpCd(userVO.getGrpCd());
			model.addAttribute("lang", lang);
			model.addAttribute("currCmpnyCd", userVO.getCmpnyCd());
			
			// user_info 테이블
			List<?>userInfo = memberService.selectMyPageUserInfo(memvo);
			// user_cmpny_info 태이블
			List<?>cmpnyInfo = memberService.selectMyPageCmpnyInfo(cmyvo);
			   
			String author = userVO.getGrpCd();
			String corpNo = userVO.getCorpNo();
			
			model.addAttribute("corpNo", corpNo);
			model.addAttribute("author", author);
			model.addAttribute("usrId", userVO.getId());
			model.addAttribute("userInfo", userInfo);
			model.addAttribute("cmpnyInfo", cmpnyInfo);
			
			vo.setId(userVO.getId());
			vo.setManerYn(userVO.getManerYn());
			
			return "cmmn/main";
		}
		
		// 모달 회사리스트 띄우기
		@RequestMapping(value = "/cmmn/selectSearchCmpnyList.do")
		public ModelAndView selectSearchCmpnyList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request,
				ModelMap model) throws Exception {
			HttpSession httpSession = request.getSession(true);
			UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
			vo.setLang(userVO.getLang());
			vo.setCmpnyCd(userVO.getCmpnyCd());
			vo.setId(userVO.getId());;
			if(userVO.getGrpCd().equals("KORD Mst")) {
				List<?> resultList =  CmmnService.selectAllCmpnyList(vo);
				model.addAttribute("resultList", resultList);
			}else {
				List<?> resultList =  CmmnService.selectUsrCmpnyList(vo);
				model.addAttribute("resultList", resultList);
			}
			
			
			// System.out.println("도착 항구: " + resultList);
			ModelAndView mav = new ModelAndView("jsonView", model);
			return mav;
		}

		@RequestMapping(value = "/cmmn/saveCmpnySession.do", method = RequestMethod.POST)
		public String saveCmpnySession(
		        @RequestParam("taxNo") List<String> taxNos,
		        @RequestParam("cmpnyNm") List<String> cmpnyNms,
		        HttpServletRequest request) throws Exception {

		    HttpSession httpSession = request.getSession(true);
		    UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		    
		    if (!taxNos.isEmpty() && !cmpnyNms.isEmpty()) {
		    	userVO.setCmpnyCd(cmpnyNms.get(0));
		    	userVO.setCorpNo(taxNos.get(0));
		        userVO.setCmpnyCds(cmpnyNms);
		        userVO.setCorpNos(taxNos);
		    }
		    return "redirect:/cmmn/main.do";
		}
		
		//공통팝업 항목정보 호출
		@RequestMapping(value = "/cmmn/selectPopInfo.do")
		public ModelAndView selectPopInfo(HttpServletRequest request, ModelMap model) throws Exception {
			HttpSession httpSession = request.getSession(true);
			UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
			SearchVO vo = new SearchVO();
			vo.setLang(userVO.getLang());

			//메시지 호출
			vo.setSrch2("cmmnPopup");
			List<?> msgList = CmmnService.selectMsgList(vo);
			for(int i=0; i<msgList.size(); i++) {
				EgovMap map = (EgovMap)msgList.get(i);
				model.addAttribute((String)map.get("msgId"), map.get("msgNm"));
			}

			ModelAndView mav = new ModelAndView("jsonView", model);
			return mav ;
		}


		//공통팝업 목록 조회
		@RequestMapping(value = "/cmmn/selectCmmnPopList.do")
		public ModelAndView selectCmmnPopList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
			HttpSession httpSession = request.getSession(true);
			UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
			vo.setLang(userVO.getLang());

			List<?> resultList = CmmnService.selectCmmnCdPop(vo);
			model.addAttribute("resultList", resultList);
			int totCnt = CmmnService.selectCmmnCdPopCnt(vo);
			model.addAttribute("totCnt", totCnt);

			ModelAndView mav = new ModelAndView("jsonView", model);
			return mav ;
		}
		
		@RequestMapping(value = "/workplacelogin.do")
		public void workplacelogin(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, HttpServletResponse response) throws Exception {
		    String id = vo.getId();
		    System.out.println("id: " + id);
		    String token = createToken(id);
		    System.out.println("Generated Token: " + token);

		    String redirectUrl = "http://localhost:8081/cmmn/workplacelogincheck.do?token=" + URLEncoder.encode(token, "UTF-8");
		    response.sendRedirect(redirectUrl);
		}

		 private static final String SECRET_KEY = "mySecretKey";  // 비밀키는 안전하게 관리해야 함

		    public static String createToken(String email) throws Exception {
		        // 현재 시간을 YYYYMMDDHHMMSS 형식으로 포맷
		        String timestamp = String.valueOf(new Date().getTime() / 1000);  // 초 단위로

		        // 토큰 생성할 데이터 (email + timestamp)
		        String data = email + ":" + timestamp;

		        // HMAC-SHA256 서명 생성
		        String signature = generateHmacSHA256(data, SECRET_KEY);

		        // 이메일, 타임스탬프, 서명을 합쳐 토큰 구성
		        String token = Base64.getEncoder().encodeToString((email + ":" + timestamp + ":" + signature).getBytes());

		        return token;
		    }

		    // HMAC-SHA256 서명 생성 메소드
		    private static String generateHmacSHA256(String data, String key) throws Exception {
		        Mac mac = Mac.getInstance("HmacSHA256");
		        Key secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
		        mac.init(secretKey);
		        byte[] bytes = mac.doFinal(data.getBytes(StandardCharsets.UTF_8));
		        return bytesToHex(bytes);
		    }

		    // 바이트 배열을 헥사 문자열로 변환
		    private static String bytesToHex(byte[] bytes) {
		        StringBuilder sb = new StringBuilder();
		        for (byte b : bytes) {
		            sb.append(String.format("%02x", b));
		        }
		        return sb.toString();
		    }
		
}