package egovframework.pf.api.web;

import javax.annotation.Resource;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;

import egovframework.pf.api.service.ApiAllocCancelVO;
import egovframework.pf.api.service.ApiArrangeAllocVO;
import egovframework.pf.api.service.ApiOrderAddVO;
import egovframework.pf.api.service.ApiOrderCancelVO;
import egovframework.pf.api.service.ApiShippingService;
import egovframework.pf.api.service.ApiStateChangeVO;
import egovframework.pf.shipping.service.ShippingOrderVO;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class ApiShippingController {

	@Resource(name = "apiShippingService")
	private ApiShippingService apiShippingService;
	
	@RequestMapping("/order/stateChange.do")
	public @ResponseBody String stateChange(@RequestBody String param) throws Exception {
		System.out.println(param);
	    ObjectMapper objectMapper = new ObjectMapper();
	    ApiStateChangeVO avo = objectMapper.readValue(param, ApiStateChangeVO.class);
	    ShippingOrderVO svo = new ShippingOrderVO();
	    
	    svo.setOrderId(avo.getOrderId());
	    svo.setOrderState(avo.getOrderState());
		return apiShippingService.stateChange(svo);
	}
	
	@RequestMapping("/order/arrangeAlloc.do")
	public @ResponseBody String arrangeAlloc(@RequestBody String param) throws Exception {
		System.out.println(param);
		ObjectMapper objectMapper = new ObjectMapper();
		ApiArrangeAllocVO avo = objectMapper.readValue(param, ApiArrangeAllocVO.class);
		ShippingOrderVO svo = new ShippingOrderVO();
		
		svo.setOrderId(avo.getOrderId());
		svo.setFixedCharge(avo.getSellCharge());
		svo.setCarNo(avo.getCarNum());
		svo.setCarNm(avo.getDriverName());
		svo.setCarPhnNo(avo.getDriverTel());
		return apiShippingService.arrangeAlloc(svo);
	}
	
	@RequestMapping("/order/allocCancel.do")
	public @ResponseBody String allocCancel(@RequestBody String param) throws Exception {
		System.out.println(param);
		ObjectMapper objectMapper = new ObjectMapper();
		ApiAllocCancelVO avo = objectMapper.readValue(param, ApiAllocCancelVO.class);
		ShippingOrderVO svo = new ShippingOrderVO();
		
		svo.setOrderId(avo.getOrderId());
		svo.setRegId(avo.getRegid());
		return apiShippingService.allocCancel(svo);
	}
	
	@RequestMapping("/order/orderCancel.do")
	public @ResponseBody String orderCancel(@RequestBody String param) throws Exception {
		System.out.println(param);
		ObjectMapper objectMapper = new ObjectMapper();
		ApiOrderCancelVO avo = objectMapper.readValue(param, ApiOrderCancelVO.class);
		ShippingOrderVO svo = new ShippingOrderVO();
		
		svo.setOrderId(avo.getOrderId());
		svo.setRegId(avo.getRegid());
		return apiShippingService.orderCancel(svo);
	}
	
	@RequestMapping("/order/orderAdd.do")
	public @ResponseBody String orderAdd(@RequestBody String param) throws Exception {
		System.out.println(param);
		ObjectMapper objectMapper = new ObjectMapper();
		ApiOrderAddVO avo = objectMapper.readValue(param, ApiOrderAddVO.class);
		ShippingOrderVO svo = new ShippingOrderVO();
		svo.setCmpnyNm(avo.getBizName());
		svo.setCorpNo(avo.getBizNum());
		svo.setBlNo(avo.getExternalInfomation());
		svo.setRptNo(avo.getExternalNumber());
		svo.setOrderId(avo.getOrderId());
		svo.setRecvNm(avo.geteComName());
		svo.setArriveAddr(avo.geteAddr());
		svo.setArriveDt(avo.geteDate());
		svo.setFixedCharge(avo.getSellCharge());
		
		return apiShippingService.orderAdd(svo);
	}
}