package egovframework.pf.shipping.web;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import egovframework.pf.api.service.ApiOrderCancelVO;
import egovframework.pf.api.service.ApiOrderEtcAddVO;
import egovframework.pf.api.service.ApiShippingService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.shipping.service.ShippingAddressVO;
import egovframework.pf.shipping.service.ShippingOrderVO;
import egovframework.pf.shipping.service.ShippingService;

@Controller
public class ShippingController {

	@Resource(name = "shippingService")
	private ShippingService shippingService;
	@Resource(name = "apiShippingService")
	private ApiShippingService apiShippingService;

	
	@RequestMapping(value = "/shipping/shippingView.do")
	public String shippingView(HttpServletRequest request, Model model) throws Exception {
		return "shipping/shippingView";
	}
	
	@RequestMapping(value = "/shipping/selectShippingViewList.do", method = RequestMethod.POST)
	public ModelAndView selectShippingViewList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = shippingService.selectShippingViewList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	@RequestMapping(value = "/shipping/selectShippingDstnList.do")
	public ModelAndView selectShippingDstnList(@ModelAttribute("ShippingAddressVO") ShippingAddressVO svo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		svo.setCorpNo(userVO.getCorpNo());
		List<?> resultList = shippingService.selectShippingDstnList(svo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	@RequestMapping(value = "/shipping/insertAddr.do", method = RequestMethod.POST)
	public ModelAndView insertAddr(
	        @ModelAttribute ShippingAddressVO svo, HttpServletRequest request, ModelMap model) throws Exception {
	    HttpSession httpSession = request.getSession(true);
	    UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");

	    svo.setCorpNo(userVO.getCorpNo());
	    svo.setId(userVO.getId());

	    shippingService.insertAddr(svo);
	    ModelAndView mav = new ModelAndView("jsonView", model);
	    return mav;
	}

	@RequestMapping(value = "/shipping/deleteAddr.do", method = RequestMethod.POST)
	@ResponseBody
	public void deleteAddr(@RequestBody List<ShippingAddressVO> svoList, HttpServletRequest request, ModelMap model) throws Exception {
	    for (ShippingAddressVO svo : svoList) {
	        shippingService.deleteAddr(svo);
	    }
	}

	@RequestMapping(value = "/shipping/insertShippingTempList.do")
	@ResponseBody
	public String insertShippingTempList(@RequestBody List<ShippingOrderVO> voList, HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		SearchVO vo = new SearchVO();
		vo.setSrch1(voList.get(0).getBlNo());
		shippingService.insertShippingTempList(voList,userVO);
		return "success";
	}
	
	@RequestMapping(value = "/shipping/selectShippingReqList.do")
	public ModelAndView selectShippingReqList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setCorpNo(userVO.getCorpNo());
		}
		List<?> resultList1 = shippingService.selectShippingReqList(vo);
		List<?> resultList2 = shippingService.selectShippingTempList(vo);
		
		model.addAttribute("resultList1", resultList1);
		model.addAttribute("resultList2", resultList2);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	@RequestMapping(value = "/shipping/selectShippingOrderSeqList.do")
	public ModelAndView selectShippingOrderSeqList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setCorpNo(userVO.getCorpNo());
		}
		List<?> resultList = shippingService.selectShippingOrderSeqList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	@RequestMapping(value = "/shipping/selectCtNoList.do")
	public ModelAndView selectCtNoList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setCorpNo(userVO.getCorpNo());
		List<?> resultList = shippingService.selectCtNoList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}

	
	@RequestMapping(value = "/shipping/insertShippingReqList.do", method = RequestMethod.POST)
	public @ResponseBody String insertShippingReqList(
	        @RequestParam("sData") String sData,
	        @RequestParam("files") List<MultipartFile> files, HttpServletResponse response, HttpServletRequest request) throws Exception {
	    ObjectMapper objectMapper = new ObjectMapper();
	    List<Map<String, Object>> param = objectMapper.readValue(sData, List.class);
	    ShippingOrderVO svo = new ShippingOrderVO();
	    
	    String saveDir = "/home/files";
	    for (MultipartFile fileIn : files) {
	        String fileName = fileIn.getOriginalFilename();
	        File file = new File(saveDir + "/" + fileName);
	        fileIn.transferTo(file);
	    }

	    if (!files.isEmpty()) {
	        String firstFileName = files.get(0).getOriginalFilename();
	        File firstFile = new File(saveDir + "/" + firstFileName);

	        response.setHeader("Content-Disposition", "attachment; filename=\"" + firstFileName + "\"");
	        response.setContentType("application/octet-stream");

	        try (FileInputStream fileInputStream = new FileInputStream(firstFile);
	             ServletOutputStream servletOutputStream = response.getOutputStream()) {
	            byte[] buffer = new byte[1024];
	            int bytesRead;
	            while ((bytesRead = fileInputStream.read(buffer)) != -1) {
	                servletOutputStream.write(buffer, 0, bytesRead);
	            }
	            servletOutputStream.flush();
	        }
	    }
	    
		try {
	    
	    // --------------- 파일 제외 ---------------
	    for (Map<String, Object> reqMap : param) {
	        System.out.println("param List: " + reqMap);
			String externalNumber = (String) reqMap.get("externalNumber");
			String externalInfomation = (String) reqMap.get("externalInfomation");
			String sDate = (String) reqMap.get("sDate");
			String sAddr = (String) reqMap.get("sAddr");
			String eComName = (String) reqMap.get("eComName");
			String eAddr = (String) reqMap.get("eAddr");
			String bizNum = (String) reqMap.get("bizNum");
			String bizName = (String) reqMap.get("bizName");
			
			svo.setRptNo(externalNumber);
			svo.setBlNo(externalInfomation);
			svo.setFromDt(sDate);
			svo.setFromAddr(sAddr);
			svo.setToStaff(eComName);
			svo.setToAddr(eAddr);
			svo.setCorpNo(bizNum);
			svo.setManagerNm(bizName);
			//-----------------------------------------------------------
			String ctNo = (String) reqMap.get("ctNo");
			String toPhnNo = (String) reqMap.get("toPhnNo");
			String cmpnyNm = (String) reqMap.get("cmpnyNm");
			String toDt = (String) reqMap.get("toDt");
			String toTime = (String) reqMap.get("toTime");
			String billEmail = (String) reqMap.get("billEmail");
			String goodsWeight = (String) reqMap.get("goodsWeight");
			String mixYn = (String) reqMap.get("mixYn");
			String fromReq = (String) reqMap.get("fromReq");
			String fromTime = (String) reqMap.get("fromTime");
			String fromSpecifics = (String) reqMap.get("fromSpecifics");
			String fileName = (String) reqMap.get("fileName");
			int orderSeq = (Integer) reqMap.get("orderSeq");
			
			svo.setCtNo(ctNo);
			svo.setToPhnNo(toPhnNo);
			svo.setCmpnyNm(cmpnyNm);
			svo.setToDt(toDt);
			svo.setToTime(toTime);
			svo.setBillEmail(billEmail);
			svo.setGoodsWeight(goodsWeight);
			svo.setMixYn(mixYn);
			svo.setFromReq(fromReq);
			svo.setFromTime(fromTime);
			svo.setFromSpecifics(fromSpecifics);
			svo.setFileName(fileName);
			svo.setOrderSeq(orderSeq);
			
			shippingService.insertShippingReqList(svo);
			//---------------------------- 전송 ----------------------------
			for (Map<String, Object> reqMap2 : param) {
				ApiOrderEtcAddVO evo = new ApiOrderEtcAddVO();
				HttpSession session = request.getSession(false);
			    UserSessionVO userVO = (UserSessionVO) session.getAttribute("USER");
			    
				evo.setMngDeptId((String) reqMap2.get("mngDeptId"));
				evo.setBizName((String) reqMap2.get("cmpnyNm"));
				evo.setBizNum((String) reqMap2.get("bizNum"));
				evo.setInOutSctn((String) reqMap2.get("inOutSctn")); //
				evo.setTruckTypeCode((String) reqMap2.get("truckTypeCode")); //
				evo.setsComName((String) reqMap2.get("sComName"));
				evo.setsAddr((String) reqMap2.get("sAddr"));
				evo.setsAddrDetail("");
				
				String fromTimeStr = reqMap2.get("fromTime") != null ? reqMap2.get("fromTime").toString() : "";
				if (fromTimeStr.equals("즉시")) {
				    LocalDateTime now = LocalDateTime.now();
				    String currentDateTime = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
				    evo.setsDate(currentDateTime);
				} else {
				    String sDateStr = reqMap2.get("sDate") != null ? reqMap2.get("sDate").toString() : "";
				    if (sDateStr.length() == 8) {
				        String formattedSdate = sDateStr.substring(0, 4) + "-" + sDateStr.substring(4, 6) + "-" + sDateStr.substring(6, 8);
				        String combinedDateTime = formattedSdate + " " + fromTimeStr + ":00";
				        evo.setsDate(combinedDateTime);
				    }
				}

				evo.setsStaff("");
				evo.setsTel("");
				evo.setsMemo((String) reqMap2.get("fromSpecifics")); // 특이사항 -> 상차지메모
				evo.seteComName((String) reqMap2.get("eComName"));
				evo.seteAddr((String) reqMap2.get("eAddr"));
				evo.seteAddrDetail("");
				
				String eDateStr = (String) reqMap2.get("toDt");
				String formattedEdate = eDateStr.substring(0, 4) + "-" + eDateStr.substring(4, 6) + "-" + eDateStr.substring(6, 8);
				String toTimeStr = (String) reqMap2.get("toTime");
				String combinedDateTime2 = formattedEdate + " " + toTimeStr + ":00";
				evo.seteDate(combinedDateTime2);
				
				evo.seteStaff("");
				evo.seteTel("");
				evo.seteMemo("");
				evo.setGoodsName((String) reqMap2.get("ctNo"));
				evo.setGoodsWeight(goodsWeight);
				evo.setGoodsQty(0);
				evo.setQtyUnitCode("");
				evo.setsWayCode("");
				evo.seteWayCode("");
				evo.setMixYn((String) reqMap2.get("mixYn"));
				evo.setMixSize("");
				evo.setReturnYn("");
				evo.setCarTonCode((String) reqMap2.get("carTonCode"));
				evo.setCarTypeCode((String) reqMap2.get("carTypeCode"));
				evo.setChargeType((String) reqMap2.get("chargeType"));
				evo.setReqMemo((String) reqMap2.get("fromReq"));
				evo.setDriverMemo("");
				evo.setItemCode("");
				evo.setSellCharge(0);
				evo.setExternalInfomation((String) reqMap2.get("externalInfomation"));
				evo.setExternalNumber((String) reqMap2.get("externalNumber"));
				evo.setExternalFlag((String) reqMap2.get("externalFlag"));
				evo.setRegid(userVO.getId());
				
				callOrderAddApi(evo);
				
			}
			
	      }
	    
	    } catch (Exception e) {
	    	e.printStackTrace();
	    	System.out.println(e.getMessage());
	    }
		return "success";
	}
	
	// 1_1 오더등록
	private void callOrderAddApi(ApiOrderEtcAddVO evo) throws Exception {
	    URL url = new URL("http://211.252.86.30:806/api/order/etc/add");
	    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

	    connection.setRequestMethod("POST");
	    connection.setDoOutput(true);
	    connection.setRequestProperty("Content-Type", "application/json");
	    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0"); // 인증 토큰 추가

	    // JSON 변환
	    ObjectMapper objectMapper = new ObjectMapper();
	    String jsonInputString = objectMapper.writeValueAsString(evo);
	    System.out.println("Sending JSON: " + jsonInputString);

	    // 요청 본문에 JSON 데이터 전송
	    try (OutputStream os = connection.getOutputStream()) {
	        byte[] input = jsonInputString.getBytes("utf-8");
	        os.write(input, 0, input.length);
	    }

	    int responseCode = connection.getResponseCode();
	    System.out.println("Response Code : " + responseCode);

	    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
	        StringBuilder response = new StringBuilder();
	        String inputLine;
	        while ((inputLine = in.readLine()) != null) {
	            response.append(inputLine);
	        }
	        System.out.println("API Response: " + response.toString());
	        ObjectMapper responseMapper = new ObjectMapper();
	        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
	        if (responseMap.get("result").equals(true)) {
	        	ShippingOrderVO svo = new ShippingOrderVO();
	        	svo.setRptNo((String) evo.getExternalNumber());
	        	svo.setBlNo((String) evo.getExternalInfomation());
	        	svo.setOrderId((String) responseMap.get("orderId"));
	        	svo.setCtNo((String) evo.getGoodsName());
	        	apiShippingService.updateOrderId(svo);
	        } else {
	            System.err.println("실패: " + responseMap.get("msg"));
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading API response: " + e.getMessage());
	    }
	}

	
	@RequestMapping(value = "/shipping/orderCancel.do", method = RequestMethod.POST)
	public @ResponseBody String orderCancel(
			@RequestBody List<Map<String, Object>> sData, HttpServletRequest request) throws Exception {
		
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		
		ApiOrderCancelVO evo = new ApiOrderCancelVO();
		
		for (Map<String, Object> reqMap : sData) {
	        System.out.println("param List: " + reqMap);
	        // 여기서 reqMap에서 orderId를 가져올 수 있습니다.
	        String mngDeptId = (String) reqMap.get("mngDeptId");
	        String orderId = (String) reqMap.get("orderId");
	        String regId = userVO.getId();
	        System.out.println("param mngDeptId: " + mngDeptId);
	        System.out.println("param orderId: " + orderId);
	        System.out.println("param regId: " + regId);
	        
	        evo.setMngDeptId(mngDeptId);
	        evo.setOrderId(orderId);
	        evo.setRegid(regId);
	        
	        URL url = new URL("http://211.252.86.30:806/api/order/state/orderCancel");
		    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

		    connection.setRequestMethod("POST");
		    connection.setDoOutput(true);
		    connection.setRequestProperty("Content-Type", "application/json");
		    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0"); // 인증 토큰 추가

		    // JSON 변환
		    ObjectMapper objectMapper = new ObjectMapper();
		    String jsonInputString = objectMapper.writeValueAsString(evo);
		    System.out.println("Sending JSON: " + jsonInputString);

		    // 요청 본문에 JSON 데이터 전송
		    try (OutputStream os = connection.getOutputStream()) {
		        byte[] input = jsonInputString.getBytes("utf-8");
		        os.write(input, 0, input.length);
		    }

		    int responseCode = connection.getResponseCode();
		    System.out.println("Response Code : " + responseCode);

		    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
		        StringBuilder response = new StringBuilder();
		        String inputLine;
		        while ((inputLine = in.readLine()) != null) {
		            response.append(inputLine);
		        }
		        System.out.println("API Response: " + response.toString());
		        ObjectMapper responseMapper = new ObjectMapper();
		        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
		        if (responseMap.get("result").equals(true)) {
		        	shippingService.orderCancel(evo);
		        }
		    } catch (IOException e) {
		        System.err.println("Error reading API response: " + e.getMessage());
		    }
	        
	        // 필요한 추가 로직 처리
	    }
		
		return "success";
	}
	
	
}