package egovframework.ms.docu.web;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.docu.service.pfDocumentService;
import egovframework.pf.exp.service.SaveExpFileVO;

/**
 * @Class Name : PurchaseController.java
 * @Description : 구매원장 컨트롤러
 * @Modification Information
 * @
 * @  수정일          수정자               수정내용
 * @ ---------        ----------     -------------------------------
 * @ 2020.01.10		심창무               최초생성
 *
 * @author 심창무
 * @since 2020.01.10
 * @version 1.0
 * @see
 *
 *  Copyright (C) by MOPAS All right reserved.
 */

@Controller
public class DocumentController {

	@Resource(name = "pfDocumentService")
	private pfDocumentService pfdocumentService;
	
	// 서류관리 페이지 호출
	@RequestMapping(value = "/docu/documentView.do")
	public String documentView(HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		// model.addAttribute("writable","Y".equals(userVO.getAdminYn())?"Y":documentService.selectWriteCheck(request.getServletPath(), userVO));
		SearchVO vo = new SearchVO();
		String lang = userVO.getLang();
		vo.setLang(lang);
		vo.setCmpnyCd(userVO.getCmpnyCd());
		model.addAttribute("lang", lang);
		model.addAttribute("userCmpnyCd", userVO.getCmpnyCd());

		return "document/documentView";
	}
	
	// 서류관리 수입 데이터 리스트 불러오기
	@RequestMapping(value = "/document/selectDocumentImpViewList.do")
	public ModelAndView selectDocumentImpViewList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());
		vo.setCmpnyCd(userVO.getCmpnyCd());
		List<?> resultList = null;
		int imptotCnt = 0;
		
		imptotCnt = pfdocumentService.selectDocuViewImpTotCnt(vo);
		resultList = pfdocumentService.selectDocumentImpViewList(vo);
		
		ModelAndView mav = new ModelAndView("jsonView");
	    mav.addObject("resultList", resultList);
	    mav.addObject("imptotCnt", imptotCnt);

	    return mav;
	    
	}
	
	// 서류관리 수출 데이터 리스트 불러오기
	@RequestMapping(value = "/document/selectDocumentExpViewList.do")
	public ModelAndView selectDocumentExpViewList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());
		vo.setCmpnyCd(userVO.getCmpnyCd());
		List<?> resultList = null;
		int exptotCnt = 0;
		
		exptotCnt = pfdocumentService.selectDocuViewExpTotCnt(vo);
		resultList = pfdocumentService.selectDocumentExpViewList(vo);
		
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("resultList", resultList);
		mav.addObject("exptotCnt", exptotCnt);
		
		return mav;
		
	}
	
	private String extractBlNumber(String orgFileName) {
		if (orgFileName != null && !orgFileName.isEmpty()) {
			String fileNameWithoutExtension = orgFileName.substring(0, orgFileName.lastIndexOf('.'));
			return fileNameWithoutExtension.substring(fileNameWithoutExtension.indexOf("BL_") + 3);
		}
		return "";
	}
	
	@RequestMapping(value = "/document/insertDocuFilesInfo.do")
	public ModelAndView insertImportFilesInfo(
									@RequestParam("fileBl[]") MultipartFile[] filesBl,
									@RequestParam("fileIn[]") MultipartFile[] filesIn,
									@RequestParam("filePl[]") MultipartFile[] filesPl,
									@RequestParam("fileCo[]") MultipartFile[] filesCo,
									@RequestParam("fileRq[]") MultipartFile[] filesRq,
									@RequestParam("fileAc[]") MultipartFile[] filesAc,
									 HttpServletRequest request, ModelMap model
									 ) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		String blNo = "";
		String cmpnyCd = userVO.getCmpnyCd();
		String regId = userVO.getId();
		String expBlNumber =""; 
		
		
		  for (MultipartFile file : filesBl) {
			  
	            System.out.println("Received file Bl: " + file.getOriginalFilename());
	            String name = file.getName();
				String fileName = file.getOriginalFilename();
				expBlNumber = extractBlNumber(fileName);
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("BL");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				
				pfdocumentService.insertDocuFilesInfo(vo);
	        }
		  for (MultipartFile file : filesIn) {
			  System.out.println("Received file In: " + file.getOriginalFilename());
			  	String name = file.getName();
				String fileName = file.getOriginalFilename();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("CI");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				pfdocumentService.insertDocuFilesInfo(vo);
				
		  }
		  for (MultipartFile file : filesPl) {
			  System.out.println("Received file Pl: " + file.getOriginalFilename());
			  	String name = file.getName();
				String fileName = file.getOriginalFilename();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("PL");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				pfdocumentService.insertDocuFilesInfo(vo);
		  }
		  for (MultipartFile file : filesCo) {
			  System.out.println("Received file Re: " + file.getOriginalFilename());
			  	String name = file.getName();
				String fileName = file.getOriginalFilename();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("CO");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				pfdocumentService.insertDocuFilesInfo(vo);
		  } 
		  for (MultipartFile file : filesRq) {
			  System.out.println("Received file Rq: " + file.getOriginalFilename());
			  	String name = file.getName();
				String fileName = file.getOriginalFilename();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("RQ");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				pfdocumentService.insertDocuFilesInfo(vo);
		  }

		  for (MultipartFile file : filesAc) {
			  System.out.println("Received file Ac: " + file.getOriginalFilename());
			  	String name = file.getName();
				String fileName = file.getOriginalFilename();
				String directory = "/home/files";
				String filepath = Paths.get(directory, fileName).toString();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath)));
				stream.write(file.getBytes());
				stream.close();
				
				SaveExpFileVO vo = new SaveExpFileVO();
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				Calendar date = Calendar.getInstance();
				String uploadDt = sdf.format(date.getTime());
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
				Calendar date2 = Calendar.getInstance();
				String regDt = sdf2.format(date2.getTime());
				
				vo.setOrgFileName(fileName);
				vo.setName("AC");
				vo.setFileName(fileName);
				blNo = expBlNumber;
				vo.setBl(blNo);
				vo.setUploadDt(uploadDt);
				vo.setRegDt(regDt);
				vo.setRegId(regId);
				vo.setCmpnyCd(cmpnyCd);
				
				pfdocumentService.insertDocuFilesInfo(vo);
		  }
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	// 신고번호를 기준으로 Invoice, Packing List 등의 나머지 컬럼 띄우기
	/*@RequestMapping(value = "/document/selectDocumentViewListByRptNo.do")
	public ModelAndView selectDocumentViewListByRptNo(@RequestBody List<String> rptNoData, @ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		for (int i = 0; i < 10; i++) {
	        String rptNo = rptNoData.get(i);
	        List<?> resultList = pfdocumentService.selectDocumentViewListByRptNo(rptNo);
	        model.addAttribute("resultList" + i, resultList);
	        System.out.println("rptNo: " + rptNo);
	        System.out.println("resultList" + i + ": " + resultList);
	    }
		
		System.out.println("rptNo : " + vo.getSrch10());
		
		//System.out.println("rptNoData: " + rptNoData);
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setLang(userVO.getLang());
		vo.setCmpnyCd(userVO.getCmpnyCd());
		//List<?> resultList = documentService.selectDocumentViewListByRptNo(rptNoData);
		//model.addAttribute("resultList", resultList);
		//System.out.println("resultList: " + resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}*/
	

}












