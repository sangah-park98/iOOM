package egovframework.pf.shipping.web;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import egovframework.pf.api.service.ApiOrderCancelVO;
import egovframework.pf.api.service.ApiOrderDetailVO;
import egovframework.pf.api.service.ApiOrderEtcAddVO;
import egovframework.pf.api.service.ApiOrderModVO;
import egovframework.pf.api.service.ApiShippingService;
import egovframework.pf.cmmn.service.SearchVO;
import egovframework.pf.cmmn.service.UserSessionVO;
import egovframework.pf.shipping.service.ShippingAddressVO;
import egovframework.pf.shipping.service.ShippingOrderVO;
import egovframework.pf.shipping.service.ShippingService;
import egovframework.pf.shipping.utill.ShippingEmailUtill;

@Controller
public class ShippingController {

	@Resource(name = "shippingService")
	private ShippingService shippingService;
	@Resource(name = "apiShippingService")
	private ApiShippingService apiShippingService;
	
	//로지스링크 운영서버
	private String apiUrl = "https://app.logis-link.co.kr";
	//로지스링크 개발서버
	//private String apiUrl = "http://211.252.86.30:806";

	
	@RequestMapping(value = "/shipping/shippingView.do")
	public String shippingView(HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		model.addAttribute("grpCd", userVO.getGrpCd());
		return "shipping/shippingView";
	}
	
	@RequestMapping(value = "/shipping/selectShippingViewList.do", method = RequestMethod.POST)
	public ModelAndView selectShippingViewList(@RequestBody SearchVO vo, HttpServletRequest request, ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setList(userVO.getCorpNos());
		}
		List<?> resultList = shippingService.selectShippingViewList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav ;
	}
	
	@RequestMapping(value = "/shipping/selectShippingDstnList.do")
	public ModelAndView selectShippingDstnList(@ModelAttribute("ShippingAddressVO") ShippingAddressVO svo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		svo.setCorpNo(userVO.getCorpNo());
		List<?> resultList = shippingService.selectShippingDstnList(svo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	@RequestMapping(value = "/shipping/insertAddr.do", method = RequestMethod.POST)
	public ModelAndView insertAddr(
	        @ModelAttribute ShippingAddressVO svo, HttpServletRequest request, ModelMap model) throws Exception {
	    HttpSession httpSession = request.getSession(true);
	    UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");

	    svo.setCorpNo(userVO.getCorpNo());
	    svo.setId(userVO.getId());

	    shippingService.insertAddr(svo);
	    ModelAndView mav = new ModelAndView("jsonView", model);
	    return mav;
	}

	@RequestMapping(value = "/shipping/deleteAddr.do", method = RequestMethod.POST)
	@ResponseBody
	public void deleteAddr(@RequestBody List<ShippingAddressVO> svoList, HttpServletRequest request, ModelMap model) throws Exception {
	    for (ShippingAddressVO svo : svoList) {
	        shippingService.deleteAddr(svo);
	    }
	}

	@RequestMapping(value = "/shipping/insertShippingTempList.do")
	@ResponseBody
	public String insertShippingTempList(@RequestBody List<ShippingOrderVO> voList, HttpServletRequest request, Model model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		SearchVO vo = new SearchVO();
		vo.setSrch1(voList.get(0).getBlNo());
		shippingService.insertShippingTempList(voList,userVO);
		return "success";
	}
	
	@RequestMapping(value = "/shipping/selectShippingReqList.do")
	public ModelAndView selectShippingReqList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setCorpNo(userVO.getCorpNo());
		}
		List<?> resultList1 = shippingService.selectShippingReqList(vo);
		List<?> resultList2 = shippingService.selectShippingTempList(vo);
		
		model.addAttribute("resultList1", resultList1);
		model.addAttribute("resultList2", resultList2);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}
	
	@RequestMapping(value = "/shipping/selectShippingOrderSeqList.do")
	public ModelAndView selectShippingOrderSeqList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		if(!userVO.getCorpNo().equals("00000000000")) {
			vo.setCorpNo(userVO.getCorpNo());
		}
		List<?> resultList = shippingService.selectShippingOrderSeqList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		
		/*ApiOrderDetailVO dvo = new ApiOrderDetailVO();
		dvo.setMngDeptId("D20240104165622001");
		dvo.setOrderId(vo.getSrch3());
		dvo.setExternalNumber(vo.getSrch1());
		callOrderDetailAPI(dvo);*/
		
		return mav;
	}
	
	// 1_4 오더조회
	private void callOrderDetailAPI(ApiOrderDetailVO dvo) throws Exception {
	    URL url = new URL(apiUrl + "/api/order/etc/detail");
	    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

	    connection.setRequestMethod("POST");
	    connection.setDoOutput(true);
	    connection.setRequestProperty("Content-Type", "application/json");
	    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0"); // 인증 토큰 추가

	    ObjectMapper objectMapper = new ObjectMapper();
	    String jsonInputString = objectMapper.writeValueAsString(dvo);
	    System.out.println("Sending JSON: " + jsonInputString);

	    try (OutputStream os = connection.getOutputStream()) {
	        byte[] input = jsonInputString.getBytes("utf-8");
	        os.write(input, 0, input.length);
	    }

	    int responseCode = connection.getResponseCode();
	    System.out.println("Response Code : " + responseCode);

	    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
	        StringBuilder response = new StringBuilder();
	        String inputLine;
	        while ((inputLine = in.readLine()) != null) {
	            response.append(inputLine);
	        }
	        System.out.println("API Response: " + response.toString());
	        ObjectMapper responseMapper = new ObjectMapper();
	        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
	        if (responseMap.get("result").equals(true)) {
	        	dvo.setMngDeptId("D20240104165622001");
	        	dvo.setOrderId((String) responseMap.get("orderId")); 
	            dvo.setExternalNumber((String) responseMap.get("externalNumber"));
	        	//apiShippingService.selectOrderDetail(dvo);
	        } else {
	            System.err.println("실패: " + responseMap.get("msg"));
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading API response: " + e.getMessage());
	    }
	}
	
	@RequestMapping(value = "/shipping/selectCtNoList.do")
	public ModelAndView selectCtNoList(@ModelAttribute("searchVO") SearchVO vo, HttpServletRequest request, 
			ModelMap model) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		vo.setCorpNo(userVO.getCorpNo());
		List<?> resultList = shippingService.selectCtNoList(vo);
		model.addAttribute("resultList", resultList);
		ModelAndView mav = new ModelAndView("jsonView", model);
		return mav;
	}

	
	@RequestMapping(value = "/shipping/insertShippingReqList.do", method = RequestMethod.POST)
	public @ResponseBody String insertShippingReqList(
	        @RequestParam("sData") String sData,
	        @RequestParam("files") List<MultipartFile> files, HttpServletResponse response, HttpServletRequest request) throws Exception {
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		
		ObjectMapper objectMapper = new ObjectMapper();
	    List<Map<String, Object>> param = objectMapper.readValue(sData, List.class);
	    ShippingOrderVO svo = new ShippingOrderVO();
	    
	    String saveDir = "/home/files";
	    for (MultipartFile fileIn : files) {
	        String fileName = fileIn.getOriginalFilename();
	        File file = new File(saveDir + "/" + fileName);
	        fileIn.transferTo(file);
	    }
	    
	    // --------------------------------------------
		try {
		  for (Map<String, Object> reqMap : param) {
	        System.out.println("param List: " + reqMap);
	        
	        svo.setOrderSeq((Integer) reqMap.get("orderSeq"));
	        svo.setCtNo((String) reqMap.get("ctNo"));
	        svo.setBlNo((String) reqMap.get("externalInfomation"));
	        svo.setRptNo((String) reqMap.get("externalNumber"));
	        svo.setEstCharge((Integer) reqMap.get("sellCharge"));
	        svo.setToStaff((String) reqMap.get("eComName"));
	        svo.setToPhnNo(((String) reqMap.get("eTel")).replaceAll("-", ""));
	        svo.setToAddr((String) reqMap.get("eAddr"));
	        svo.setToDt((String) reqMap.get("eDate"));
	        svo.setCmpnyNm((String) reqMap.get("bizName"));
	        svo.setCorpNo((String) reqMap.get("bizNum"));
	        svo.setManagerNm((String) reqMap.get("managerNm"));
	        svo.setFromDt((String) reqMap.get("sDate"));
	        svo.setFromAddr((String) reqMap.get("sAddr"));
	        svo.setBillEmail((String) reqMap.get("billEmail"));
	        svo.setShipperManager((String) reqMap.get("shipperManager"));
	        svo.setShipperMail((String) reqMap.get("shipperMail"));
	        svo.setTransDetails((String) reqMap.get("transDetails"));
	        svo.setTaxInvoice((String) reqMap.get("taxInvoice"));
	        svo.setGoodsWeights((String) reqMap.get("goodsWeights"));
	        svo.setMixYn((String) reqMap.get("mixYn"));
			svo.setFromReq((String) reqMap.get("reqMemo"));
			svo.setFromTime((String) reqMap.get("fromTime"));
			svo.setToTime((String) reqMap.get("toTime"));
			svo.setFromSpecifics((String) reqMap.get("sMemo"));
			svo.setFileName((String) reqMap.get("fileName"));
			svo.setRegId(userVO.getId());
			
			shippingService.insertShippingReqList(svo);
			
		  }
			
			//---------------------------- 전송 ----------------------------
			for (Map<String, Object> reqMap2 : param) {
				System.out.println("reqMap2: " + reqMap2);
				ApiOrderEtcAddVO evo = new ApiOrderEtcAddVO();
				evo.setMngDeptId((String) reqMap2.get("mngDeptId"));
				evo.setBizName((String) reqMap2.get("bizName"));
				evo.setBizNum((String) reqMap2.get("bizNum"));
				evo.setInOutSctn((String) reqMap2.get("inOutSctn"));
				evo.setTruckTypeCode((String) reqMap2.get("truckTypeCode"));
				evo.setsComName((String) reqMap2.get("sComName"));
				evo.setsAddr((String) reqMap2.get("sAddr"));
				evo.setsAddrDetail("");
				
				
				String fromTimeStr = reqMap2.get("fromTime") != null ? reqMap2.get("fromTime").toString() : "";
				if (fromTimeStr.equals("즉시")) {
				    LocalDateTime now = LocalDateTime.now();
				    String currentDateTime = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
				    evo.setsDate(currentDateTime);
				} else {
				    String sDateStr = reqMap2.get("sDate") != null ? reqMap2.get("sDate").toString() : "";
				    if (sDateStr.length() == 8) {
				        String formattedSdate = sDateStr.substring(0, 4) + "-" + sDateStr.substring(4, 6) + "-" + sDateStr.substring(6, 8);
				        String combinedDateTime = formattedSdate + " " + fromTimeStr + ":00";
				        evo.setsDate(combinedDateTime);
				    }
				}

				evo.setsStaff("");
				evo.setsTel("");
				evo.setsMemo((String) reqMap2.get("sMemo")); // 특이사항 -> 상차지메모
				evo.seteComName((String) reqMap2.get("eComName"));
				evo.seteAddr((String) reqMap2.get("eAddr"));
				evo.seteAddrDetail("");
				
				String eDateStr = (String) reqMap2.get("eDate");
				String formattedEdate = eDateStr.substring(0, 4) + "-" + eDateStr.substring(4, 6) + "-" + eDateStr.substring(6, 8);
				String toTimeStr = (String) reqMap2.get("toTime");
				String combinedDateTime2 = formattedEdate + " " + toTimeStr + ":00";
				evo.seteDate(combinedDateTime2);
				
				evo.seteStaff("");
				evo.seteTel(((String) reqMap2.get("eTel")).replaceAll("-", ""));
				evo.seteMemo("");
				String ctNo = (String) reqMap2.get("ctNo");
	            evo.setGoodsName(ctNo == null || ctNo.isEmpty() ? "no container" : ctNo);
				evo.setGoodsWeight("");
				evo.setGoodsQty(0);
				evo.setQtyUnitCode("");
				evo.setsWayCode("");
				evo.seteWayCode("");
				evo.setMixYn((String) reqMap2.get("mixYn"));
				evo.setMixSize("");
				evo.setReturnYn("");
				evo.setCarTonCode((String) reqMap2.get("carTonCode"));
				evo.setCarTypeCode((String) reqMap2.get("carTypeCode"));
				evo.setChargeType((String) reqMap2.get("chargeType"));
				String reqMemo = (String) reqMap2.get("reqMemo");
				if ("Y".equals(svo.getTransDetails())) {
			        reqMemo += " / 거래명세서 필요";
			    }
			    if ("Y".equals(svo.getTaxInvoice())) {
			        reqMemo += " / 세금계산서 선수취";
			    }
			    evo.setReqMemo(reqMemo);
				
				evo.setDriverMemo("");
				evo.setItemCode("");
				evo.setSellCharge(0);
				evo.setExternalInfomation((String) reqMap2.get("externalInfomation"));
				evo.setExternalNumber((String) reqMap2.get("externalNumber"));
				evo.setExternalFlag((String) reqMap2.get("externalFlag"));
				evo.setRegid(userVO.getId());
				
				callOrderAddApi(evo);
			}
			
	      
		  sendShippingUtill(svo, false);
	    
	    } catch (Exception e) {
	    	e.printStackTrace();
	    	System.out.println(e.getMessage());
	    }
		return "success";
	}
	
	// 1_1 오더등록
	private void callOrderAddApi(ApiOrderEtcAddVO evo) throws Exception {
	    URL url = new URL(apiUrl + "/api/order/etc/add");  
	    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

	    connection.setRequestMethod("POST");
	    connection.setDoOutput(true);
	    connection.setRequestProperty("Content-Type", "application/json");
	    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0"); // 인증 토큰 추가

	    // JSON 변환
	    ObjectMapper objectMapper = new ObjectMapper();
	    String jsonInputString = objectMapper.writeValueAsString(evo);
	    System.out.println("Sending JSON: " + jsonInputString);

	    // 요청 본문에 JSON 데이터 전송
	    try (OutputStream os = connection.getOutputStream()) {
	        byte[] input = jsonInputString.getBytes("utf-8");
	        os.write(input, 0, input.length);
	    }

	    int responseCode = connection.getResponseCode();
	    System.out.println("Response Code : " + responseCode);

	    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
	        StringBuilder response = new StringBuilder();
	        String inputLine;
	        while ((inputLine = in.readLine()) != null) {
	            response.append(inputLine);
	        }
	        System.out.println("API Response: " + response.toString());
	        ObjectMapper responseMapper = new ObjectMapper();
	        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
	        if (responseMap.get("result").equals(true)) {
	        	ShippingOrderVO svo = new ShippingOrderVO();
	        	svo.setRptNo((String) evo.getExternalNumber());
	        	svo.setBlNo((String) evo.getExternalInfomation());
	        	svo.setOrderId((String) responseMap.get("orderId"));
	        	
	        	String ctNo = (String) evo.getGoodsName();
	        	svo.setCtNo(ctNo == "no container" ? "" : ctNo);
	        	
	        	apiShippingService.updateOrderId(svo);
	        } else {
	            System.err.println("실패: " + responseMap.get("msg"));
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading API response: " + e.getMessage());
	    }
	}

	
	@RequestMapping(value = "/shipping/orderCancel.do", method = RequestMethod.POST)
	public @ResponseBody String orderCancel(
			@RequestBody List<Map<String, Object>> sData, HttpServletRequest request) throws Exception {
		
		HttpSession httpSession = request.getSession(true);
		UserSessionVO userVO = (UserSessionVO) httpSession.getAttribute("USER");
		
		ApiOrderCancelVO evo = new ApiOrderCancelVO();
		
		for (Map<String, Object> reqMap : sData) {
	        System.out.println("param List: " + reqMap);
	        String mngDeptId = (String) reqMap.get("mngDeptId");
	        String orderId = (String) reqMap.get("orderId");
	        String regId = userVO.getId();
	        
	        evo.setMngDeptId(mngDeptId);
	        evo.setOrderId(orderId);
	        evo.setRegid(regId);
	        
	        URL url = new URL(apiUrl + "/api/order/state/orderCancel");
		    HttpURLConnection connection = (HttpURLConnection) url.openConnection();

		    connection.setRequestMethod("POST");
		    connection.setDoOutput(true);
		    connection.setRequestProperty("Content-Type", "application/json");
		    // 인증 토큰 추가
		    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0");

		    // JSON 변환
		    ObjectMapper objectMapper = new ObjectMapper();
		    String jsonInputString = objectMapper.writeValueAsString(evo);
		    System.out.println("Sending JSON: " + jsonInputString);

		    // JSON 전송
		    try (OutputStream os = connection.getOutputStream()) {
		        byte[] input = jsonInputString.getBytes("utf-8");
		        os.write(input, 0, input.length);
		    }

		    int responseCode = connection.getResponseCode();
		    System.out.println("Response Code : " + responseCode);

		    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
		        StringBuilder response = new StringBuilder();
		        String inputLine;
		        while ((inputLine = in.readLine()) != null) {
		            response.append(inputLine);
		        }
		        System.out.println("API Response: " + response.toString());
		        ObjectMapper responseMapper = new ObjectMapper();
		        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
		        if (responseMap.get("result").equals(true)) {
		        	shippingService.orderCancel(evo);
		        }
		    } catch (IOException e) {
		        System.err.println("Error reading API response: " + e.getMessage());
		    }
	    }
		return "success";
	}

	
	@RequestMapping(value = "/shipping/updateShippingReqList.do", method = RequestMethod.POST)
	public @ResponseBody String updateShippingReqList(
	        @RequestParam("sData") String sData,
	        @RequestParam("files") List<MultipartFile> files, HttpServletResponse response, HttpServletRequest request) throws Exception {
	    ObjectMapper objectMapper = new ObjectMapper();
	    List<Map<String, Object>> param = objectMapper.readValue(sData, List.class);
	    ShippingOrderVO svo = new ShippingOrderVO();
	    
	    String saveDir = "/home/files";
	    for (MultipartFile fileIn : files) {
	        String fileName = fileIn.getOriginalFilename();
	        File file = new File(saveDir + "/" + fileName);
	        fileIn.transferTo(file);
	    }
	    
	    for (Map<String, Object> reqMap : param) {
	        System.out.println("param List: " + reqMap);
	        
			svo.setOrderSeq((Integer) reqMap.get("orderSeq"));
			svo.setRptNo((String) reqMap.get("rptNo"));
			svo.setBlNo((String) reqMap.get("blNo"));
			svo.setCmpnyNm((String) reqMap.get("cmpnyNm"));
			svo.setCorpNo((String) reqMap.get("corpNo"));
			svo.setCtNo((String) reqMap.get("ctNo"));
			svo.setOrderId((String) reqMap.get("orderId"));
			svo.setRegDt((String) reqMap.get("regDt"));
			svo.setFromSpecifics((String) reqMap.get("sMemo"));
			svo.setFromDt((String) reqMap.get("sDate"));
			svo.setFromTime((String) reqMap.get("fromTime"));
			svo.setFromAddr((String) reqMap.get("sAddr"));
			svo.setGoodsWeights((String) reqMap.get("goodsWeights"));
			svo.setMixYn((String) reqMap.get("mixYn"));
			svo.setFromReq((String) reqMap.get("reqMemo"));
			svo.setToStaff((String) reqMap.get("eComName"));
			svo.setToPhnNo(((String) reqMap.get("eTel")).replaceAll("-", ""));
			svo.setToAddr((String) reqMap.get("eAddr"));
			svo.setToDt((String) reqMap.get("eDate"));
			svo.setToTime((String) reqMap.get("toTime"));
			svo.setManagerNm((String) reqMap.get("managerNm"));
			svo.setBillEmail((String) reqMap.get("billEmail"));
			svo.setShipperManager((String) reqMap.get("shipperManager"));
	        svo.setShipperMail((String) reqMap.get("shipperMail"));
	        svo.setTransDetails((String) reqMap.get("transDetails"));
	        svo.setTaxInvoice((String) reqMap.get("taxInvoice"));
	        svo.setFileName((String) reqMap.get("fileName"));
			
			shippingService.updateShippingReqList(svo);
			
	    	}
			//-----------------------------------------------------------
			for (Map<String, Object> reqMap2 : param) {
				ApiOrderModVO mvo = new ApiOrderModVO();
				HttpSession session = request.getSession(false);
			    UserSessionVO userVO = (UserSessionVO) session.getAttribute("USER");
			    mvo.setOrderId((String) reqMap2.get("orderId"));
			    mvo.setMngDeptId((String) reqMap2.get("mngDeptId"));
			    mvo.setInOutSctn((String) reqMap2.get("inOutSctn"));
			    mvo.setTruckTypeCode((String) reqMap2.get("truckTypeCode"));
				mvo.setsComName((String) reqMap2.get("sComName"));
				mvo.setsAddr((String) reqMap2.get("sAddr"));
				mvo.setsAddrDetail("");
				
				String fromTimeStr = reqMap2.get("fromTime") != null ? reqMap2.get("fromTime").toString() : "";
				if (fromTimeStr.equals("즉시")) {
				    LocalDateTime now = LocalDateTime.now();
				    String currentDateTime = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
				    mvo.setsDate(currentDateTime);
				} else {
				    String sDateStr = reqMap2.get("sDate") != null ? reqMap2.get("sDate").toString() : "";
				    if (sDateStr.length() == 8) {
				        String formattedSdate = sDateStr.substring(0, 4) + "-" + sDateStr.substring(4, 6) + "-" + sDateStr.substring(6, 8);
				        String combinedDateTime = formattedSdate + " " + fromTimeStr + ":00";
				        mvo.setsDate(combinedDateTime);
				    }
				}

				mvo.setsStaff("");
				mvo.setsTel("");
				mvo.setsMemo((String) reqMap2.get("sMemo")); // 특이사항 -> 상차지메모
				mvo.seteComName((String) reqMap2.get("eComName"));
				mvo.seteAddr((String) reqMap2.get("eAddr"));
				mvo.seteAddrDetail("");
				
				String eDateStr = (String) reqMap2.get("eDate");
				String formattedEdate = eDateStr.substring(0, 4) + "-" + eDateStr.substring(4, 6) + "-" + eDateStr.substring(6, 8);
				String toTimeStr = (String) reqMap2.get("toTime");
				String combinedDateTime2 = formattedEdate + " " + toTimeStr + ":00";
				mvo.seteDate(combinedDateTime2);
				
				mvo.seteStaff("");
				mvo.seteTel(((String) reqMap2.get("eTel")).replaceAll("-", ""));
				mvo.seteMemo("");
				String ctNo = (String) reqMap2.get("ctNo");
				mvo.setGoodsName(ctNo == null || ctNo.isEmpty() ? "no container" : ctNo);
				mvo.setGoodsWeight("");
				mvo.setGoodsQty(0);
				mvo.setQtyUnitCode("");
				mvo.setsWayCode("");
				mvo.seteWayCode("");
				mvo.setMixYn((String) reqMap2.get("mixYn"));
				mvo.setMixSize("");
				mvo.setReturnYn("");
				mvo.setCarTonCode((String) reqMap2.get("carTonCode"));
				mvo.setCarTypeCode((String) reqMap2.get("carTypeCode"));
				mvo.setChargeType((String) reqMap2.get("chargeType"));
				
				String reqMemo = (String) reqMap2.get("reqMemo");
				if ("Y".equals(svo.getTransDetails())) {
			        reqMemo += " / 거래명세서 필요";
			    }
			    if ("Y".equals(svo.getTaxInvoice())) {
			        reqMemo += " / 세금계산서 선수취";
			    }
			    mvo.setReqMemo(reqMemo);
			    
				mvo.setDriverMemo("");
				mvo.setItemCode("");
				mvo.setSellCharge(0);
				mvo.setRegid(userVO.getId());
				String rptNo = svo.getRptNo();
				String blNo = svo.getBlNo();
				callOrderModApi(mvo, rptNo, blNo);
			}
	     
	    sendShippingUtill(svo, true);
		return "success";
	}
	
	// 1_2 오더수정
	private void callOrderModApi(ApiOrderModVO mvo, String rptNo, String blNo) throws Exception {
	    URL url = new URL(apiUrl + "/api/order/etc/mod");
	    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	    ShippingOrderVO svo = new ShippingOrderVO();
	    
	    connection.setRequestMethod("POST");
	    connection.setDoOutput(true);
	    connection.setRequestProperty("Content-Type", "application/json");
	    connection.setRequestProperty("Authorization", "Bearer eyJhbGciOiJIUzI1NiJ9.eyJjVHlwZSI6IjAxIiwiY3VzdElkIjoiQzIwMjQwMTA0MTY1NjIyMDAxIn0.XWvjLVBG0eBPROFrDaaxXWvK5RrKWC5fVw86OxZHJJ0");

	    ObjectMapper objectMapper = new ObjectMapper();
	    String jsonInputString = objectMapper.writeValueAsString(mvo);
	    System.out.println("Sending JSON: " + jsonInputString);

	    try (OutputStream os = connection.getOutputStream()) {
	        byte[] input = jsonInputString.getBytes("utf-8");
	        os.write(input, 0, input.length);
	    }

	    int responseCode = connection.getResponseCode();
	    System.out.println("Response Code : " + responseCode);

	    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
	        StringBuilder response = new StringBuilder();
	        String inputLine;
	        while ((inputLine = in.readLine()) != null) {
	            response.append(inputLine);
	        }
	        System.out.println("API Response: " + response.toString());
	        ObjectMapper responseMapper = new ObjectMapper();
	        Map<String, Object> responseMap = responseMapper.readValue(response.toString(), Map.class);
	        if (responseMap.get("result").equals(true)) {
	        	svo.setOrderId((String) responseMap.get("orderId"));
	        	svo.setOrderSeq((Integer) responseMap.get("orderSeq"));
	        	svo.setCtNo((String) mvo.getGoodsName());
	        	svo.setRptNo(rptNo);
	        	svo.setBlNo(blNo);
	        	svo.setEdtDt((String) responseMap.get("regDt"));
	        	svo.setFromReq((String) responseMap.get("reqMemo"));
	        	svo.setCmpnyNm((String) responseMap.get("cmpnyNm"));
	        	svo.setCorpNo((String) responseMap.get("corpNo"));
	        	svo.setFromSpecifics((String) responseMap.get("sMemo"));
				svo.setFromDt((String) responseMap.get("sDate"));
				svo.setFromTime((String) responseMap.get("fromTime"));
				svo.setFromAddr((String) responseMap.get("sAddr"));
				svo.setEstCharge((Integer) responseMap.get("sellCharge"));
				svo.setGoodsWeights((String) responseMap.get("goodsWeights"));
				svo.setMixYn((String) responseMap.get("mixYn"));
				svo.setToStaff((String) responseMap.get("eStaff"));
				svo.setToPhnNo((String) responseMap.get("eTel"));
				svo.setToAddr((String) responseMap.get("eAddr"));
				svo.setToDt((String) responseMap.get("eDate"));
				svo.setToTime((String) responseMap.get("toTime"));
				svo.setManagerNm((String) responseMap.get("managerNm"));
				svo.setBillEmail((String) responseMap.get("billEmail"));
	        	
	        	apiShippingService.updateOrderState(svo);
	        } else {
	            System.err.println("실패: " + responseMap.get("msg"));
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading API response: " + e.getMessage());
	    }
	}
	
  	private String sendShippingUtill(ShippingOrderVO svo, boolean isModified) throws Exception {
  		String fileName = svo.getFileName();
  		System.out.println("파일명: " + fileName);
  		String sendEmail = "import@ilyang.com";
  		String result = ShippingEmailUtill.sendEmailWithFile(svo, sendEmail, isModified);
  		return result;
  	}
	
}